uniform int _CellsX, _CellsY;
uniform float _DeltaTime, _WindX, _WindY, _WindXFraction, _WindYFraction, _InvertedCellVolume;
uniform float _CellSizeX, _CellSizeXSq, _CellsPerMeterX, _CellsPerMeterXSq;
uniform float _CellSizeY, _CellSizeYSq, _CellsPerMeterY, _CellsPerMeterYSq;

uniform StructuredBuffer<float> _Read, _SootInjection;

uniform Texture2D<float4> _NoiseTex;
uniform SamplerState LinearClampSampler;

uniform Texture2D<float4> _Wind;
uniform SamplerState sampler_Wind;

RWStructuredBuffer<float> _Write;
RWStructuredBuffer<float3> _Sigma3D;

//0
#pragma kernel AdvectDiffuseExplicit
[numthreads(8, 8, 1)]
void AdvectDiffuseExplicit(uint3 id : SV_DispatchThreadID)
{
	//check if we are outside of mesh due to non-integer fit to kernel threads
	if (id.x >= (uint)_CellsX || id.y >= (uint)_CellsY)
	{
		return;
	}

	int idx = id.x + id.y * _CellsX;
	float C = _Read[idx];
	float L = 0, R = 0, D = 0, U = 0;
	if (id.x > 0 )
	{
		int idxL = id.x - 1 + id.y * _CellsX;
		L = _Read[idxL];
	}
	if (id.x < (uint)_CellsX - 1)
	{
		int idxR = id.x + 1 + id.y * _CellsX;
		R = _Read[idxR];
	}
	if (id.y > 0)
	{
		int idxD = id.x + (id.y - 1) * _CellsX;
		D = _Read[idxD];
	}
	if (id.y < (uint)_CellsY - 1)
	{
		int idxU = id.x + (id.y + 1) * _CellsX;
		U = _Read[idxU];
	}

	//add some noise based on perlin texture
	/*float2 uvX = float2(id.x / (float)_CellsX, id.y / (float)_CellsY);
	float2 uvY = float2(id.y / (float)_CellsY, id.x / (float)_CellsX);
	float modX = 1.0 -0.4 * (1.0 - 2.0 * _NoiseTex.SampleLevel(LinearClampSampler, uvX, 0));
	float modY = 1.0 -0.4 * (1.0 - 2.0 * _NoiseTex.SampleLevel(LinearClampSampler, uvY, 0));*/

	//TODO: test central difference, make sure it is stable
	//advection up-wind scheme
	float advectionX = _WindX * _CellsPerMeterX;// *modX;
	float advectionY = _WindY * _CellsPerMeterY;// *modY;
	if (_WindX < 0)
	{
		advectionX *= (R - C);
	}
	else
	{
		advectionX *= (C - L);
	}
	if (_WindY < 0)
	{
		advectionY *= (U - C);
	}
	else
	{
		advectionY *= (C - D);
	}
	float advection = advectionX + advectionY;

	//diffusion
	float eddyDiffusionCoefficientAlong = 2.0;
	float eddyDiffusionCoefficientAcross = 10.0;
	float diffusionX = (R - 2 * C + L) * _CellsPerMeterXSq;
	float diffusionY = (U - 2 * C + D) * _CellsPerMeterYSq;
	diffusionX *= (eddyDiffusionCoefficientAlong * _WindXFraction + eddyDiffusionCoefficientAcross * (1.0 - _WindXFraction));
	diffusionY *= (eddyDiffusionCoefficientAlong * _WindYFraction + eddyDiffusionCoefficientAcross * (1.0 - _WindYFraction));
	float diffusion = diffusionX + diffusionY;

	//injection
	float conc_dot = _SootInjection[idx] * _InvertedCellVolume; // kg * s / m3, kg/s soot injection controlled/taken from firemesh

	//calculate new concentration (kg/m3)
	float c_delta = _DeltaTime * (-advection + diffusion + conc_dot);
	_Write[idx] = C + c_delta;
}

float2 GetAdvectedPos(float2 pos)
{
	//when only using global wind value
	/*float2 step = _DeltaTime * float2(_WindX * _CellsPerMeterX, _WindY * _CellsPerMeterY);
	pos -= step;
	return pos;*/

	//wind map from texture
	//Remember that textures have to be in linear space, not gamma!!!
	float2 uv = float2(pos.x / _CellsX, pos.y / _CellsY);
	float4 windData = _Wind.SampleLevel(sampler_Wind, uv, 0);
	float2 windDir = normalize(float2(windData.r - 0.5, windData.g - 0.5));
	float2 wind = 5 * windDir;
	float2 step = _DeltaTime * float2(wind.x * _CellsPerMeterX, wind.y * _CellsPerMeterY);

	pos -= step;

	return pos;
}

float SampleBilinear(float2 advectedPos)
{
	//save the down-clamped position and the up-clamped position
	//floor is needed since we might have negative values and casting does not work then properly
	int x = floor(advectedPos.x);
	int y = floor(advectedPos.y);
	int xp1 = x + 1;
	int yp1 = y + 1;

	//using remainder as fraction of actual position and integer snapped position
	float fx = advectedPos.x - x;
	float fy = advectedPos.y - y;

	float c00 = 0, c10 = 0, c01 = 0, c11 = 0;
	if (x >= 0 && x < _CellsX && y >= 0 && y < _CellsY)
	{
		int idxC = x + y * _CellsX;
		c00 = _Read[idxC];
	}
	if (xp1 >= 0 && xp1 < _CellsX && y >= 0 && y < _CellsY)
	{
		int idxR = xp1 + y * _CellsX;
		c10 = _Read[idxR];
	}
	if (x >= 0 && x < _CellsX && yp1 >= 0 && yp1 < _CellsY)
	{
		int idxU = x + yp1 * _CellsX;
		c01 = _Read[idxU];
	}
	if (xp1 >= 0 && xp1 < _CellsX && yp1 >= 0 && yp1 < _CellsY)
	{
		int idxRU = xp1 + yp1 * _CellsX;
		c11 = _Read[idxRU];
	}

	float a = c00 * (1.0 - fx) + c10 * fx;
	float b = c01 * (1.0 - fx) + c11 * fx;

	return a * (1.0 - fy) + b * fy;
}

//1
#pragma kernel AdvectSemiLagrangian
[numthreads(8, 8, 1)]
void AdvectSemiLagrangian(uint3 id : SV_DispatchThreadID)
{
	//check if we are outside of mesh due to non-integer fit to kernel threads
	if (id.x >= (uint)_CellsX || id.y >= (uint)_CellsY)
	{
		return;
	}

	int idx = id.x + id.y * _CellsX;

	//advection 
	float2 pos = float2(id.x, id.y);
	float2 advectedPos = GetAdvectedPos(pos);
	float newC = SampleBilinear(advectedPos);	

	//injection
	float conc_dot = max(0.0, _SootInjection[idx] * _InvertedCellVolume); // kg * s / m3, kg/s soot injection controlled/taken from firemesh

	//calculate new concentration (kg/m3)
	float c_delta = _DeltaTime * conc_dot;
	_Write[idx] = newC + c_delta;
}

//static const float a[6] = { -0.0875, -0.03849, -0.00807, 0.0, 0.00807, 0.03849 };
//static const float b[6] = { -0.1029, -0.1714, -0.3049, 0.0, -0.3049, 0.1714 };

//calculated from https://www.ready.noaa.gov/READYpgclass.php and from "Point source atmospheric diffusion model with variable wind and diffusivity profiles" which describes relation between K_z and K_y
static const float eddy_diffusivity[7] = { 260.0, 215.0, 125.0, 125.0, 39.0, 10.5, 3.0 };
//Diffusion only taken into account across wind direction
float2 GetDiffusionCoefficient(float2 pos)
{
	float2 uv = float2(pos.x / _CellsX, pos.y / _CellsY);
	float4 windData = _Wind.SampleLevel(sampler_Wind, uv, 0);
	float2 windDir = normalize(float2(windData.r - 0.5, windData.g - 0.5));

	//swap x and y since we want cross-wind, not along wind
	float2 K_y = float2(abs(windDir.y), abs(windDir.x)); //can't have negative values... 
	int stability = 3; //0-6 represents stability class A-G
	float K = eddy_diffusivity[stability];
	K_y = float2(K_y.x * K + 0.001, K_y.y * K + 0.001); // to avoid divison by zero	

	//if we ever need better calculation this is pieces of it...
	/*float z_ref = 10.0;
	float z_0 = 0.25;
	float u_star = 0.41 * wind.length / (log(z_ref / z_0));

	//unstable
	if (stability < 3)
	{		
		K_z = 
		K = 5 * K_z;
	}
	//neutral
	else if (stability == 3)
	{
		int stability = 1; //0-6 represents A-G
		z_0 = 1.0;
		float L = 1.0 / (a[stability] * pow(z_0, b[stability]);
		K_z = 0.4 * wind * L;
	}
	//stable
	else
	{

	}*/

	return K_y;
}

//2
#pragma kernel DiffuseImplicitIsotropic
[numthreads(8, 8, 1)]
void DiffuseImplicitIsotropic(uint3 id : SV_DispatchThreadID)
{
	//check if we are outside of mesh due to non-integer fit to kernel threads
	if (id.x >= (uint)_CellsX || id.y >= (uint)_CellsY)
	{
		return;
	}

	int idx = id.x + id.y * _CellsX;
	float C = _Read[idx];
	//float L = 0, R = 0, D = 0, U = 0;
	float L = C, R = C, D = C, U = C; //never diffuse to outside?
	if (id.x > 0)
	{
		int idxL = id.x - 1 + id.y * _CellsX;
		L = _Read[idxL];
	}
	if (id.x < (uint)_CellsX - 1)
	{
		int idxR = id.x + 1 + id.y * _CellsX;
		R = _Read[idxR];
	}
	if (id.y > 0)
	{
		int idxD = id.x + (id.y - 1) * _CellsX;
		D = _Read[idxD];
	}
	if (id.y < (uint)_CellsY - 1)
	{
		int idxU = id.x + (id.y + 1) * _CellsX;
		U = _Read[idxU];
	}	

	//uniform diffusion
	int stability = 5; //0-6 represents stability class A-G
	float K = eddy_diffusivity[stability];
	//dx^2 / v * dt
	float alpha = _CellSizeX * _CellSizeY / (K * _DeltaTime);
	float rBeta = 1.0f / (4.0f + alpha);
	_Write[idx] = (C * alpha + L + R + D + U) * rBeta;
	return;
}

//3
#pragma kernel DiffuseImplicitAnisotropic
[numthreads(8, 8, 1)]
void DiffuseImplicitAnisotropic(uint3 id : SV_DispatchThreadID)
{
	//check if we are outside of mesh due to non-integer fit to kernel threads
	if (id.x >= (uint)_CellsX || id.y >= (uint)_CellsY)
	{
		return;
	}

	int idx = id.x + id.y * _CellsX;
	float C = _Read[idx];
	//float L = 0, R = 0, D = 0, U = 0;
	float L = C, R = C, D = C, U = C; //never diffuse to outside?
	if (id.x > 0)
	{
		int idxL = id.x - 1 + id.y * _CellsX;
		L = _Read[idxL];
	}
	if (id.x < (uint)_CellsX - 1)
	{
		int idxR = id.x + 1 + id.y * _CellsX;
		R = _Read[idxR];
	}
	if (id.y > 0)
	{
		int idxD = id.x + (id.y - 1) * _CellsX;
		D = _Read[idxD];
	}
	if (id.y < (uint)_CellsY - 1)
	{
		int idxU = id.x + (id.y + 1) * _CellsX;
		U = _Read[idxU];
	}

	//Diffusion cross-wind
	float2 pos = float2(id.x, id.y);
	float2 K_y = GetDiffusionCoefficient(pos);
	//dx^2 / v * dt
	float alpha = _CellSizeXSq / (K_y.x * _DeltaTime) + _CellSizeYSq / (K_y.y * _DeltaTime);
	float rBeta = 4.0f + alpha;
	_Write[idx] = (C * alpha + L + R + D + U) / rBeta;
}

//https://www.earth-prints.org/bitstream/2122/11735/1/cosmac2006.pdf, doi:10.1016/j.epsl.2005.11.019
//4
#pragma kernel AdvectDiffuseExplicitNew
[numthreads(8, 8, 1)]
void AdvectDiffuseExplicitNew(uint3 id : SV_DispatchThreadID)
{
	//check if we are outside of mesh due to non-integer fit to kernel threads
	if (id.x >= (uint)_CellsX || id.y >= (uint)_CellsY)
	{
		return;
	}

	int idx = id.x + id.y * _CellsX;
	float C = _Read[idx];
	float L = 0, R = 0, D = 0, U = 0;
	if (id.x > 0)
	{
		int idxL = id.x - 1 + id.y * _CellsX;
		L = _Read[idxL];
	}
	if (id.x < (uint)_CellsX - 1)
	{
		int idxR = id.x + 1 + id.y * _CellsX;
		R = _Read[idxR];
	}
	if (id.y > 0)
	{
		int idxD = id.x + (id.y - 1) * _CellsX;
		D = _Read[idxD];
	}
	if (id.y < (uint)_CellsY - 1)
	{
		int idxU = id.x + (id.y + 1) * _CellsX;
		U = _Read[idxU];
	}

	//advection, eq. 21
	float CrX = _WindX * _DeltaTime * _CellsPerMeterX;	
	float CrY = _WindY * _DeltaTime * _CellsPerMeterY;
	float advectionX = -0.5 * CrX * (R - L) + 0.5 * CrX * CrX * (R - 2 * C + L);
	float advectionY = -0.5 * CrY * (U - D) + 0.5 * CrY * CrY * (U - 2 * C + D);
	float advection = advectionX + advectionY;

	//diffusion, eq. 24
	float K_H = 50.0;
	float diffusionX = 0.5 * _CellsPerMeterXSq * ((K_H + K_H) * L - (K_H + 2 * K_H + K_H) * C + (K_H + K_H) * R);
	float diffusionY = 0.5 * _CellsPerMeterYSq * ((K_H + K_H) * D - (K_H + 2 * K_H + K_H) * C + (K_H + K_H) * U);
	float diffusion = _DeltaTime * (diffusionX + diffusionY);

	//injection
	float conc_delta = _DeltaTime * _SootInjection[idx] * _InvertedCellVolume; // kg * s / m3, kg/s soot injection controlled/taken from firemesh

	//calculate new concentration (kg/m3)
	float c_delta = advection + diffusion + conc_delta;
	_Write[idx] = C + c_delta;
}

//https://www.earth-prints.org/bitstream/2122/11735/1/cosmac2006.pdf, doi:10.1016/j.epsl.2005.11.019
//5
#pragma kernel AdvectDiffuseExplicitFluxLimited
[numthreads(8, 8, 1)]
void AdvectDiffuseExplicitFluxLimited(uint3 id : SV_DispatchThreadID)
{
	//check if we are outside of mesh due to non-integer fit to kernel threads
	if (id.x >= (uint)_CellsX || id.y >= (uint)_CellsY)
	{
		return;
	}

	int idx = id.x + id.y * _CellsX;
	float C = _Read[idx];
	float3 sigmaC = _Sigma3D[idx];
	float L = 0, R = 0, D = 0, U = 0;
	float3 sigmaL = 0, sigmaD = 0;
	if (id.x > 0)
	{
		int idxL = id.x - 1 + id.y * _CellsX;
		L = _Read[idxL];
		sigmaL = _Sigma3D[idxL];
	}
	if (id.x < (uint)_CellsX - 1)
	{
		int idxR = id.x + 1 + id.y * _CellsX;
		R = _Read[idxR];
	}
	if (id.y > 0)
	{
		int idxD = id.x + (id.y - 1) * _CellsX;
		D = _Read[idxD];
		sigmaD = _Sigma3D[idxD];
	}
	if (id.y < (uint)_CellsY - 1)
	{
		int idxU = id.x + (id.y + 1) * _CellsX;
		U = _Read[idxU];
	}

	//Advection, eq. 22
	//assume Cr is the same for all cells as long as we have uniform velocity
	float CrX = _WindX * _DeltaTime * _CellsPerMeterX;
	float CrY = _WindY * _DeltaTime * _CellsPerMeterY;
	//Eq. 22
	float advectionX = -_DeltaTime * _CellsPerMeterX * (_WindX * C - _WindX * L) - 0.5 * _CellSizeX * (CrX * (1.0 - CrX) * sigmaC.x - CrX * (1.0 - CrX) * sigmaL.x);
	float advectionY = -_DeltaTime * _CellsPerMeterY * (_WindY * C - _WindY * D) - 0.5 * _CellSizeY * (CrY * (1.0 - CrY) * sigmaC.y - CrY * (1.0 - CrY) * sigmaD.y);
	float advection = advectionX + advectionY;

	//diffusion, eq. 24
	float K_H = 50.0;
	float diffusionX = 0.5 * _CellsPerMeterXSq * ((K_H + K_H) * L - (K_H + 2 * K_H + K_H) * C + (K_H + K_H) * R);
	float diffusionY = 0.5 * _CellsPerMeterYSq * ((K_H + K_H) * D - (K_H + 2 * K_H + K_H) * C + (K_H + K_H) * U);
	float diffusion = _DeltaTime * (diffusionX + diffusionY);

	//injection
	float conc_delta = _DeltaTime * _SootInjection[idx] * _InvertedCellVolume; // kg * s / m3, kg/s soot injection controlled/taken from firemesh

	//calculate new concentration (kg/m3)
	float c_delta = advection + diffusion + conc_delta;
	_Write[idx] = C + c_delta;
}

float MinMod(float a, float b)
{
	return 0.5 * (sign(a) + sign(b)) * min(abs(a), abs(b));
}

//6
#pragma kernel Sigma2D
[numthreads(8, 8, 1)]
void Sigma2D(uint3 id : SV_DispatchThreadID)
{
	//check if we are outside of mesh due to non-integer fit to kernel threads
	if (id.x >= (uint)_CellsX || id.y >= (uint)_CellsY)
	{
		return;
	}

	int idx = id.x + id.y * _CellsX;

	//Read should be soot concentration in this case
	float C = _Read[idx];
	float L = 0, R = 0, D = 0, U = 0;
	if (id.x > 0)
	{
		int idxL = id.x - 1 + id.y * _CellsX;
		L = _Read[idxL];
	}
	if (id.x < (uint)_CellsX - 1)
	{
		int idxR = id.x + 1 + id.y * _CellsX;
		R = _Read[idxR];
	}
	if (id.y > 0)
	{
		int idxD = id.x + (id.y - 1) * _CellsX;
		D = _Read[idxD];
	}
	if (id.y < (uint)_CellsY - 1)
	{
		int idxU = id.x + (id.y + 1) * _CellsX;
		U = _Read[idxU];
	}

	float sigmaX = _CellsPerMeterX * MinMod((R - C), (C - L));
	float sigmaY = _CellsPerMeterY * MinMod((U - C), (C - D));

	//write to sigma buffer
	_Sigma3D[idx] = float3(sigmaX, sigmaY, 0.0);
}

//7
#pragma kernel AdvectSemiLagrangianExplcitiDiffusion
[numthreads(8, 8, 1)]
void AdvectSemiLagrangianExplcitiDiffusion(uint3 id : SV_DispatchThreadID)
{
	//check if we are outside of mesh due to non-integer fit to kernel threads
	if (id.x >= (uint)_CellsX || id.y >= (uint)_CellsY)
	{
		return;
	}

	int idx = id.x + id.y * _CellsX;

	//advection 
	float2 pos = float2(id.x, id.y);
	float2 advectedPos = GetAdvectedPos(pos);
	float newC = SampleBilinear(advectedPos);

	//injection
	float conc_dot = _SootInjection[idx] * _InvertedCellVolume; // kg * s / m3, kg/s soot injection controlled/taken from firemesh

	//diffuse, make sure time step is short enough
	float C = _Read[idx];
	float L = 0, R = 0, D = 0, U = 0;
	if (id.x > 0)
	{
		int idxL = id.x - 1 + id.y * _CellsX;
		L = _Read[idxL];
	}
	if (id.x < (uint)_CellsX - 1)
	{
		int idxR = id.x + 1 + id.y * _CellsX;
		R = _Read[idxR];
	}
	if (id.y > 0)
	{
		int idxD = id.x + (id.y - 1) * _CellsX;
		D = _Read[idxD];
	}
	if (id.y < (uint)_CellsY - 1)
	{
		int idxU = id.x + (id.y + 1) * _CellsX;
		U = _Read[idxU];
	}

	float K_H = 100.0;
	float diffusionX = K_H * (R - 2 * C + L) * _CellsPerMeterXSq;
	float diffusionY = K_H * (U - 2 * C + D) * _CellsPerMeterYSq;
	float diffusion = diffusionX + diffusionY;

	//calculate new concentration (kg/m3)
	float c_delta = _DeltaTime * (conc_dot + diffusion);
	_Write[idx] = newC + c_delta;
}