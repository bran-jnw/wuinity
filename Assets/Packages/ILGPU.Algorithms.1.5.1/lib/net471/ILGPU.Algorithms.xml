<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ILGPU.Algorithms</name>
    </assembly>
    <members>
        <member name="T:ILGPU.AlgorithmContext">
            <summary>
            Represents the main driver class for all algorithms.
            </summary>
        </member>
        <member name="F:ILGPU.AlgorithmContext.IntrinsicBindingFlags">
            <summary>
            The default intrinsic binding flags.
            </summary>
        </member>
        <member name="F:ILGPU.AlgorithmContext.XMathType">
            <summary>
            The global <see cref="T:ILGPU.Algorithms.XMath"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.AlgorithmContext.GroupExtensionsType">
            <summary>
            The global <see cref="T:ILGPU.Algorithms.GroupExtensions"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.AlgorithmContext.WarpExtensionsType">
            <summary>
            The global <see cref="T:ILGPU.Algorithms.WarpExtensions"/> type.
            </summary>
        </member>
        <member name="M:ILGPU.AlgorithmContext.#cctor">
            <summary>
            Initializes a static instance.
            </summary>
        </member>
        <member name="M:ILGPU.AlgorithmContext.EnableAlgorithms(ILGPU.Context.Builder)">
            <summary>
            Enables algorithm extensions in the scope of the given context builder.
            </summary>
            <param name="builder">The builder to enable algorithms for.</param>
        </member>
        <member name="M:ILGPU.AlgorithmContext.RegisterMathRemappings">
            <summary>
            Registers all math remappings for faster code generation.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.AlgorithmObject">
            <summary>
            Represents the base class for all objects that need to
            reference an accelerator.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.AlgorithmObject.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new context object.
            </summary>
            <param name="accelerator">The associated accelerator.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ArrayExtensions">
            <summary>
            Represents extension methods for arrays.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetExtent``1(``0[])">
            <summary>
            Returns the extent of an one-dimensional array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <returns>The extent of an one-dimensional array.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetExtent``1(``0[0:,0:])">
            <summary>
            Returns the extent of a two-dimensional array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <returns>The extent of a two-dimensional array.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetExtent``1(``0[0:,0:,0:])">
            <summary>
            Returns the extent of a three-dimensional array.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <returns>The extent of a three-dimensional array.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetValue``1(``0[],ILGPU.Index1D)">
            <summary>
            Returns the value at the given index.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <param name="index">The element index.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetValue``1(``0[0:,0:],ILGPU.Index2D)">
            <summary>
            Returns the value at the given index.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <param name="index">The element index.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.GetValue``1(``0[0:,0:,0:],ILGPU.Index3D)">
            <summary>
            Returns the value at the given index.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The source array.</param>
            <param name="index">The element index.</param>
            <returns>The value at the given index.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.SetValue``1(``0[],``0,ILGPU.Index1D)">
            <summary>
            Sets the value at the given index to the given one.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The target array.</param>
            <param name="value">The value to set.</param>
            <param name="index">The element index.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.SetValue``1(``0[0:,0:],``0,ILGPU.Index2D)">
            <summary>
            Sets the value at the given index to the given one.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The target array.</param>
            <param name="value">The value to set.</param>
            <param name="index">The element index.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ArrayExtensions.SetValue``1(``0[0:,0:,0:],``0,ILGPU.Index3D)">
            <summary>
            Sets the value at the given index to the given one.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="array">The target array.</param>
            <param name="value">The value to set.</param>
            <param name="index">The element index.</param>
        </member>
        <member name="T:ILGPU.Algorithms.CL.CLContext">
            <summary>
            Manages custom CL-specific intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.CL.CLContext.CLMathType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.CL.CLMath"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.CL.CLContext.MathCodeGenerator">
            <summary>
            Represents the <see cref="M:ILGPU.Algorithms.CL.CLMath.GenerateMathIntrinsic(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)"/>
            methods.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.CL.CLContext.MathCodeGeneratorIntrinsic">
            <summary>
            Represents the intrinsic representation of the
            <see cref="F:ILGPU.Algorithms.CL.CLContext.MathCodeGenerator"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.CL.CLContext.CLGroupExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.CL.CLGroupExtensions"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.CL.CLContext.CLWarpExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.CL.CLWarpExtensions"/> type.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.GetMathIntrinsic(System.String,System.Type[])">
            <summary>
            Resolves a CL intrinsic for the given math-function configuration.
            </summary>
            <param name="name">The intrinsic name.</param>
            <param name="types">The parameter types.</param>
            <returns>The resolved intrinsic representation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.RegisterIntrinsicMapping(ILGPU.IR.Intrinsics.IntrinsicImplementationManager,System.Type,System.Type,System.String)">
            <summary>
            Registers an intrinsic mapping.
            </summary>
            <param name="manager">The current manager.</param>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <param name="name">The method name to register.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.RegisterIntrinsicCodeGenerator(ILGPU.IR.Intrinsics.IntrinsicImplementationManager,System.Type,System.Type,System.String,System.String)">
            <summary>
            Registers an intrinsic mapping using a code generator.
            </summary>
            <param name="manager">The current manager.</param>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <param name="name">The method name to register.</param>
            <param name="codeGeneratorName">
            The name of the code generator to register.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.RegisterXMathCodeGenerator(ILGPU.IR.Intrinsics.IntrinsicImplementationManager,System.Type,System.String,System.String,System.Type[])">
            <summary>
            Registers an XMath replacement mapping using a code generator.
            </summary>
            <param name="manager">The current manager.</param>
            <param name="targetType">The target type.</param>
            <param name="functionName">The method name to register.</param>
            <param name="codeGeneratorName">
            The name of the code generator to register.
            </param>
            <param name="types">The argument types for the target method.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.GenerateScanReduce``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value,System.String)">
            <summary>
            Generates an intrinsic reduce.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanReduce">The reduction logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
            <param name="scanReduceOperation">The basic reduction operation.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.GenerateRoundAwayFromZero(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic code generator for RoundAwayFromZero.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.GenerateRoundToEven(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic code generator for RoundToEven.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLContext.GenerateIEEERemainder(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic code generator for IEEERemainder.
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="T:ILGPU.Algorithms.CL.CLGroupExtensions">
            <summary>
            Custom OpenCL-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.GenerateReduce``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic reduce.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.GenerateAllReduce``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic reduce.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.GenerateExclusiveScan``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.GenerateInclusiveScan``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.ExclusiveScanNextIteration``2(``0,``0,``0)">
            <summary>
            Prepares for the next iteration of a group-wide exclusive scan within the
            same kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="leftBoundary">The left boundary value.</param>
            <param name="rightBoundary">The right boundary value.</param>
            <param name="currentValue">The current value.</param>
            <returns>The starting value for the next iteration.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLGroupExtensions.InclusiveScanNextIteration``2(``0,``0,``0)">
            <summary>
            Prepares for the next iteration of a group-wide inclusive scan within the
            same kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="leftBoundary">The left boundary value.</param>
            <param name="rightBoundary">The right boundary value.</param>
            <param name="currentValue">The current value.</param>
            <returns>The starting value for the next iteration.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.GenerateMathIntrinsic(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates intrinsic math instructions for the following kinds:
            Rcp
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.IsNaN(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsNaN(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.IsNaN(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsNaN(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.IsInfinity(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsInfinity(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.IsInfinity(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsInfinity(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rcp(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rcp(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rcp(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rcp(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rem(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rem(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rem(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rem(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sqrt(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sqrt(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sqrt(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sqrt(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rsqrt(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rsqrt(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Rsqrt(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rsqrt(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Floor(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Floor(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Floor(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Floor(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Ceiling(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Ceiling(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Ceiling(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Ceiling(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sin(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sin(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sin(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sin(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sinh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sinh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Sinh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sinh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Asin(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Asin(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Asin(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Asin(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Cos(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cos(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Cos(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cos(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Cosh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cosh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Cosh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cosh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Acos(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Acos(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Acos(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Acos(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Tan(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tan(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Tan(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tan(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Tanh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tanh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Tanh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tanh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Atan(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Atan(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Atan2(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan2(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Atan2(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan2(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Pow(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Pow(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Pow(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Pow(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Exp(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Exp(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Exp2(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp2(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Exp2(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp2(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log10(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log10(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log10(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log10(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log2(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log2(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLMath.Log2(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log2(System.Single)" />
        </member>
        <member name="T:ILGPU.Algorithms.CL.CLWarpExtensions">
            <summary>
            Custom OpenCL-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLWarpExtensions.GenerateReduce``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic reduce.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLWarpExtensions.GenerateAllReduce``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic reduce.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLWarpExtensions.GenerateExclusiveScan``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.CL.CLWarpExtensions.GenerateInclusiveScan``2(ILGPU.Backends.OpenCL.CLBackend,ILGPU.Backends.OpenCL.CLCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates an intrinsic scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ConcurrentStreamProcessor">
            <summary>
            Processes actions in parallel on multiple asynchronous accelerator streams.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ConcurrentStreamProcessor.#ctor(ILGPU.Runtime.Accelerator,System.Int32,System.Func{ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream})">
            <summary>
            Constructs a new concurrent stream processor.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="maxNumConcurrentStreams">
            The maximum number of concurrent streams to use (if any).
            </param>
            <param name="streamProvider">
            A custom stream provider function to construct specialized streams.
            </param>
        </member>
        <member name="P:ILGPU.Algorithms.ConcurrentStreamProcessor.MaxNumConcurrentStreams">
            <summary>
            Returns the maximum number of concurrent streams supported by this processor.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ConcurrentStreamProcessor.ProcessConcurrently(System.Int32,System.Action{ILGPU.Runtime.AcceleratorStream,System.Int32})">
            <summary>
            Processes the given action concurrently by using the underlying accelerator
            streams concurrently to submit different jobs in parallel.
            </summary>
            <remarks>
            Note that this method assumes that all previous jobs have been synchronized
            with the current processing thread.
            </remarks>
            <param name="numActions">The number of actions to submit.</param>
            <param name="action">
            The action to invoke on each stream to submit work.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.ConcurrentStreamProcessor.ProcessConcurrently(ILGPU.Runtime.AcceleratorStream,System.Int32,System.Action{ILGPU.Runtime.AcceleratorStream,System.Int32})">
            <summary>
            Processes the given action concurrently by using the underlying accelerator
            streams concurrently to submit different jobs in parallel.
            </summary>
            <param name="stream">The current accelerator stream.</param>
            <param name="numActions">The number of actions to submit.</param>
            <param name="action">
            The action to invoke on each stream to submit work.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.ConcurrentStreamProcessor.Dispose(System.Boolean)">
            <summary>
            Frees all internal streams.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.IGridStrideLoopBody">
            <summary>
            Represents a grid-stride-loop body.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IGridStrideLoopBody.Execute(ILGPU.Index1D)">
            <summary>
            Executes this loop body using the given index.
            </summary>
            <param name="linearIndex">The current global element index.</param>
        </member>
        <member name="T:ILGPU.Algorithms.IGridStrideLoopBody`1">
            <summary>
            Represents a functional grid-stride-loop body.
            </summary>
            <typeparam name="T">
            The type of the intermediate values inside the loop.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.IGridStrideLoopBody`1.Execute(ILGPU.Index1D,`0)">
            <summary>
            Executes this loop body using the given index.
            </summary>
            <param name="linearIndex">The current global element index.</param>
            <param name="input">The intermediate input value.</param>
            <returns>The resulting intermediate value for the next iteration.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.IGridStrideKernelBody">
            <summary>
            Represents a grid-stride-loop kernel body.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IGridStrideKernelBody.Execute(ILGPU.LongIndex1D)">
            <summary>
            Executes this loop body using the given index.
            </summary>
            <param name="linearIndex">The current global element index.</param>
            <remarks>
            Note that the original number of data elements will be padded to be a
            multiple of the warp size. Hence, the linear index can become larger than
            the original number of elements. Bounds checks to underlying array views
            have to be managed by the user.
            </remarks>
        </member>
        <member name="M:ILGPU.Algorithms.IGridStrideKernelBody.Finish">
            <summary>
            Finishes the processing loop.
            </summary>
            <remarks>
            Note that this method will be invoked for each thread once in each group.
            </remarks>
        </member>
        <member name="T:ILGPU.Algorithms.GridExtensions">
            <summary>
            Contains extensions for thread grids
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.GridExtensions.GridStrideLoopStride">
            <summary>
            Returns the loop stride for a grid-stride loop.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.GridStrideLoop``1(ILGPU.Index1D,``0@)">
            <summary>
            Performs a grid-stride loop.
            </summary>
            <typeparam name="TLoopBody">The type of the loop body.</typeparam>
            <param name="length">The global length.</param>
            <param name="loopBody">The loop body.</param>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.GridStrideLoop``2(ILGPU.Index1D,``0,``1)">
            <summary>
            Performs a functional grid-stride loop.
            </summary>
            <typeparam name="T">The element type of the intermediate values.</typeparam>
            <typeparam name="TLoopBody">The type of the loop body.</typeparam>
            <param name="length">The global length.</param>
            <param name="input">The initial input value.</param>
            <param name="loopBody">The loop body.</param>
            <returns>The last intermediate value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.ComputeGridStrideLoopExtent(ILGPU.Runtime.Accelerator,System.Int64)">
            <summary>
            Returns a kernel extent (a grouped index) with the maximum number of groups
            using the maximum number of threads per group to launch common grid-stride
            loop kernels.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="numDataElements">
            The number of parallel data elements to process.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.ComputeGridStrideLoopExtent(ILGPU.Runtime.Accelerator,System.Int32)">
            <summary>
            Returns a kernel extent (a grouped index) with the maximum number of groups
            using the maximum number of threads per group to launch common grid-stride
            loop kernels.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="numDataElements">
            The number of parallel data elements to process.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.ComputeGridStrideLoopExtent(ILGPU.Runtime.Accelerator,ILGPU.Index1D,System.Int32@)">
            <summary>
            Returns a kernel extent (a grouped index) with the maximum number of groups
            using the maximum number of threads per group to launch common grid-stride
            loop kernels.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="numDataElements">
            The number of parallel data elements to process.
            </param>
            <param name="numIterationsPerGroup">
            The number of loop iterations per group.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.GridStrideLoopKernel``1(ILGPU.LongIndex1D,``0)">
            <summary>
            Represents a full grid-stride loop kernel implementation.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
            <param name="paddedNumDataElements">The padded number of elements.</param>
            <param name="body">The body instance.</param>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.GetGridStrideKernelConfig(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D,ILGPU.LongIndex1D@)">
            <summary>
            Determines a grid-stride kernel configuration.
            </summary>
            <param name="accelerator">The accelerator instance.</param>
            <param name="numDataElements">The number of data elements.</param>
            <param name="paddedNumElements">The padded number of elements.</param>
            <returns>The kernel configuration.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.LoadGridStrideKernel``1(ILGPU.Runtime.Accelerator)">
            <summary>
            Loads a grid-stride kernel.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
            <param name="accelerator">The accelerator instance.</param>
            <returns>The loaded grid-stride kernel.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.LaunchGridStride``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D,``0@)">
            <summary>
            Launches a grid-stride kernel.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
            <param name="accelerator">The accelerator instance.</param>
            <param name="numDataElements">The number of data elements.</param>
            <param name="body">The body instance.</param>
        </member>
        <member name="M:ILGPU.Algorithms.GridExtensions.LaunchGridStride``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.LongIndex1D,``0@)">
            <summary>
            Launches a grid-stride kernel.
            </summary>
            <typeparam name="TBody">The body type.</typeparam>
            <param name="accelerator">The accelerator instance.</param>
            <param name="stream">The current stream.</param>
            <param name="numDataElements">The number of data elements.</param>
            <param name="body">The body instance.</param>
        </member>
        <member name="T:ILGPU.Algorithms.GroupExtensions">
            <summary>
            Contains extension methods for thread groups.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.Reduce``2(``0)">
            <summary>
            Implements a block-wide reduction algorithm.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <returns>All lanes in the first warp contain the reduced value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.AllReduce``2(``0)">
            <summary>
            Implements a block-wide reduction algorithm.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <returns>All threads in the whole group contain the reduced value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScan``2(``0)">
            <summary>
            Performs a group-wide exclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.InclusiveScan``2(``0)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary>
            Performs a group-wide exclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The scan boundaries.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The scan boundaries.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScanNextIteration``2(``0,``0,``0)">
            <summary>
            Prepares for the next iteration of a group-wide exclusive scan within the
            same kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="leftBoundary">The left boundary value.</param>
            <param name="rightBoundary">The right boundary value.</param>
            <param name="currentValue">The current value.</param>
            <returns>The starting value for the next iteration.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.InclusiveScanNextIteration``2(``0,``0,``0)">
            <summary>
            Prepares for the next iteration of a group-wide inclusive scan within the
            same kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="leftBoundary">The left boundary value.</param>
            <param name="rightBoundary">The right boundary value.</param>
            <param name="currentValue">The current value.</param>
            <returns>The starting value for the next iteration.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.GroupExtensions.IGroupScan`2">
            <summary>
            Represents an abstract wrapper for scan operations.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0)">
            <summary>
            Performs a group-wide scan.
            </summary>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)">
            <summary>
            Performs a group-wide scan.
            </summary>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The scan boundaries.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.GroupExtensions.InclusiveGroupScan`2">
            <summary>
            Represents a wrapper for an inclusive-scan operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.InclusiveGroupScan`2.Scan(`0)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.InclusiveGroupScan`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The scan boundaries.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.GroupExtensions.ExclusiveGroupScan`2">
            <summary>
            Represents a wrapper for an exclusive-scan operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.ExclusiveGroupScan`2.Scan(`0)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.GroupExtensions.ExclusiveGroupScan`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The scan boundaries.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Histogram`3">
            <summary>
            Represents a histogram operation on the given view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view stride.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramUnchecked`3">
            <summary>
            Represents a histogram operation on the given view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view stride.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions">
            <summary>
            Contains extension methods for histogram operations.
            </summary>
            <summary>
            Contains extension methods for histogram operations.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.HistogramDelegate`5">
            <summary>
            The delegate for the computing the histogram.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view stride.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="config">The kernel configuration to use.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
            <param name="paddedLength">The padded length of the input view.</param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.HistogramUncheckedDelegate`5">
            <summary>
            The delegate for the computing the histogram.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view stride.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="config">The kernel configuration to use.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="paddedLength">The padded length of the input view.</param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.HistogramKernel``5(ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{``2},ILGPU.ArrayView{System.Int32},System.Int32)">
            <summary>
            The actual histogram kernel implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The input view stride.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates 4 the histogram has overflowed.
            </param>
            <param name="paddedLength">The padded length of the input view.</param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.HistogramUncheckedKernel``5(ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{``2},System.Int32)">
            <summary>
            The actual histogram kernel implementation (without overflow checking).
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The input view stride.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="paddedLength">The padded length of the input view.</param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.CreateHistogram``5(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a kernel to calculate the histogram on a supplied view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view stride.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created histogram handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.CreateHistogramUnchecked``5(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a kernel to calculate the histogram on a supplied view
            (without overflow checking).
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view stride.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created histogram handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``5(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{``2},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram on the given view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view stride.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.HistogramUnchecked``5(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{``2})">
            <summary>
            Calculates the histogram on the given view (without overflow checking).
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view stride.</typeparam>
            <typeparam name="TBinType">The histogram bin type.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{System.Int32},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (int) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterInt32`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type int.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{System.Int64},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (long) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterInt64`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type long.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{System.UInt32},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (uint) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterUInt32`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type uint.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{System.UInt64},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (ulong) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterUInt64`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type ulong.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (float) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterFloat`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type float.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramExtensions.Histogram``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Int32})">
            <summary>
            Calculates the histogram (double) on the given 1D view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TStride">The input view element type.</typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The input view.</param>
            <param name="histogram">The histogram view to update.</param>
            <param name="histogramOverflow">
            Single-element view that indicates whether the histogram has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramExtensions.ComputeSingleBinAdapterDouble`2">
            <summary>
            Adapter to convert single-bin operation into a multi-bin operation for
            histograms of type double.
            </summary>
            <typeparam name="T">
            The underlying type of the histogram operation.
            </typeparam>
            <typeparam name="TLocator">
            The operation to compute the bin location.
            </typeparam>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.IComparisonOperation`1">
            <summary>
            Implements a comparison operation.
            </summary>
            <typeparam name="T">The underlying type of the comparison operation</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.IComparisonOperation`1.Compare(`0,`0)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonInt8">
            <summary>
            Represents an comparison between two elements of type sbyte.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonInt8.Compare(System.SByte,System.SByte)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonInt16">
            <summary>
            Represents an comparison between two elements of type short.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonInt16.Compare(System.Int16,System.Int16)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonInt32">
            <summary>
            Represents an comparison between two elements of type int.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonInt32.Compare(System.Int32,System.Int32)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonInt64">
            <summary>
            Represents an comparison between two elements of type long.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonInt64.Compare(System.Int64,System.Int64)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonUInt8">
            <summary>
            Represents an comparison between two elements of type byte.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonUInt8.Compare(System.Byte,System.Byte)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonUInt16">
            <summary>
            Represents an comparison between two elements of type ushort.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonUInt16.Compare(System.UInt16,System.UInt16)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonUInt32">
            <summary>
            Represents an comparison between two elements of type uint.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonUInt32.Compare(System.UInt32,System.UInt32)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonUInt64">
            <summary>
            Represents an comparison between two elements of type ulong.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonUInt64.Compare(System.UInt64,System.UInt64)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonHalf">
            <summary>
            Represents an comparison between two elements of type Half.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonHalf.Compare(ILGPU.Half,ILGPU.Half)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonFloat">
            <summary>
            Represents an comparison between two elements of type float.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonFloat.Compare(System.Single,System.Single)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.ComparisonOperations.ComparisonDouble">
            <summary>
            Represents an comparison between two elements of type double.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ComparisonOperations.ComparisonDouble.Compare(System.Double,System.Double)">
            <summary>
            Compares two elements.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>
            Less than zero, if first is less than second.
            Zero, if first is equal to second.
            Greater than zero, if first is greater than second.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.IComputeSingleBinOperation`2">
            <summary>
            Computes the histogram bin for a single input value.
            </summary>
            <typeparam name="T">The underlying type of the histogram operation.</typeparam>
            <typeparam name="TIndex">The index type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.IComputeSingleBinOperation`2.ComputeHistogramBin(`0,`1)">
            <summary>
            Calculates the histogram bin location for the given value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="numBins">The total  number of bins.</param>
            <returns>The bin location</returns>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.IComputeMultiBinOperation`3">
            <summary>
            Computes and updates multiple histogram bins for a single input value.
            </summary>
            <typeparam name="T">The underlying type of the histogram operation.</typeparam>
            <typeparam name="TBinType">The underlying type of the histogram bins.</typeparam>
            <typeparam name="TIncrementor">
            The operation to increment the value of the bin.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.IComputeMultiBinOperation`3.ComputeHistogramBins(`0,ILGPU.ArrayView{`1},`2@,System.Boolean@)">
            <summary>
            Calculates and updates multiple histogram bin locations for the given value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="histogram">The histogram to update.</param>
            <param name="incrementOperation">
            The operation used to increment the histogram.
            </param>
            <param name="incrementOverflow">
            Indicates when the increment has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.IIncrementOperation`1">
            <summary>
            Increments the value in a histogram bin.
            </summary>
            <typeparam name="TBinType">The underlying type of the histogram bin.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.IIncrementOperation`1.Increment(`0@,System.Boolean@)">
            <summary>
            Increments the histogram bin.
            </summary>
            <param name="target">The bin value to update.</param>
            <param name="incrementOverflow">
            Indicates when the increment has overflowed.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementInt32">
            <summary>
            Represents atomically incrementing a histogram bin of type int.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementInt32.Increment(System.Int32@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type int.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementInt64">
            <summary>
            Represents atomically incrementing a histogram bin of type long.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementInt64.Increment(System.Int64@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type long.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementUInt32">
            <summary>
            Represents atomically incrementing a histogram bin of type uint.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementUInt32.Increment(System.UInt32@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type uint.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementUInt64">
            <summary>
            Represents atomically incrementing a histogram bin of type ulong.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementUInt64.Increment(System.UInt64@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type ulong.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementFloat">
            <summary>
            Represents atomically incrementing a histogram bin of type float.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementFloat.Increment(System.Single@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type float.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.HistogramOperations.HistogramIncrementDouble">
            <summary>
            Represents atomically incrementing a histogram bin of type double.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.HistogramOperations.HistogramIncrementDouble.Increment(System.Double@,System.Boolean@)">
            <summary>
            Atomically increments a histogram bin of type double.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.IL.ILContext">
            <summary>
            Manages custom IL-specific intrinsics.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.IL.ILContext.ILIntrinsic">
            <summary>
            A wrapper implementation for IL intrinsics.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILContext.ILIntrinsic.CanHandleBackend(ILGPU.Backends.Backend)">
            <summary cref="M:ILGPU.IR.Intrinsics.IntrinsicImplementation.CanHandleBackend(ILGPU.Backends.Backend)"/>
        </member>
        <member name="F:ILGPU.Algorithms.IL.ILContext.CPUGroupExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.IL.ILGroupExtensions"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.IL.ILContext.CPUWarpExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.IL.ILWarpExtensions"/> type.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILContext.RegisterIntrinsicMapping(ILGPU.IR.Intrinsics.IntrinsicImplementationManager,System.Type,System.Type,System.String)">
            <summary>
            Registers an intrinsic mapping.
            </summary>
            <param name="manager">The current manager.</param>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <param name="name">The method name to register.</param>
        </member>
        <member name="T:ILGPU.Algorithms.IL.ILGroupExtensions">
            <summary>
            Custom IL-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.Reduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.Reduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.AllReduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.AllReduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.ExclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.InclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.InclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.InclusiveScanImplementation``2(``0)">
            <summary>
            Performs a group-wide inclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.ExclusiveScanNextIteration``2(``0,``0,``0)">
            <summary>
            Prepares for the next iteration of a group-wide exclusive scan within the
            same kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="leftBoundary">The left boundary value.</param>
            <param name="rightBoundary">The right boundary value.</param>
            <param name="currentValue">The current value.</param>
            <returns>The starting value for the next iteration.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILGroupExtensions.InclusiveScanNextIteration``2(``0,``0,``0)">
            <summary>
            Prepares for the next iteration of a group-wide inclusive scan within the
            same kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="leftBoundary">The left boundary value.</param>
            <param name="rightBoundary">The right boundary value.</param>
            <param name="currentValue">The current value.</param>
            <returns>The starting value for the next iteration.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.IL.ILWarpExtensions">
            <summary>
            Custom IL-specific implementations that fall back to PTX-specific implementations
            as the CPU runtime is fully compatible with the PTX runtime.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILWarpExtensions.Reduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.Reduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILWarpExtensions.AllReduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.AllReduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILWarpExtensions.ExclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.ExclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.IL.ILWarpExtensions.InclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.InclusiveScan``2(``0)"/>
        </member>
        <member name="T:ILGPU.Algorithms.Initializer`2">
            <summary>
            Performs an initialization on the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the target view.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The element view.</param>
            <param name="value">The target value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.InitializeExtensions">
            <summary>
            Initialize functionality for accelerators.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.InitializeExtensions.InitializerImplementation`2">
            <summary>
            A actual raw initializer implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the target view.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.InitializerImplementation`2.#ctor(ILGPU.Runtime.ArrayView1D{`0,`1},`0)">
            <summary>
            Creates a new initializer implementation.
            </summary>
            <param name="view">The parent target view.</param>
            <param name="value">The initializer value.</param>
        </member>
        <member name="P:ILGPU.Algorithms.InitializeExtensions.InitializerImplementation`2.View">
            <summary>
            Returns the target view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.InitializeExtensions.InitializerImplementation`2.Value">
            <summary>
            Returns the initializer value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.InitializerImplementation`2.Execute(ILGPU.LongIndex1D)">
            <summary>
            Executes this sequencer wrapper.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.InitializerImplementation`2.Finish">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.CreateRawInitializer``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a raw initializer that is defined by the given element type.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the target view.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded initializer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.CreateInitializer``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates an initializer that is defined by the given element type.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the target view.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.Initialize``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},``0)">
            <summary>
            Performs an initialization on the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The element view.</param>
            <param name="value">The target value.</param>
        </member>
        <member name="M:ILGPU.Algorithms.InitializeExtensions.Initialize``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},``0)">
            <summary>
            Performs an initialization on the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the target view.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The element view.</param>
            <param name="value">The target value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.IRadixSortOperation`1">
            <summary>
            Implements a radix sort operation.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.IRadixSortOperation`1.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.IRadixSortOperation`1.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.IRadixSortOperation`1.ExtractRadixBits(`0,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingInt8">
            <summary>
            Represents an ascending radix sort operation of type sbyte.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt8.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt8.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingInt8.ExtractRadixBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingInt8">
            <summary>
            Represents a descending radix sort operation of type sbyte.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt8.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt8.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingInt8.ExtractRadixBits(System.SByte,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingInt16">
            <summary>
            Represents an ascending radix sort operation of type short.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt16.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt16.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingInt16.ExtractRadixBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingInt16">
            <summary>
            Represents a descending radix sort operation of type short.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt16.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt16.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingInt16.ExtractRadixBits(System.Int16,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingInt32">
            <summary>
            Represents an ascending radix sort operation of type int.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt32.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt32.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingInt32.ExtractRadixBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingInt32">
            <summary>
            Represents a descending radix sort operation of type int.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt32.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt32.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingInt32.ExtractRadixBits(System.Int32,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingInt64">
            <summary>
            Represents an ascending radix sort operation of type long.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt64.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingInt64.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingInt64.ExtractRadixBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingInt64">
            <summary>
            Represents a descending radix sort operation of type long.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt64.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingInt64.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingInt64.ExtractRadixBits(System.Int64,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingUInt8">
            <summary>
            Represents an ascending radix sort operation of type byte.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt8.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt8.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingUInt8.ExtractRadixBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingUInt8">
            <summary>
            Represents a descending radix sort operation of type byte.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt8.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt8.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingUInt8.ExtractRadixBits(System.Byte,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingUInt16">
            <summary>
            Represents an ascending radix sort operation of type ushort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt16.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt16.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingUInt16.ExtractRadixBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingUInt16">
            <summary>
            Represents a descending radix sort operation of type ushort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt16.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt16.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingUInt16.ExtractRadixBits(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingUInt32">
            <summary>
            Represents an ascending radix sort operation of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt32.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt32.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingUInt32.ExtractRadixBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingUInt32">
            <summary>
            Represents a descending radix sort operation of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt32.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt32.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingUInt32.ExtractRadixBits(System.UInt32,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingUInt64">
            <summary>
            Represents an ascending radix sort operation of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt64.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingUInt64.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingUInt64.ExtractRadixBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingUInt64">
            <summary>
            Represents a descending radix sort operation of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt64.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingUInt64.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingUInt64.ExtractRadixBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingHalf">
            <summary>
            Represents an ascending radix sort operation of type Half.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingHalf.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingHalf.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingHalf.ExtractRadixBits(ILGPU.Half,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingHalf">
            <summary>
            Represents a descending radix sort operation of type Half.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingHalf.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingHalf.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingHalf.ExtractRadixBits(ILGPU.Half,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingFloat">
            <summary>
            Represents an ascending radix sort operation of type float.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingFloat.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingFloat.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingFloat.ExtractRadixBits(System.Single,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingFloat">
            <summary>
            Represents a descending radix sort operation of type float.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingFloat.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingFloat.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingFloat.ExtractRadixBits(System.Single,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.AscendingDouble">
            <summary>
            Represents an ascending radix sort operation of type double.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingDouble.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.AscendingDouble.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.AscendingDouble.ExtractRadixBits(System.Double,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortOperations.DescendingDouble">
            <summary>
            Represents a descending radix sort operation of type double.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingDouble.NumBits">
            <summary>
            Returns the number of bits to sort.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortOperations.DescendingDouble.DefaultValue">
            <summary>
            The default element value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortOperations.DescendingDouble.ExtractRadixBits(System.Double,System.Int32,System.Int32)">
            <summary>
            Converts the given value to a radix-sort compatible value.
            </summary>
            <param name="value">The value to map.</param>
            <param name="shift">The shift amount in bits.</param>
            <param name="bitMask">The lower bit mask bit use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.IScanReduceOperation`1">
            <summary>
            Implements a scan or a reduction operation.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.IScanReduceOperation`1.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.IScanReduceOperation`1.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.IScanReduceOperation`1.Apply(`0,`0)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.IScanReduceOperation`1.AtomicApply(`0@,`0)">
            <summary>
            Performs an atomic operation of the form target =
            AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries`1">
            <summary>
            Holds the left and the right boundary of a scan operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries`1.#ctor(`0,`0)">
            <summary>
            Constructs a new scan-boundaries instance.
            </summary>
            <param name="leftBoundary">The left boundary.</param>
            <param name="rightBoundary">The right boundary.</param>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries`1.LeftBoundary">
            <summary>
            The left boundary.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries`1.RightBoundary">
            <summary>
            The right boundary.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries`1.ToString">
            <summary>
            Returns the string representation of these boundary values.
            </summary>
            <returns>The string representation of these boundary values.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddInt32">
            <summary>
            Represents an Add reduction of type int.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddInt32.Apply(System.Int32,System.Int32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddInt32.AtomicApply(System.Int32@,System.Int32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxInt32">
            <summary>
            Represents an Max reduction of type int.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxInt32.Apply(System.Int32,System.Int32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxInt32.AtomicApply(System.Int32@,System.Int32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinInt32">
            <summary>
            Represents an Min reduction of type int.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinInt32.Apply(System.Int32,System.Int32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinInt32.AtomicApply(System.Int32@,System.Int32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddInt64">
            <summary>
            Represents an Add reduction of type long.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddInt64.Apply(System.Int64,System.Int64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddInt64.AtomicApply(System.Int64@,System.Int64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxInt64">
            <summary>
            Represents an Max reduction of type long.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxInt64.Apply(System.Int64,System.Int64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxInt64.AtomicApply(System.Int64@,System.Int64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinInt64">
            <summary>
            Represents an Min reduction of type long.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinInt64.Apply(System.Int64,System.Int64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinInt64.AtomicApply(System.Int64@,System.Int64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddUInt32">
            <summary>
            Represents an Add reduction of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddUInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddUInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddUInt32.Apply(System.UInt32,System.UInt32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddUInt32.AtomicApply(System.UInt32@,System.UInt32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxUInt32">
            <summary>
            Represents an Max reduction of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxUInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxUInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxUInt32.Apply(System.UInt32,System.UInt32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxUInt32.AtomicApply(System.UInt32@,System.UInt32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinUInt32">
            <summary>
            Represents an Min reduction of type uint.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinUInt32.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinUInt32.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinUInt32.Apply(System.UInt32,System.UInt32)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinUInt32.AtomicApply(System.UInt32@,System.UInt32)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddUInt64">
            <summary>
            Represents an Add reduction of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddUInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddUInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddUInt64.Apply(System.UInt64,System.UInt64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddUInt64.AtomicApply(System.UInt64@,System.UInt64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxUInt64">
            <summary>
            Represents an Max reduction of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxUInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxUInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxUInt64.Apply(System.UInt64,System.UInt64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxUInt64.AtomicApply(System.UInt64@,System.UInt64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinUInt64">
            <summary>
            Represents an Min reduction of type ulong.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinUInt64.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinUInt64.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinUInt64.Apply(System.UInt64,System.UInt64)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinUInt64.AtomicApply(System.UInt64@,System.UInt64)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddFloat">
            <summary>
            Represents an Add reduction of type float.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddFloat.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddFloat.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddFloat.Apply(System.Single,System.Single)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddFloat.AtomicApply(System.Single@,System.Single)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxFloat">
            <summary>
            Represents an Max reduction of type float.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxFloat.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxFloat.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxFloat.Apply(System.Single,System.Single)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxFloat.AtomicApply(System.Single@,System.Single)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinFloat">
            <summary>
            Represents an Min reduction of type float.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinFloat.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinFloat.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinFloat.Apply(System.Single,System.Single)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinFloat.AtomicApply(System.Single@,System.Single)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.AddDouble">
            <summary>
            Represents an Add reduction of type double.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddDouble.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.AddDouble.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddDouble.Apply(System.Double,System.Double)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.AddDouble.AtomicApply(System.Double@,System.Double)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MaxDouble">
            <summary>
            Represents an Max reduction of type double.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxDouble.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MaxDouble.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxDouble.Apply(System.Double,System.Double)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MaxDouble.AtomicApply(System.Double@,System.Double)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanReduceOperations.MinDouble">
            <summary>
            Represents an Min reduction of type double.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinDouble.CLCommand">
            <summary>
            Returns the associated OpenCL command suffix for the internal code generator
            to build the final OpenCL command to use.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ScanReduceOperations.MinDouble.Identity">
            <summary>
            Returns the identity value (the neutral element of the operation), such that
            Apply(Apply(Identity, left), right) == Apply(left, right).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinDouble.Apply(System.Double,System.Double)">
            <summary>
            Applies the current operation.
            </summary>
            <param name="first">The first operand.</param>
            <param name="second">The second operand.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanReduceOperations.MinDouble.AtomicApply(System.Double@,System.Double)">
            <summary>
            Performs an atomic operation of the form target = AtomicUpdate(target.Value, value).
            </summary>
            <param name="target">The target address to update.</param>
            <param name="value">The value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.MaskedMatrixProcessor`4">
            <summary>
            A processor for masked matrices to efficiently operate on multiple matrix
            instances in parallel to maximize occupancy.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.MatrixOperations.MaskedMatrixProcessor`4.matrixMultiplier">
            <summary>
            The internal masked matrix multiplier which contains pre-compiled kernels.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.MaskedMatrixProcessor`4.#ctor(ILGPU.Runtime.Accelerator,System.Int32,System.Func{ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream})">
            <summary>
            Constructs a new masked processor.
            </summary>
            <param name="accelerator">The parent accelerator.</param>
            <param name="maxNumConcurrentStreams">
            The maximum number of concurrent streams to use (if any).
            </param>
            <param name="streamProvider">
            A custom stream provider function to construct specialized streams.
            </param>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.MaskedMatrixProcessor`4.Predicate">
            <summary>
            Returns the current predicate to use (if any).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.MaskedMatrixProcessor`4.MultiplyTransposed(ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView2D{`0,`2},ILGPU.Algorithms.MatrixOperations.SparseMatrixView{`0,`2},ILGPU.Runtime.ArrayView2D{`0,`2})">
            <summary>
            Multiplies the given matrices using the currently assigned predicate while
            transposing the matrix given by <paramref name="bView"/>.
            </summary>
            <param name="stream">The current accelerator stream to use.</param>
            <param name="aView">The dense input matrix a of shape MxK.</param>
            <param name="bView">The sparse matrix b of shape NxK (will transpose).</param>
            <param name="outView">A dense output matrix of shape of MxN.</param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.MaskedMatrixProcessor`4.MultiplyBatchedTransposed(ILGPU.Runtime.AcceleratorStream,System.Collections.Generic.IReadOnlyList{ILGPU.Runtime.ArrayView2D{`0,`2}},System.Collections.Generic.IReadOnlyList{ILGPU.Algorithms.MatrixOperations.SparseMatrixView{`0,`2}},System.Collections.Generic.IReadOnlyList{ILGPU.Runtime.ArrayView2D{`0,`2}})">
            <summary>
            Multiplies the given matrices using the currently assigned predicate while
            transposing the matrices given by <paramref name="bViews"/>.
            </summary>
            <param name="stream">The current accelerator stream to use.</param>
            <param name="aViews">The dense input matrices a of shape MxK.</param>
            <param name="bViews">
            The sparse matrices b of shape NxK (will transpose).
            </param>
            <param name="outViews">Dense output matrices of shape of MxN.</param>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.MaskPredicate`2">
            <summary>
            An internal predicate used to represent a masked array.
            </summary>
            <typeparam name="T">The mask element type.</typeparam>
            <typeparam name="TStride">The 2D stride.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.MaskPredicate`2.#ctor(ILGPU.Runtime.ArrayView2D{`0,`1},`0)">
            <summary>
            Creates a new mask predicate.
            </summary>
            <param name="maskView">The mask view to use.</param>
            <param name="emptyValueConstant">
            The masking constant to compare each element to.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.MaskPredicate`2.Apply(ILGPU.Index2D)">
            <summary>
            Returns true if the current mask element is not equal to the empty mask
            value.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.FloatEpsPredicate`1">
            <summary>
            An internal predicate based on float values.
            </summary>
            <typeparam name="TStride">The 2D stride.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.FloatEpsPredicate`1.#ctor(ILGPU.Runtime.ArrayView2D{System.Single,`0},System.Single)">
            <summary>
            Creates a new float masking predicate.
            </summary>
            <param name="valueView">The input value view.</param>
            <param name="epsConstant">
            The eps constant to compare each element to.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.FloatEpsPredicate`1.Apply(ILGPU.Index2D)">
            <summary>
            Returns true if the absolute value of the stored mask element is greater
            than the epsilon constant.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.DoubleEpsPredicate`1">
            <summary>
            An internal predicate based on double values.
            </summary>
            <typeparam name="TStride">The 2D stride.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.DoubleEpsPredicate`1.#ctor(ILGPU.Runtime.ArrayView2D{System.Double,`0},System.Double)">
            <summary>
            Creates a new float masking predicate.
            </summary>
            <param name="valueView">The input value view.</param>
            <param name="epsConstant">
            The eps constant to compare each element to.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.DoubleEpsPredicate`1.Apply(ILGPU.Index2D)">
            <summary>
            Returns true if the absolute value of the stored mask element is greater
            than the epsilon constant.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.IMaskedSparseMatrixProcessor`1">
            <summary>
            An abstract context-specific mul-add operation for sparse matrix multiplications.
            </summary>
            <typeparam name="T">The value type to operate on.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.IMaskedSparseMatrixProcessor`1.MultiplyAdd(`0,`0,`0)">
            <summary>
            Performs a specialized sparse-matrix mul-add operation.
            </summary>
            <param name="summed">The currently summed value.</param>
            <param name="left">The left operand to multiply.</param>
            <param name="right">The right operand to multiply.</param>
            <returns>The summed and multiplied result.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.FloatMaskedSparseMatrixProcessor">
            <summary>
            A float-specific masked sparse matrix processor for matrix multiplications.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.FloatMaskedSparseMatrixProcessor.MultiplyAdd(System.Single,System.Single,System.Single)">
            <summary>
            Performs a fma operation on floats.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.DoubleMaskedSparseMatrixProcessor">
            <summary>
            A double-specific masked sparse matrix processor for matrix multiplications.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.DoubleMaskedSparseMatrixProcessor.MultiplyAdd(System.Double,System.Double,System.Double)">
            <summary>
            Performs a fma operation on doubles.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.MaskedSparseMatrixMultiplier`3">
            <summary>
            A specialized accelerator-centric masked sparse matrix multiplier.
            </summary>
            <typeparam name="T">The abstract matrix value type.</typeparam>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <typeparam name="TStride">The matrix stride.</typeparam>
            <param name="stream">The current accelerator stream.</param>
            <param name="maskPredicate">
            The input masking predicate (targeting a dense matrix of shape MxK).
            </param>
            <param name="aView">A dense input matrix of shape MxK.</param>
            <param name="bView">A sparse matrix B of shape NxK (will transpose).</param>
            <param name="outView">
            A dense output view containing the results of the multiplication.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.MaskedSparseMatrixExtensions">
            <summary>
            Specialized extensions to operate on sparse matrices while taking predicates
            into account to skip specific elements.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.MaskedSparseMatrixExtensions.MaskedSparseTransposedMatrixMultiplierKernel``4(``1,ILGPU.Runtime.ArrayView2D{``0,``2},ILGPU.Algorithms.MatrixOperations.SparseMatrixView{``0,``2},ILGPU.Runtime.ArrayView2D{``0,``2},``3)">
            <summary>
            The matrix multiplication kernel that runs on the accelerated device while
            using thread compaction to free masked warps.
            </summary>
            <param name="maskPredicate">
            The input masking predicate (targeting a dense matrix of shape MxK).
            </param>
            <param name="aView">A dense input matrix of shape MxK.</param>
            <param name="bView">A sparse matrix B of shape NxK (will transpose).</param>
            <param name="outView">
            A dense output view containing the results of the multiplication.
            </param>
            <param name="processor">An instance of an actual mul-add operation.</param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.MaskedSparseMatrixExtensions.CreateSparseTransposedMatrixMultiplierMasked``4(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a specialized sparse matrix multiplier.
            </summary>
            <typeparam name="T">The abstract matrix value type.</typeparam>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <typeparam name="TStride">The matrix stride.</typeparam>
            <typeparam name="TProcessor">The processor type to operate on T.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <returns>A new sparse matrix multiplier.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.MaskedSparseMatrixExtensions.MultiplySparseTransposedMatrixMasked``4(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,``1,ILGPU.Runtime.ArrayView2D{``0,``2},ILGPU.Algorithms.MatrixOperations.SparseMatrixView{``0,``2},ILGPU.Runtime.ArrayView2D{``0,``2})">
            <summary>
            Multiplies a masked sparse matrix based on arbitrary types.
            </summary>
            <typeparam name="T">The abstract matrix value type.</typeparam>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <typeparam name="TStride">The matrix stride.</typeparam>
            <typeparam name="TProcessor">The processor type to operate on T.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="stream">The current accelerator stream.</param>
            <param name="maskPredicate">The mask predicate input.</param>
            <param name="aView">The dense input matrix a of shape MxK.</param>
            <param name="bView">The sparse matrix b of shape NxK.</param>
            <param name="outView">A dense output matrix of shape of aView.</param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.MaskedSparseMatrixExtensions.MultiplySparseTransposedMatrixMasked``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,``0,ILGPU.Runtime.ArrayView2D{System.Single,``1},ILGPU.Algorithms.MatrixOperations.SparseMatrixView{System.Single,``1},ILGPU.Runtime.ArrayView2D{System.Single,``1})">
            <summary>
            Multiplies a masked sparse matrix based on floats.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <typeparam name="TStride">The matrix stride.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="stream">The current accelerator stream.</param>
            <param name="maskPredicate">The mask predicate input.</param>
            <param name="aView">The dense input matrix a of shape MxK.</param>
            <param name="bView">The sparse matrix b of shape NxK.</param>
            <param name="outView">A dense output matrix of shape of aView.</param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.MaskedSparseMatrixExtensions.MultiplySparseTransposedMatrixMasked``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,``0,ILGPU.Runtime.ArrayView2D{System.Double,``1},ILGPU.Algorithms.MatrixOperations.SparseMatrixView{System.Double,``1},ILGPU.Runtime.ArrayView2D{System.Double,``1})">
            <summary>
            Multiplies a masked sparse matrix based on doubles.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <typeparam name="TStride">The matrix stride.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="stream">The current accelerator stream.</param>
            <param name="maskPredicate">The mask predicate input.</param>
            <param name="aView">The dense input matrix a of shape MxK.</param>
            <param name="bView">The sparse matrix b of shape NxK.</param>
            <param name="outView">A dense output matrix of shape of aView.</param>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.ISparseMatrixShapeInfoTarget">
            <summary>
            A generic target to compute sparse matrix information.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.ISparseMatrixShapeInfoTarget.OutputNumNeighbors(System.Int32,System.Int32)">
            <summary>
            Outputs the given number of row entries for the specified row.
            </summary>
            <param name="rowIndex">The absolute row index.</param>
            <param name="numRowEntries">The number of row entries.</param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.ISparseMatrixShapeInfoTarget.ComputeAtomicMaxNumNeighbors(System.Int32)">
            <summary>
            Atomically computes the maximum of all local num neighbors.
            </summary>
            <param name="maxNumLocalNeighbors">
            The locally determined max number of neighbors.
            </param>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeInfoProvider`2">
            <summary>
            A provider for matrix shape information accepting a generic target info receiver.
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <typeparam name="TTarget">The target type.</typeparam>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeInfoProvider`1">
            <summary>
            A provider for matrix shape information accepting a predicate and a number of
            neighbors per row view (needs to pre-allocated).
            </summary>
            <typeparam name="TPredicate">The predicate type.</typeparam>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeConverter`3">
            <summary>
            A sparse matrix shape converter that translates dense matrices into sparse shapes.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <typeparam name="TStride">The matrix stride.</typeparam>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.SparseMatrixConverter`2">
            <summary>
            A sparse matrix converter that translates a sparse shape view and a dense matrix
            into its sparse view representation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The matrix stride.</typeparam>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions">
            <summary>
            Sparse matrix extensions to convert dense matrices into sparse versions.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.SparseMatrixShapeInfoKernel``2(ILGPU.LongIndex2D,``0,``1)">
            <summary>
            An explicitly grouped kernel to compute direct neighbor information and the
            maximum number of non-zero entries per row.
            </summary>
            <typeparam name="TPredicate">
            The predicate type used to sparsify a dense input matrix.
            </typeparam>
            <typeparam name="TTarget">The sparsity output type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.SparseMatrixShapeConverterKernel``3(ILGPU.Index1D,ILGPU.Runtime.ArrayView2D{``0,``2},``1,ILGPU.Runtime.ArrayView2D{System.Int32,``2})">
            <summary>
            A generic sparse matrix converter kernel to convert a given dense input matrix
            into its sparse shape representation.
            </summary>
            <typeparam name="T">The value type to operate on.</typeparam>
            <typeparam name="TPredicate">The predicate type.</typeparam>
            <typeparam name="TStride">The element striding of the matrices.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.SparseMatrixConverterKernel``2(ILGPU.Index1D,ILGPU.Runtime.ArrayView2D{``0,``1},ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeView{``1},ILGPU.Runtime.ArrayView2D{``0,``1})">
            <summary>
            A generic sparse matrix converter kernel to convert a given dense input matrix
            into its sparse data representation.
            </summary>
            <typeparam name="T">The value type to operate on.</typeparam>
            <typeparam name="TStride">The element striding of the matrices.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.CreateSparseMatrixInfoProvider``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new sparse matrix shape info provider.
            </summary>
            <typeparam name="TPredicate">
            The predicate used to sparsify the input matrix.
            </typeparam>
            <typeparam name="TTarget">The target view type.</typeparam>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.SparseViewTarget">
            <summary>
            A specific sparse view target.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.SparseViewTarget.#ctor(ILGPU.ArrayView{System.Int32},ILGPU.VariableView{System.Int32})">
            <summary>
            Constructs a new sparse view target.
            </summary>
            <param name="numNeighborsView">The global number of neighbors.</param>
            <param name="maxNumNeighborsView">
            The global max number of neighbors.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.SparseViewTarget.OutputNumNeighbors(System.Int32,System.Int32)">
            <summary>
            Stores the given number of row entries as number of neighbors.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.SparseViewTarget.ComputeAtomicMaxNumNeighbors(System.Int32)">
            <summary>
            Atomically computes the global maximum number of neighbors.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.CreateSparseMatrixInfoProvider``1(ILGPU.Runtime.Accelerator,ILGPU.ArrayView{System.Int32})">
            <summary>
            Creates a new sparse matrix shape info provider.
            </summary>
            <typeparam name="TPredicate">
            The predicate used to sparsify the input matrix.
            </typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="tempView">
            The input temporary value view (at least of length 1).
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.ComputeSparseMatrixShapeInfo``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Index2D,``0,ILGPU.ArrayView{System.Int32},ILGPU.ArrayView{System.Int32})">
            <summary>
            Compute new sparse matrix shape info.
            </summary>
            <typeparam name="TPredicate">
            The predicate used to sparsify the input matrix.
            </typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="stream">The current accelerator stream.</param>
            <param name="matrixExtent">The dense input matrix extent.</param>
            <param name="predicate">The predicate used to sparsify the matrix.</param>
            <param name="numNeighbors">The number of neighbors per row.</param>
            <param name="tempView">
            The input temporary value view (at least of length 1).
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.CreateSparseMatrixShapeConverter``3(ILGPU.Runtime.Accelerator,ILGPU.ArrayView{System.Int32})">
            <summary>
            Creates a new sparse matrix shape provider.
            </summary>
            <typeparam name="T">The value type to operate on.</typeparam>
            <typeparam name="TPredicate">
            The predicate used to sparsify the input matrix.
            </typeparam>
            <typeparam name="TStride">The element striding of the matrices.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="tempView">
            The input temporary value view (at least of length 1).
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.ComputeSparseMatrixShapeConverter``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView2D{``0,``2},``1,ILGPU.ArrayView{System.Int32},System.Func{System.Int32,ILGPU.Runtime.ArrayView2D{System.Int32,``2}},ILGPU.ArrayView{System.Int32})">
            <summary>
            Creates a new sparse matrix shape provider.
            </summary>
            <typeparam name="T">The value type to operate on.</typeparam>
            <typeparam name="TPredicate">
            The predicate used to sparsify the input matrix.
            </typeparam>
            <typeparam name="TStride">The element striding of the matrices.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="stream">The current accelerator stream.</param>
            <param name="inputMatrix">The dense input matrix.</param>
            <param name="predicate">The predicate used to sparsify the matrix.</param>
            <param name="numNeighbors">The number of neighbors per row.</param>
            <param name="getNeighborsFunc">A 2D sparse neighbors view provider.</param>
            <param name="tempView">
            The input temporary value view (at least of length 1).
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.CreateSparseMatrixConverter``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new sparse matrix converter.
            </summary>
            <typeparam name="T">The value type to operate on.</typeparam>
            <typeparam name="TStride">The element striding of the matrices.</typeparam>
            <param name="accelerator">The current accelerator.</param>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixExtensions.ComputeSparseMatrixView``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView2D{``0,``1},ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeView{``1},ILGPU.Runtime.ArrayView2D{``0,``1})">
            <summary>
            Computes a new sparse matrix view.
            </summary>
            <typeparam name="T">The value type to operate on.</typeparam>
            <typeparam name="TStride">The element striding of the matrices.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="stream">The current accelerator stream.</param>
            <param name="inputMatrix">The dense input matrix.</param>
            <param name="shapeView">The input shape view (pre allocated).</param>
            <param name="dataView">The sparse data view (pre allocated).</param>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.ISparseMatrixShapeView`1">
            <summary>
            Represents an abstract 2D sparse matrix shape
            </summary>
            <typeparam name="TStride">The 2D neighbor stride.</typeparam>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.ISparseMatrixShapeView`1.Neighbors">
            <summary>
            NumRows x f matrix containing column indexes where non-zero values in matrix
            are for each row in [0:NumRows].
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.ISparseMatrixShapeView`1.NumNeighbors">
            <summary>
            Vector with number of non-zero entries on each row of m_neighbors for all x,
            neighbors[x, numNeighbors[x]:MaxNonZeroEntries] may contain junk.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.ISparseMatrixShapeView`1.NumRows">
            <summary>
            The number of rows.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.ISparseMatrixShapeView`1.NumColumns">
            <summary>
            The number of columns.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeView`1">
            <summary>
            A single sparse matrix shape view containing information about the shape of a
            sparse matrix without specifying its data.
            </summary>
            <typeparam name="TStride">The 2D stride.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeView`1.#ctor(ILGPU.Runtime.ArrayView2D{System.Int32,`0},ILGPU.ArrayView{System.Int32},ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Constructs a new sparse matrix shape.
            </summary>
            <param name="neighbors">The neighbors indexing view.</param>
            <param name="numNeighbors">The number of neighbors per row.</param>
            <param name="numRows">The number of rows of the source matrix.</param>
            <param name="numColumns">The number of columns of the source matrix.</param>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeView`1.Neighbors">
            <summary>
            NumRows x f matrix containing column indexes where non-zero values in matrix
            are for each row in [0:NumRows].
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeView`1.NumNeighbors">
            <summary>
            Vector with number of non-zero entries on each row of m_neighbors for all x,
            neighbors[x, numNeighbors[x]:MaxNonZeroEntries] may contain junk.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeView`1.NumRows">
            <summary>
            The number of rows.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeView`1.NumColumns">
            <summary>
            The number of columns.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeView`1.TryFindColumn(ILGPU.Index1D,ILGPU.Index1D,ILGPU.Index1D@)">
            <summary>
            Finds the requested column from the original dense matrix in neighbors.
            </summary>
            <remarks>
            This method uses a single-threaded binary search algorithm which can be
            slow on GPUs if the current num-neighbor view is not loaded into cache.
            </remarks>
            <param name="row">The row used for searching.</param>
            <param name="column">The column to look for.</param>
            <param name="index">The output index (if any).</param>
            <returns>True if the column index could be found.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2">
            <summary>
            Represents a sparse matrix in view pointing to data in GPU space
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2.#ctor(ILGPU.Runtime.ArrayView2D{`0,`1},ILGPU.Algorithms.MatrixOperations.SparseMatrixShapeView{`1})">
            <summary>
            Constructs a new view wrapping existing views that represent a sparse matrix.
            </summary>
            <param name="edgeWeights">A sparse shape.</param>
            <param name="shapeView">The values for all edges.</param>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2.EdgeWeights">
            <summary>
            Returns a view pointing to all edge weights.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2.ShapeView">
            <summary>
            Returns the associated shape view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2.Item(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Gets or sets a data element in the specified row and column. May be slow
            depending on caching. See <see cref="T:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2"/> for more
            information.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2.Neighbors">
            <summary>
            NumRows x f matrix containing column indexes where non-zero values in matrix
            are for each row in [0:NumRows].
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2.NumNeighbors">
            <summary>
            Vector with number of non-zero entries on each row of m_neighbors for all x,
            neighbors[x, numNeighbors[x]:MaxNonZeroEntries] may contain junk.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2.NumRows">
            <summary>
            The number of rows.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2.NumColumns">
            <summary>
            The number of columns.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.MatrixOperations.SparseMatrixView`2.DirectAccess(ILGPU.Index1D,ILGPU.Index1D)">
            <summary>
            Returns a memory reference to the desired data cell.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.Optimization.OptimizationResultView`2">
            <summary>
            An optimization result view pointing to regions in accelerator memory.
            </summary>
            <typeparam name="TElementType">
            The numeric element type used for optimization.
            </typeparam>
            <typeparam name="TEvalType">
            The evaluation type used for evaluation.
            </typeparam>
        </member>
        <member name="P:ILGPU.Algorithms.Optimization.OptimizationResultView`2.ResultView">
            <summary>
            Returns the actual result value.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Optimization.OptimizationResultView`2.PositionView">
            <summary>
            Returns the underlying result view containing the position vector.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Optimization.OptimizationResultView`2.ElapsedTime">
            <summary>
            The total elapsed time in milliseconds.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.Optimization.OptimizationResult`2">
            <summary>
            An optimization result in CPU space.
            </summary>
            <typeparam name="TElementType">
            The numeric element type used for optimization.
            </typeparam>
            <typeparam name="TEvalType">
            The evaluation type used for evaluation.
            </typeparam>
        </member>
        <member name="P:ILGPU.Algorithms.Optimization.OptimizationResult`2.Result">
            <summary>
            Returns the actual result value.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Optimization.OptimizationResult`2.ResultVector">
            <summary>
            Returns the best result vector.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Optimization.OptimizationResult`2.ElapsedTime">
            <summary>
            The total elapsed time in milliseconds.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXContext">
            <summary>
            Manages custom PTX-specific intrinsics.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.PTX.PTXContext.PTXMathType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.PTX.PTXMath"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.PTX.PTXContext.MathCodeGenerator">
            <summary>
            Represents the <see cref="M:ILGPU.Algorithms.PTX.PTXMath.GenerateMathIntrinsic(ILGPU.Backends.PTX.PTXBackend,ILGPU.Backends.PTX.PTXCodeGenerator,ILGPU.IR.Value)"/>
            methods.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.PTX.PTXContext.MathCodeGeneratorIntrinsic">
            <summary>
            Represents the intrinsic representation of the
            <see cref="F:ILGPU.Algorithms.PTX.PTXContext.MathCodeGenerator"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.PTX.PTXContext.PTXGroupExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.PTX.PTXGroupExtensions"/> type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.PTX.PTXContext.PTXWarpExtensionsType">
            <summary>
            The <see cref="T:ILGPU.Algorithms.PTX.PTXWarpExtensions"/> type.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXContext.GetMathCodeGeneratorIntrinsic(ILGPU.Runtime.Cuda.CudaArchitecture)">
            <summary>
            Resolves a PTX code generator for the given math-function configuration.
            </summary>
            <param name="minArchitecture">The target/minimum architecture.</param>
            <returns>The resolved intrinsic representation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXContext.GetMathIntrinsic(System.String,System.Type[])">
            <summary>
            Resolves a PTX intrinsic for the given math-function configuration.
            </summary>
            <param name="name">The intrinsic name.</param>
            <param name="types">The parameter types.</param>
            <returns>The resolved intrinsic representation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXContext.RegisterIntrinsicMapping(ILGPU.IR.Intrinsics.IntrinsicImplementationManager,System.Type,System.Type,System.String)">
            <summary>
            Registers an intrinsic mapping.
            </summary>
            <param name="manager">The current manager.</param>
            <param name="sourceType">The source type.</param>
            <param name="targetType">The target type.</param>
            <param name="name">The method name to register.</param>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXContext.RegisterXMathRedirect(ILGPU.IR.Intrinsics.IntrinsicImplementationManager,System.Type,System.String,System.String,System.Type[])">
            <summary>
            Registers an XMath replacement mapping using a redirect.
            </summary>
            <param name="manager">The current manager.</param>
            <param name="targetType">The target type.</param>
            <param name="functionName">The method name to register.</param>
            <param name="replacementName">
            The name of the replacement method to register.
            </param>
            <param name="types">The argument types for the target method.</param>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXGroupExtensions">
            <summary>
            Custom PTX-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.Reduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.Reduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.AllReduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.AllReduce``2(``0)"/>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2">
            <summary>
            An abstract scan implementation that works on arbitrary types.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The actual scan operation type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Scan(`0)">
            <summary>
            Performs a scan using the provided value from every thread.
            </summary>
            <param name="value">The value to scan.</param>
            <returns>The scanned value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.ScanRightBoundary(`0,`0)">
            <summary>
            Scans the right boundary value.
            </summary>
            <param name="boundaryValue">The current boundary value.</param>
            <param name="value">The value to add.</param>
            <returns>The scanned boundary value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Load(System.Int32,ILGPU.ArrayView{`0})">
            <summary>
            Loads the i-th value from the given view.
            </summary>
            <param name="warpIdx">The warp index.</param>
            <param name="values">The values to load from.</param>
            <returns>The loaded value.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanImplementation`2">
            <summary>
            Represents an inclusive scan implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The actual scan operation type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanImplementation`2.Scan(`0)">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Scan(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanImplementation`2.ScanRightBoundary(`0,`0)">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.ScanRightBoundary(`0,`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanImplementation`2.Load(System.Int32,ILGPU.ArrayView{`0})">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Load(System.Int32,ILGPU.ArrayView{`0})"/>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanImplementation`2">
            <summary>
            Represents an exclusive scan implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The actual scan operation type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanImplementation`2.Scan(`0)">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Scan(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanImplementation`2.ScanRightBoundary(`0,`0)">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.ScanRightBoundary(`0,`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanImplementation`2.Load(System.Int32,ILGPU.ArrayView{`0})">
            <summary cref="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.IScanImplementation`2.Load(System.Int32,ILGPU.ArrayView{`0})"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ComputeScan``3(``0,ILGPU.ArrayView{``0}@)">
            <summary>
            The internal intrinsic implementation to realize a single
            scan computation in the scope of a single group.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The actual scan operation type.</typeparam>
            <typeparam name="TScanImplementation">The implementation type.</typeparam>
            <param name="value">The current value.</param>
            <param name="sharedMemory">The resulting shared memory.</param>
            <returns>The scanned value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.PerformScan``3(``0)">
            <summary>
            Performs a local scan operation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TScanImplementation">The scan implementation.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The scanned value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.PerformScan``3(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary>
            Performs a local scan operation including boundaries.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TScanImplementation">The scan implementation.</typeparam>
            <param name="value">The value to scan.</param>
            <param name="boundaries">The resolved boundaries</param>
            <returns>The scanned value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.InclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.ExclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.InclusiveScanWithBoundaries``2(``0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{``0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.ExclusiveScanNextIteration``2(``0,``0,``0)">
            <summary>
            Prepares for the next iteration of a group-wide exclusive scan within the
            same kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="leftBoundary">The left boundary value.</param>
            <param name="rightBoundary">The right boundary value.</param>
            <param name="currentValue">The current value.</param>
            <returns>The starting value for the next iteration.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXGroupExtensions.InclusiveScanNextIteration``2(``0,``0,``0)">
            <summary>
            Prepares for the next iteration of a group-wide inclusive scan within the
            same kernel.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The type of the warp scan logic.</typeparam>
            <param name="leftBoundary">The left boundary value.</param>
            <param name="rightBoundary">The right boundary value.</param>
            <param name="currentValue">The current value.</param>
            <returns>The starting value for the next iteration.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXMath">
            <summary>
            Custom PTX-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.GenerateMathIntrinsic(ILGPU.Backends.PTX.PTXBackend,ILGPU.Backends.PTX.PTXCodeGenerator,ILGPU.IR.Value)">
            <summary>
            Generates intrinsic math instructions for the following kinds:
            Rcp, Sqrt, Sin, Cos, Exp2, Log2, IsInf, IsNaN
            </summary>
            <param name="backend">The current backend.</param>
            <param name="codeGenerator">The code generator.</param>
            <param name="value">The value to generate code for.</param>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsNaN(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsNaN(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsNaN(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsNaN(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsInfinity(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsInfinity(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsInfinity(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.IsInfinity(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rcp(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rcp(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rcp(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rcp(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rem(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rem(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rem(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rem(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IEEERemainder(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.IEEERemainder(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IEEERemainder(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.IEEERemainder(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sqrt(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sqrt(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sqrt(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sqrt(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rsqrt(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rsqrt(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Rsqrt(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Rsqrt(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Floor(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Floor(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Floor(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Floor(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Ceiling(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Ceiling(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Ceiling(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Ceiling(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sin(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sin(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sin(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sin(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sinh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sinh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Sinh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Sinh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Asin(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Asin(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Asin(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Asin(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Cos(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cos(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Cos(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cos(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Cosh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cosh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Cosh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Cosh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Acos(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Acos(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Acos(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Acos(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Tan(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tan(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Tan(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tan(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Tanh(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tanh(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Tanh(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Tanh(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Atan(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Atan(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Atan2(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan2(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Atan2(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Atan2(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Pow(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Pow(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Pow(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Pow(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsInteger(System.Double)">
            <summary>
            Tests if a floating point value is an integer
            </summary>
            <param name="value">The value to check</param>
            <returns>True, if the value is an integer</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsInteger(System.Single)">
            <summary>
            Tests if a floating point value is an integer
            </summary>
            <param name="value">The value to check</param>
            <returns>True, if the value is an integer</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsOddInteger(System.Double)">
            <summary>
            Tests if a floating point value is an odd integer
            </summary>
            <param name="value">The value to check</param>
            <returns>True, if the value is an odd integer</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.IsOddInteger(System.Single)">
            <summary>
            Tests if a floating point value is an odd integer
            </summary>
            <param name="value">The value to check</param>
            <returns>True, if the value is an odd integer</returns>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Exp(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Exp(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Exp2(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp2(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Exp2(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Exp2(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log(System.Double,System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Double,System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log(System.Single,System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Single,System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log10(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log10(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log10(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log10(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log2(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log2(System.Double)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.Log2(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.Log2(System.Single)" />
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.RoundToEven(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.RoundToEven(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.RoundToEven(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.RoundToEven(System.Single)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.RoundAwayFromZero(System.Double)">
            <summary cref="M:ILGPU.Algorithms.XMath.RoundAwayFromZero(System.Double)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXMath.RoundAwayFromZero(System.Single)">
            <summary cref="M:ILGPU.Algorithms.XMath.RoundAwayFromZero(System.Single)"/>
        </member>
        <member name="T:ILGPU.Algorithms.PTX.PTXWarpExtensions">
            <summary>
            Custom PTX-specific implementations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXWarpExtensions.Reduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.Reduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXWarpExtensions.AllReduce``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.AllReduce``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXWarpExtensions.ExclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.ExclusiveScan``2(``0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.PTX.PTXWarpExtensions.InclusiveScan``2(``0)">
            <summary cref="M:ILGPU.Algorithms.WarpExtensions.InclusiveScan``2(``0)"/>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSort`2">
            <summary>
            Represents a radix sort operation using a shuffle and operation logic.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <typeparam name="TStride">The stride of all values.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The elements to sort.</param>
            <param name="temp">The temp view to store temporary results.</param>
            <remarks>The view buffer will be changed during the sorting operation.</remarks>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortPairs`4">
            <summary>
            Represents a radix sort operation that sorts (key, value) pair instances.
            </summary>
            <typeparam name="TKey">The underlying type of the sort operation.</typeparam>
            <typeparam name="TKeyStride">The stride of all keys.</typeparam>
            <typeparam name="TValue">The value type of each element.</typeparam>
            <typeparam name="TValueStride">The stride of all values.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="keys">The keys to sort.</param>
            <param name="values">The corresponding values.</param>
            <param name="temp">The temp view to store temporary results.</param>
            <remarks>The view buffers will be changed during the sorting operation.</remarks>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortPairs`5">
            <summary>
            Represents a radix sort operation that sorts (key, value) pair instances using
            a sequencer to provide all values for each key in the beginning of the operation.
            </summary>
            <typeparam name="TKey">The underlying type of the sort operation.</typeparam>
            <typeparam name="TKeyStride">The stride of all keys.</typeparam>
            <typeparam name="TValue">The value type of each element.</typeparam>
            <typeparam name="TValueStride">The stride of all values.</typeparam>
            <typeparam name="TSequencer">The sequencer type to generate values.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="keys">The keys to sort.</param>
            <param name="outputValues">The determined output values.</param>
            <param name="sequencer">The sequencer to generate the key-value pairs.</param>
            <param name="temp">The temp view to store temporary results.</param>
            <remarks>The view buffers will be changed during the sorting operation.</remarks>
        </member>
        <member name="T:ILGPU.Algorithms.BufferedRadixSort`2">
            <summary>
            Represents a radix sort operation using a shuffle and operation logic.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <typeparam name="TStride">The stride of all values.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The elements to sort.</param>
            <remarks>The view buffer will be changed during the sorting operation.</remarks>
        </member>
        <member name="T:ILGPU.Algorithms.BufferedRadixSortPairs`4">
            <summary>
            Represents a radix sort operation that sorts (key, value) pair instances.
            </summary>
            <typeparam name="TKey">The underlying type of the sort operation.</typeparam>
            <typeparam name="TKeyStride">The stride of all keys.</typeparam>
            <typeparam name="TValue">The value type of each element.</typeparam>
            <typeparam name="TValueStride">The stride of all values.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="keys">The keys to sort.</param>
            <param name="values">The corresponding values.</param>
            <remarks>The view buffers will be changed during the sorting operation.</remarks>
        </member>
        <member name="T:ILGPU.Algorithms.BufferedRadixSortPairs`5">
            <summary>
            Represents a radix sort operation that sorts (key, value) pair instances using
            a sequencer to provide all values for each key in the beginning of the operation.
            </summary>
            <typeparam name="TKey">The underlying type of the sort operation.</typeparam>
            <typeparam name="TKeyStride">The stride of all keys.</typeparam>
            <typeparam name="TValue">The value type of each element.</typeparam>
            <typeparam name="TValueStride">The stride of all values.</typeparam>
            <typeparam name="TSequencer">The sequencer type to generate values.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="keys">The keys to sort.</param>
            <param name="outputValues">The determined output values.</param>
            <param name="sequencer">The sequencer to generate the key-value pairs.</param>
            <remarks>The view buffers will be changed during the sorting operation.</remarks>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortProvider">
            <summary>
            Represents a radix-sort provider for a radix sort operation.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortProvider.CreateRadixSort``3">
            <summary>
            Creates a new radix sort operation.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <typeparam name="TStride">The stride of all values.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <returns>The created radix sort handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortProvider.CreateRadixSortPairs``5">
            <summary>
            Creates a new radix sort pairs operation that sorts tuples of (key, value)
            instances.
            </summary>
            <typeparam name="TKey">The underlying type of the sort operation.</typeparam>
            <typeparam name="TKeyStride">The stride of all keys.</typeparam>
            <typeparam name="TValue">The value type of each element.</typeparam>
            <typeparam name="TValueStride">The stride of all values.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <returns>The created radix sort handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortProvider.CreateRadixSortPairs``6">
            <summary>
            Creates a new radix sort pairs operation that sorts tuples of (key, value)
            instances.
            </summary>
            <typeparam name="TKey">The underlying type of the sort operation.</typeparam>
            <typeparam name="TKeyStride">The stride of all keys.</typeparam>
            <typeparam name="TValue">The value type of each element.</typeparam>
            <typeparam name="TValueStride">The stride of all values.</typeparam>
            <typeparam name="TSequencer">
            The sequencer type to generate values.
            </typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <returns>The created radix sort handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortProvider.DisposeAcceleratorObject(System.Boolean)">
            <inheritdoc cref="M:ILGPU.Runtime.AcceleratorObject.DisposeAcceleratorObject(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions">
            <summary>
            Contains extension methods for radix-sort operations.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.Pass1KernelDelegate`2">
            <summary>
            A pass delegate for the first pass.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.CPUPass1KernelDelegate`2">
            <summary>
            A pass delegate for the first pass.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.Pass2KernelDelegate`3">
            <summary>
            A pass delegate for the second pass.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.CPUPass2KernelDelegate`2">
            <summary>
            A pass delegate for the second pass.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.ComputeRadixSortPairsTempStorageSize``3(ILGPU.Runtime.Accelerator,ILGPU.Index1D)">
            <summary>
            Computes the required number of temp-storage elements for a radix sort pairs
            operation and the given data length.
            </summary>
            <typeparam name="TKey">The underlying type of the sort operation.</typeparam>
            <typeparam name="TValue">The value type of each element.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">The number of data elements to sort.</param>
            <returns>
            The required number of temp-storage elements in 32 bit ints.
            </returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.ComputeRadixSortTempStorageSize``2(ILGPU.Runtime.Accelerator,ILGPU.Index1D)">
            <summary>
            Computes the required number of temp-storage elements for a radix sort
            operation and the given data length.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">The number of data elements to sort.</param>
            <returns>
            The required number of temp-storage elements in 32 bit ints.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.RadixSortPair`2">
            <summary>
            Represents a single key/value pair in the scope of radix sort operation.
            </summary>
            <typeparam name="TKey">The key type to sort.</typeparam>
            <typeparam name="TValue">The value type associated to each key.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.RadixSortPair`2.#ctor(`0,`1)">
            <summary>
            Constructs a new radix-sort pair.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.RadixSortPair`2.Key">
            <summary>
            Returns the key part of this pair that is used for sorting.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.RadixSortPair`2.Value">
            <summary>
            Returns the associated value part of this pair.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.RadixSortPair`2.ToString">
            <summary>
            Returns the string representation of this pair.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.RadixSortPairsOperation`3">
            <summary>
            Represents a wrapper operation that works on the key part of a merged
            <see cref="T:ILGPU.Algorithms.RadixSortExtensions.RadixSortPair`2"/> instance.
            </summary>
            <typeparam name="TKey">The key type to sort.</typeparam>
            <typeparam name="TValue">The value type associated to each key.</typeparam>
            <typeparam name="TOperation">The underlying operation type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.RadixSortPairsOperation`3.GetOperation">
            <summary>
            Returns the default operation.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.RadixSortPairsOperation`3.NumBits">
            <summary>
            Returns the number of bits of the parent
            <typeparamref name="TOperation"/>.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.RadixSortPairsOperation`3.DefaultValue">
            <summary>
            Returns the default key-value pair based of the parent
            <typeparamref name="TOperation"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.RadixSortPairsOperation`3.ExtractRadixBits(ILGPU.Algorithms.RadixSortExtensions.RadixSortPair{`0,`1},System.Int32,System.Int32)">
            <summary>
            Extracts the bits from the key part of the given radix-sort pair using
            the parent <typeparamref name="TOperation"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.IRadixSortSpecialization">
            <summary>
            Represents a single specialization.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.IRadixSortSpecialization.UnrollFactor">
            <summary>
            Returns the associated constant unroll factor.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.IRadixSortSpecialization.BitIncrement">
            <summary>
            Returns the number of bits to increment for the
            next radix-sort iteration.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.GatherRadixSortPairsKernel``4(ILGPU.Index1D,ILGPU.Runtime.ArrayView1D{``0,``1},``3,ILGPU.ArrayView{ILGPU.Algorithms.RadixSortExtensions.RadixSortPair{``0,``2}})">
            <summary>
            Combines the given key and values (given by the sequencer) into a merged
            buffer consisting of <see cref="T:ILGPU.Algorithms.RadixSortExtensions.RadixSortPair`2"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.ScatterRadixSortPairsKernel``4(ILGPU.Index1D,ILGPU.ArrayView{ILGPU.Algorithms.RadixSortExtensions.RadixSortPair{``0,``2}},ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.Runtime.ArrayView1D{``2,``3})">
            <summary>
            Scatters views of <see cref="T:ILGPU.Algorithms.RadixSortExtensions.RadixSortPair`2"/> instances into
            distinct key and value views.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.RadixSortKernel1``4(ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{System.Int32},ILGPU.Runtime.SpecializedValue{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the first radix-sort pass.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride of all elements.</typeparam>
            <typeparam name="TOperation">The radix-sort operation.</typeparam>
            <typeparam name="TSpecialization">The specialization type.</typeparam>
            <param name="view">The input view to use.</param>
            <param name="counter">The global counter view.</param>
            <param name="groupSize">The number of threads in the group.</param>
            <param name="numGroups">The number of virtually launched groups.</param>
            <param name="paddedLength">The padded length of the input view.</param>
            <param name="shift">The bit shift to use.</param>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CPURadixSortKernel1``4(ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{``0},ILGPU.ArrayView{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the first radix-sort pass on the CPU.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride of the input view.</typeparam>
            <typeparam name="TOperation">The radix-sort operation.</typeparam>
            <typeparam name="TSpecialization">The specialization type.</typeparam>
            <param name="input">The input view to use.</param>
            <param name="output">The input view to use.</param>
            <param name="counter">The global counter view.</param>
            <param name="numGroups">The number of virtually launched groups.</param>
            <param name="numIterationsPerGroup">
            The number of iterations per group.
            </param>
            <param name="shift">The bit shift to use.</param>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.GetExclusiveCount(ILGPU.Index1D,ILGPU.ArrayView{System.Int32})">
            <summary>
            Resolves the exclusive scan-value from the given counter view.
            </summary>
            <param name="index">The current index.</param>
            <param name="counter">The counter view.</param>
            <returns>The exclusive sum.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.RadixSortKernel2``5(ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.Runtime.ArrayView1D{``0,``2},ILGPU.ArrayView{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the second radix-sort pass.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TInputStride">The stride of the input view.</typeparam>
            <typeparam name="TOutputStride">The stride of the output view.</typeparam>
            <typeparam name="TOperation">The radix-sort operation.</typeparam>
            <typeparam name="TSpecialization">The specialization type.</typeparam>
            <param name="input">The input view to use.</param>
            <param name="output">The output view to use.</param>
            <param name="counter">The global counter view.</param>
            <param name="numGroups">The number of virtually launched groups.</param>
            <param name="paddedLength">The padded length of the input view.</param>
            <param name="shift">The bit shift to use.</param>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CPURadixSortKernel2``4(ILGPU.ArrayView{``0},ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{System.Int32},System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs the second radix-sort pass.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride of the output view.</typeparam>
            <typeparam name="TOperation">The radix-sort operation.</typeparam>
            <typeparam name="TSpecialization">The specialization type.</typeparam>
            <param name="input">The input view to use.</param>
            <param name="output">The output view to use.</param>
            <param name="counter">The global counter view.</param>
            <param name="numGroups">The number of virtually launched groups.</param>
            <param name="numIterationsPerGroup">
            The number of iterations per group.
            </param>
            <param name="shift">The bit shift to use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RadixSortExtensions.Specialization4">
            <summary>
            A specialization with unroll factor 4.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.Specialization4.UnrollFactor">
            <summary cref="P:ILGPU.Algorithms.RadixSortExtensions.IRadixSortSpecialization.UnrollFactor"/>
        </member>
        <member name="P:ILGPU.Algorithms.RadixSortExtensions.Specialization4.BitIncrement">
            <summary cref="P:ILGPU.Algorithms.RadixSortExtensions.IRadixSortSpecialization.BitIncrement"/>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CreateRadixSortPairs``6(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new radix sort pairs operation that retrieves its values by
            calling the given sequencer.
            </summary>
            <typeparam name="TKey">The underlying type of the sort operation.</typeparam>
            <typeparam name="TKeyStride">The stride of all keys.</typeparam>
            <typeparam name="TValue">The value type of each element.</typeparam>
            <typeparam name="TValueStride">The stride of all values.</typeparam>
            <typeparam name="TSequencer">
            The sequencer type to generate values.
            </typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created radix sort handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CreateRadixSortPairs``5(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new radix sort pairs operation that uses a values source view.
            </summary>
            <typeparam name="TKey">The underlying type of the sort operation.</typeparam>
            <typeparam name="TKeyStride">The stride of all keys.</typeparam>
            <typeparam name="TValue">The value type of each element.</typeparam>
            <typeparam name="TValueStride">The stride of all values.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created radix sort handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CreateRadixSort``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new radix sort operation.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <typeparam name="TStride">The stride of all values.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created radix sort handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CreateRadixSortProvider(ILGPU.Runtime.Accelerator,ILGPU.Index1D)">
            <summary>
            Creates a new specialized radix-sort provider that has its own cache.
            Note that the resulting provider has to be disposed manually.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="tempStorageSize">
            The number of 32bit integers to use as a temp storage.
            </param>
            <returns>The created provider.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CreateRadixSortProvider``2(ILGPU.Runtime.Accelerator,ILGPU.Index1D)">
            <summary>
            Allocates a temporary memory view.
            </summary>
            <typeparam name="T">The underlying type of the sort operation.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">The expected maximum data length to sort.</param>
            <returns>The allocated temporary view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.RadixSortExtensions.CreateRadixSortProvider``3(ILGPU.Runtime.Accelerator,ILGPU.Index1D)">
            <summary>
            Allocates a temporary memory view.
            </summary>
            <typeparam name="TKey">The underlying type of the sort operation.</typeparam>
            <typeparam name="TValue">The value type of each element.</typeparam>
            <typeparam name="TRadixSortOperation">
            The type of the radix-sort operation.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">
            The expected maximum data length to sort (number of keys).
            </param>
            <returns>The allocated temporary view.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.IRandomProvider">
            <summary>
            Specifies an abstract RNG provider.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.IRandomProvider.Next">
            <summary>
            Generates a random int in [0..int.MaxValue].
            </summary>
            <returns>A random int in [0..int.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.IRandomProvider.NextLong">
            <summary>
            Generates a random long in [0..long.MaxValue].
            </summary>
            <returns>A random long in [0..long.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.IRandomProvider.NextFloat">
            <summary>
            Generates a random float in [0..1).
            </summary>
            <returns>A random float in [0..1).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.IRandomProvider.NextDouble">
            <summary>
            Generates a random double in [0..1).
            </summary>
            <returns>A random double in [0..1).</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.IRandomProvider`1">
            <summary>
            An abstract RNG provider that supports period shifts.
            </summary>
            <typeparam name="TProvider">The implementing provider type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Random.IRandomProvider`1.ShiftPeriod(System.Int32)">
            <summary>
            Shifts the current period.
            </summary>
            <param name="shift">The shift amount.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.IRandomProvider`1.NextProvider">
            <summary>
            Instantiates a new provider using the internal random state.
            </summary>
            <returns>The next provider instance.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.IRandomProvider`1.CreateProvider(System.Random)">
            <summary>
            Instantiates a new provider using the given random.
            </summary>
            <param name="random">The parent RNG instance.</param>
            <returns>The next provider instance.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.IRandomProvider`1.CreateProvider``1(``0@)">
            <summary>
            Instantiates a new provider using the given random.
            </summary>
            <param name="random">The parent RNG instance.</param>
            <returns>The next provider instance.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.Operations.IRandomProviderOperation`2">
            <summary>
            An operation that can be executed using a provider instance.
            </summary>
            <typeparam name="T">The operation return type.</typeparam>
            <typeparam name="TRandomProvider">The provider type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Random.Operations.IRandomProviderOperation`2.Apply(`1@)">
            <summary>
            Applies the current operation to the RNG provider.
            </summary>
            <param name="randomProvider">The RNG provider to use.</param>
            <returns>The return value.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.Operations.NextIntOperation`1">
            <summary>
            Invokes <see cref="M:ILGPU.Algorithms.Random.IRandomProvider.Next"/> on a RNG state.
            </summary>
            <typeparam name="TRandomProvider">The provider type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Random.Operations.NextIntOperation`1.Apply(`0@)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.Operations.IRandomProviderOperation`2.Apply(`1@)"/>"
        </member>
        <member name="T:ILGPU.Algorithms.Random.Operations.NextLongOperation`1">
            <summary>
            Invokes <see cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextLong"/> on a RNG state.
            </summary>
            <typeparam name="TRandomProvider">The provider type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Random.Operations.NextLongOperation`1.Apply(`0@)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.Operations.IRandomProviderOperation`2.Apply(`1@)"/>"
        </member>
        <member name="T:ILGPU.Algorithms.Random.Operations.NextFloatOperation`1">
            <summary>
            Invokes <see cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextFloat"/> on a RNG state.
            </summary>
            <typeparam name="TRandomProvider">The provider type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Random.Operations.NextFloatOperation`1.Apply(`0@)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.Operations.IRandomProviderOperation`2.Apply(`1@)"/>"
        </member>
        <member name="T:ILGPU.Algorithms.Random.Operations.NextDoubleOperation`1">
            <summary>
            Invokes <see cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextDouble"/> on a RNG state.
            </summary>
            <typeparam name="TRandomProvider">The provider type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Random.Operations.NextDoubleOperation`1.Apply(`0@)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.Operations.IRandomProviderOperation`2.Apply(`1@)"/>"
        </member>
        <member name="T:ILGPU.Algorithms.Random.RandomExtensions">
            <summary>
            Represents useful helpers for random generators.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RandomExtensions.InverseIntDoubleRange">
            <summary>
            1.0 / int.MaxValue
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RandomExtensions.InverseIntFloatRange">
            <summary>
            1.0 / int.MaxValue
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RandomExtensions.InverseLongDoubleRange">
            <summary>
            1.0 / long.MaxValue
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RandomExtensions.InverseLongFloatRange">
            <summary>
            1.0 / long.MaxValue
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.MergeULong(System.UInt64)">
            <summary>
            Merges the given unsigned long into an unsigned integer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.SeperateUInt(System.UInt32)">
            <summary>
            Separates the given unsigned int into an unsigned long.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.ToInt(System.UInt32)">
            <summary>
            Converts the given unsigned int into a positive signed integer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.ToLong(System.UInt64)">
            <summary>
            Converts the given unsigned long into a positive signed long.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.ShiftState(System.UInt32,System.Int32)">
            <summary>
            Shifts an RNG state to be used within a warp.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.ShiftState(System.UInt64,System.Int32)">
            <summary>
            Shifts an RNG state to be used within a warp.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.Next``1(``0@,System.Single,System.Single)">
            <summary>
            Generates a random int in [minValue..maxValue).
            </summary>
            <param name="randomProvider">The random provider.</param>
            <param name="minValue">The minimum value (inclusive)</param>
            <param name="maxValue">The maximum values (exclusive)</param>
            <returns>A random int in [minValue..maxValue).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.Next``1(``0@,System.Double,System.Double)">
            <summary>
            Generates a random int in [minValue..maxValue).
            </summary>
            <param name="randomProvider">The random provider.</param>
            <param name="minValue">The minimum value (inclusive)</param>
            <param name="maxValue">The maximum values (exclusive)</param>
            <returns>A random int in [minValue..maxValue).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.Next``1(``0@,System.Int32,System.Int32)">
            <summary>
            Generates a random int in [minValue..maxValue).
            </summary>
            <param name="randomProvider">The random provider.</param>
            <param name="minValue">The minimum value (inclusive)</param>
            <param name="maxValue">The maximum values (exclusive)</param>
            <returns>A random int in [minValue..maxValue).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.Next``1(``0@,System.Int64,System.Int64)">
            <summary>
            Generates a random long in [minValue..maxValue).
            </summary>
            <param name="randomProvider">The random provider.</param>
            <param name="minValue">The minimum value (inclusive)</param>
            <param name="maxValue">The maximum values (exclusive)</param>
            <returns>A random long in [minValue..maxValue).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.CreateRNG``1(ILGPU.Runtime.Accelerator,System.Random)">
            <summary>
            Constructs an RNG using the given provider instance.
            </summary>
            <typeparam name="TRandomProvider">The random provider type.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="random">The parent RNG provider.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.CreateRNG``1(ILGPU.Runtime.Accelerator,System.Random,System.Int32)">
            <summary>
            Constructs an RNG using the given provider instance.
            </summary>
            <typeparam name="TRandomProvider">The random provider type.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="random">The parent RNG provider.</param>
            <param name="maxNumParallelWarps">
            The maximum number of parallel warps.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.InitializeRNGKernel``1(ILGPU.Index1D,ILGPU.ArrayView{ILGPU.Algorithms.Random.XorShift128Plus},ILGPU.ArrayView{``0})">
            <summary>
            Initialization kernel used to initialize the actual RNG values on the device.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RandomExtensions.InitRNGView``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},System.Random,System.Int32)">
            <summary>
            Initializes a given view with random values.
            </summary>
            <typeparam name="TRandomProvider">
            The RNG provider type to use on the device.
            </typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="stream">The current accelerator stream.</param>
            <param name="rngView">The view to fill.</param>
            <param name="random">The source RNG provider.</param>
            <param name="numInitializers">The number of CPU initializers to use.</param>
        </member>
        <member name="T:ILGPU.Algorithms.Random.RNG">
            <summary>
            Represents a generic RNG object to compute random numbers.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.Create``1(ILGPU.Runtime.Accelerator,System.Random)">
            <summary>
            Constructs an RNG using the given provider instance.
            </summary>
            <typeparam name="TRandomProvider">The random provider type.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="random">The parent RNG provider.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.Create``1(ILGPU.Runtime.Accelerator,System.Random,System.Int32)">
            <summary>
            Constructs an RNG using the given provider instance.
            </summary>
            <typeparam name="TRandomProvider">The random provider type.</typeparam>
            <param name="accelerator">The current accelerator.</param>
            <param name="random">The parent RNG provider.</param>
            <param name="maxNumParallelWarps">
            The maximum number of parallel warps.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.#ctor(ILGPU.Runtime.Accelerator)">
            <summary>
            Constructs a new RNG instance.
            </summary>
            <param name="accelerator">The parent accelerator object.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.ArrayView{System.Int32})">
            <summary>
            Fills the given view with uniformly distributed positive integers.
            </summary>
            <param name="view">The view to fill.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int32})">
            <summary>
            Fills the given view with uniformly distributed positive integers.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="view">The view to fill.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.ArrayView{System.Int64})">
            <summary>
            Fills the given view with uniformly distributed positive longs.
            </summary>
            <param name="view">The view to fill.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int64})">
            <summary>
            Fills the given view with uniformly distributed positive longs.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="view">The view to fill.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.ArrayView{System.Single})">
            <summary>
            Fills the given view with uniformly distributed floats in [0.0, ..., 1.0).
            </summary>
            <param name="view">The view to fill.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Single})">
            <summary>
            Fills the given view with uniformly distributed floats in [0.0, ..., 1.0).
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="view">The view to fill.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.ArrayView{System.Double})">
            <summary>
            Fills the given view with uniformly distributed doubles in [0.0, ..., 1.0).
            </summary>
            <param name="view">The view to fill.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Double})">
            <summary>
            Fills the given view with uniformly distributed doubles in [0.0, ..., 1.0).
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="view">The view to fill.</param>
        </member>
        <member name="T:ILGPU.Algorithms.Random.RNGView`1">
            <summary>
            A generic RNG view that allows the parallel generation of random numbers within
            ILGPU kernels. The underlying implementation uses a single instance per Warp and
            uses local shift functions to simulate different RNGs per lane. The global state
            is stored within an underlying memory buffer.
            </summary>
            <typeparam name="TRandomProvider">The random provider type.</typeparam>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RNGView`1.randomProviders">
            <summary>
            A view to a single random provider per warp.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RNGView`1.maxNumParallelWarps">
            <summary>
            The maximum number of parallel groups.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNGView`1.#ctor(ILGPU.ArrayView{`0},System.Int32)">
            <summary>
            Initializes the RNG view.
            </summary>
            <param name="providers">The random providers.</param>
            <param name="numParallelWarps">The maximum number of parallel warps.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNGView`1.GetRandomProvider">
            <summary>
            Gets the current random number provider that is associated with this warp.
            </summary>
            <returns>A reference to the current random provider.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNGView`1.Next``2">
            <summary>
            Generates a random value using the operation provided.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <typeparam name="TOperation">The operation implementation type.</typeparam>
            <returns>The next value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNGView`1.Next">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.Next"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNGView`1.NextLong">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextLong"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNGView`1.NextFloat">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextFloat"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNGView`1.NextDouble">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextDouble"/>
        </member>
        <member name="T:ILGPU.Algorithms.Random.RNG`1">
            <summary>
            A generic RNG implementation that uses an underlying random provider (compatible
            with <see cref="T:ILGPU.Algorithms.Random.XorShift32"/>, <see cref="T:ILGPU.Algorithms.Random.XorShift64Star"/>,
            <see cref="T:ILGPU.Algorithms.Random.XorShift128"/> and <see cref="T:ILGPU.Algorithms.Random.XorShift128Plus"/>). It uses a single
            instance per warp and uses local shift functions to simulate different RNGs
            per lane. The global state is stored within an underlying memory buffer.
            </summary>
            <typeparam name="TRandomProvider">The random provider type.</typeparam>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.GetMaxNumWarps(ILGPU.Runtime.Accelerator)">
            <summary>
            Computes the number of parallel warps on this accelerator.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.Random.RNG`1.FillKernelBody`2">
            <summary>
            The actual implementation of a generic RNG-based fill kernel.
            </summary>
            <typeparam name="T">The value type.</typeparam>
            <typeparam name="TOperation">The RNG operation.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.FillKernelBody`2.#ctor(ILGPU.Algorithms.Random.RNGView{`0},ILGPU.ArrayView{`1})">
            <summary>
            Constructs a new fill kernel.
            </summary>
            <param name="rngView">
            The RNG view that references the associated RNG instances per warp.
            </param>
            <param name="target">The target view to write to.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.RNG`1.FillKernelBody`2.RNGView">
            <summary>
            The underlying RNG view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Random.RNG`1.FillKernelBody`2.Target">
            <summary>
            The target view to write to.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.FillKernelBody`2.Execute(ILGPU.LongIndex1D)">
            <summary>
            Executes the intended RNG using the <see cref="P:ILGPU.Algorithms.Random.RNG`1.FillKernelBody`2.RNGView"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.FillKernelBody`2.Finish">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.Random.RNG`1.randomProvidersPerWarp">
            <summary>
            Stores a single RNG instance per warp.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.#ctor(ILGPU.Runtime.Accelerator,System.Random)">
            <summary>
            Constructs an RNG using the given provider instance.
            </summary>
            <param name="accelerator">The current accelerator.</param>
            <param name="random">The parent RNG provider.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.#ctor(ILGPU.Runtime.Accelerator,System.Random,System.Int32)">
            <summary>
            Constructs an RNG using the given provider instance.
            </summary>
            <param name="accelerator">The current accelerator.</param>
            <param name="random">The parent RNG provider.</param>
            <param name="maxNumParallelWarps">
            The maximum number of parallel warps.
            </param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.RNG`1.MaxNumParallelWarps">
            <summary>
            Returns the maximum number of parallel warps.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Random.RNG`1.LengthInBytes">
            <summary>
            Returns the length in bytes of the underlying memory buffer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.GetViewViaThreads(System.Int32)">
            <summary>
            Gets a compatible RNG view via a desired number of threads.
            </summary>
            <param name="numThreads">The maximum number of parallel threads.</param>
            <returns>The RNG view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.GetView(System.Int32)">
            <summary>
            Gets a compatible RNG view via a desired number of warps.
            </summary>
            <param name="numWarps">The maximum number of parallel warps.</param>
            <returns>The RNG view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.Fill``2(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0})">
            <summary>
            Fills the given view with random values based on the
            <typeparamref name="TOperation"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TOperation">The RNG operation type.</typeparam>
            <param name="stream">The current stream.</param>
            <param name="view">The target view.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int32})">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int32})"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int64})">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int64})"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Single})">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Single})"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Double})">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Double})"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.RNG`1.DisposeAcceleratorObject(System.Boolean)">
            <inheritdoc cref="M:ILGPU.Runtime.AcceleratorObject.DisposeAcceleratorObject(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Algorithms.Random.ThreadWiseRNG`1">
            <summary>
            Represents a single RNG instance per thread stored separately in a memory buffer.
            </summary>
            <typeparam name="TRandomProvider">The underlying RNG provider type.</typeparam>
        </member>
        <member name="F:ILGPU.Algorithms.Random.ThreadWiseRNG`1.randomProviders">
            <summary>
            Stores a single RNG instance per thread.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.ThreadWiseRNG`1.#ctor(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.LongIndex1D,System.Random,System.Int32)">
            <summary>
            Constructs an RNG using the given provider instance.
            </summary>
            <param name="accelerator">The current accelerator.</param>
            <param name="stream">The current accelerator stream.</param>
            <param name="maxNumThreads">The maximum number of parallel threads.</param>
            <param name="random">The parent RNG provider.</param>
            <param name="numInitializers">
            The maximum number of initializers used on the CPU side.
            </param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.ThreadWiseRNG`1.RNGView">
            <summary>
            Returns the underlying RNG view.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.ThreadWiseRNG`1.Dispose(System.Boolean)">
            <summary>
            Frees the underlying RNG buffers.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.Random.XorShift128">
            <summary>
            Implements a simple and fast xor-shift rng.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Xorshift</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.Create(System.Random)">
            <summary>
            Creates a new rng instance with the help of a CPU-based rng.
            </summary>
            <param name="random">The desired rng.</param>
            <returns>A new rng instance.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Constructs a new rng instance.
            </summary>
            <param name="state0">The initial state value 0.</param>
            <param name="state1">The initial state value 1.</param>
            <param name="state2">The initial state value 2.</param>
            <param name="state3">The initial state value 3.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128.State0">
            <summary>
            The internal state value 0.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128.State1">
            <summary>
            The internal state value 1.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128.State2">
            <summary>
            The internal state value 2.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128.State3">
            <summary>
            The internal state value 3.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.NextUInt">
            <summary>
            Generates a random uint in [0..uint.MaxValue].
            </summary>
            <returns>A random uint in [0..uint.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.NextULong">
            <summary>
            Generates a random ulong in [0..ulong.MaxValue].
            </summary>
            <returns>A random ulong in [0..ulong.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.Next">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.Next"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.NextLong">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextLong"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.NextFloat">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextFloat"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.NextDouble">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextDouble"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.ShiftPeriod(System.Int32)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.ShiftPeriod(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.NextProvider">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.NextProvider"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.CreateProvider(System.Random)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.CreateProvider(System.Random)"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.CreateProvider``1(``0@)">
            <summary>
            Creates a new provider based on the input instance.
            </summary>
            <param name="random">The random instance.</param>
            <returns>The created provider.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.Equals(ILGPU.Algorithms.Random.XorShift128)">
            <summary>
            Returns true if the given object is equal to the current rng.
            </summary>
            <param name="other">The other rng to test.</param>
            <returns>True, if the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.GetHashCode">
            <summary>
            Returns the hash code of this rng.
            </summary>
            <returns>The hash code of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current rng.
            </summary>
            <param name="obj">The other rng to test.</param>
            <returns>True, if the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.ToString">
            <summary>
            Returns the string representation of this rng.
            </summary>
            <returns>The string representation of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.op_Equality(ILGPU.Algorithms.Random.XorShift128,ILGPU.Algorithms.Random.XorShift128)">
            <summary>
            Returns true if the first and second rng are the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, if the first and second rng are the same.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128.op_Inequality(ILGPU.Algorithms.Random.XorShift128,ILGPU.Algorithms.Random.XorShift128)">
            <summary>
            Returns true if the first and second rng are not the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, if the first and second rng are not the same.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.XorShift128Plus">
            <summary>
            Implements a simple and fast xor-shift rng.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Xorshift</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.Create(System.Random)">
            <summary>
            Creates a new rng instance with the help of a CPU-based rng.
            </summary>
            <param name="random">The desired rng.</param>
            <returns>A new rng instance.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Constructs a new rng instance.
            </summary>
            <param name="state0">The initial state value 0.</param>
            <param name="state1">The initial state value 1.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128Plus.State0">
            <summary>
            The internal state value 0.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift128Plus.State1">
            <summary>
            The internal state value 1.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.NextULong">
            <summary>
            Generates a random ulong in [0..ulong.MaxValue].
            </summary>
            <returns>A random ulong in [0..ulong.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.NextUInt">
            <summary>
            Generates a random uint in [0..uint.MaxValue].
            </summary>
            <returns>A random uint in [0..uint.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.Next">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.Next"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.NextLong">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextLong"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.NextFloat">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextFloat"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.NextDouble">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextDouble"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.ShiftPeriod(System.Int32)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.ShiftPeriod(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.NextProvider">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.NextProvider"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.CreateProvider(System.Random)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.CreateProvider(System.Random)"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.CreateProvider``1(``0@)">
            <summary>
            Creates a new provider based on the input instance.
            </summary>
            <param name="random">The random instance.</param>
            <returns>The created provider.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.Equals(ILGPU.Algorithms.Random.XorShift128Plus)">
            <summary>
            Returns true if the given object is equal to the current rng.
            </summary>
            <param name="other">The other rng to test.</param>
            <returns>True, if the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.GetHashCode">
            <summary>
            Returns the hash code of this rng.
            </summary>
            <returns>The hash code of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current rng.
            </summary>
            <param name="obj">The other rng to test.</param>
            <returns>True, if the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.ToString">
            <summary>
            Returns the string representation of this rng.
            </summary>
            <returns>The string representation of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.op_Equality(ILGPU.Algorithms.Random.XorShift128Plus,ILGPU.Algorithms.Random.XorShift128Plus)">
            <summary>
            Returns true if the first and second rng are the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, if the first and second rng are the same.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift128Plus.op_Inequality(ILGPU.Algorithms.Random.XorShift128Plus,ILGPU.Algorithms.Random.XorShift128Plus)">
            <summary>
            Returns true if the first and second rng are not the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, if the first and second rng are not the same.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.XorShift32">
            <summary>
            Implements a simple and fast xor-shift rng.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Xorshift</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.Create(System.Random)">
            <summary>
            Creates a new rng instance with the help of a CPU-based rng.
            </summary>
            <param name="random">The desired rng.</param>
            <returns>A new rng instance.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.#ctor(System.UInt32)">
            <summary>
            Constructs a new rng instance.
            </summary>
            <param name="state">The initial state value.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift32.State">
            <summary>
            The internal state value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.NextUInt">
            <summary>
            Generates a random uint in [0..uint.MaxValue].
            </summary>
            <returns>A random uint in [0..uint.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.NextULong">
            <summary>
            Generates a random ulong in [0..ulong.MaxValue].
            </summary>
            <returns>A random ulong in [0..ulong.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.Next">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.Next"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.NextLong">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextLong"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.NextFloat">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextFloat"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.NextDouble">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextDouble"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.ShiftPeriod(System.Int32)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.ShiftPeriod(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.NextProvider">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.NextProvider"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.CreateProvider(System.Random)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.CreateProvider(System.Random)"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.CreateProvider``1(``0@)">
            <summary>
            Creates a new provider based on the input instance.
            </summary>
            <param name="random">The random instance.</param>
            <returns>The created provider.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.Equals(ILGPU.Algorithms.Random.XorShift32)">
            <summary>
            Returns true if the given object is equal to the current rng.
            </summary>
            <param name="other">The other rng to test.</param>
            <returns>True, if the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.GetHashCode">
            <summary>
            Returns the hash code of this rng.
            </summary>
            <returns>The hash code of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current rng.
            </summary>
            <param name="obj">The other rng to test.</param>
            <returns>True, if the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.ToString">
            <summary>
            Returns the string representation of this rng.
            </summary>
            <returns>The string representation of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.op_Equality(ILGPU.Algorithms.Random.XorShift32,ILGPU.Algorithms.Random.XorShift32)">
            <summary>
            Returns true if the first and second rng are the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, if the first and second rng are the same.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift32.op_Inequality(ILGPU.Algorithms.Random.XorShift32,ILGPU.Algorithms.Random.XorShift32)">
            <summary>
            Returns true if the first and second rng are not the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, if the first and second rng are not the same.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Random.XorShift64Star">
            <summary>
            Implements a simple and fast xor-shift rng.
            </summary>
            <remarks>https://en.wikipedia.org/wiki/Xorshift</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.Create(System.Random)">
            <summary>
            Creates a new rng instance with the help of a CPU-based rng.
            </summary>
            <param name="random">The desired rng.</param>
            <returns>A new rng instance.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.#ctor(System.UInt64)">
            <summary>
            Constructs a new rng instance.
            </summary>
            <param name="state">The initial state value.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Random.XorShift64Star.State">
            <summary>
            The internal state value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.NextULong">
            <summary>
            Generates a random ulong in [0..ulong.MaxValue].
            </summary>
            <returns>A random ulong in [0..ulong.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.NextUInt">
            <summary>
            Generates a random uint in [0..uint.MaxValue].
            </summary>
            <returns>A random uint in [0..uint.MaxValue].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.Next">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.Next"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.NextLong">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextLong"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.NextFloat">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextFloat"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.NextDouble">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider.NextDouble"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.ShiftPeriod(System.Int32)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.ShiftPeriod(System.Int32)"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.NextProvider">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.NextProvider"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.CreateProvider(System.Random)">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.IRandomProvider`1.CreateProvider(System.Random)"/>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.CreateProvider``1(``0@)">
            <summary>
            Creates a new provider based on the input instance.
            </summary>
            <param name="random">The random instance.</param>
            <returns>The created provider.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.Equals(ILGPU.Algorithms.Random.XorShift64Star)">
            <summary>
            Returns true if the given object is equal to the current rng.
            </summary>
            <param name="other">The other rng to test.</param>
            <returns>True, if the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.GetHashCode">
            <summary>
            Returns the hash code of this rng.
            </summary>
            <returns>The hash code of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.Equals(System.Object)">
            <summary>
            Returns true if the given object is equal to the current rng.
            </summary>
            <param name="obj">The other rng to test.</param>
            <returns>True, if the given object is equal to the current rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.ToString">
            <summary>
            Returns the string representation of this rng.
            </summary>
            <returns>The string representation of this rng.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.op_Equality(ILGPU.Algorithms.Random.XorShift64Star,ILGPU.Algorithms.Random.XorShift64Star)">
            <summary>
            Returns true if the first and second rng are the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, if the first and second rng are the same.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Random.XorShift64Star.op_Inequality(ILGPU.Algorithms.Random.XorShift64Star,ILGPU.Algorithms.Random.XorShift64Star)">
            <summary>
            Returns true if the first and second rng are not the same.
            </summary>
            <param name="first">The first rng.</param>
            <param name="second">The second rng.</param>
            <returns>True, if the first and second rng are not the same.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Reduction`2">
            <summary>
            Represents a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TStride">The 1D stride of the source view.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <param name="output">The output view to store the reduced value.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ReductionExtensions">
            <summary>
            Reduction functionality for accelerators.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.ReductionExtensions.ReductionImplementation`3">
            <summary>
            A actual raw reduction implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the source view.</typeparam>
            <typeparam name="TReduction">The type of the reduction to use.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.ReductionImplementation`3.GetReduction">
            <summary>
            Creates a new reduction instance.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.ReductionImplementation`3.#ctor(ILGPU.Runtime.ArrayView1D{`0,`1},ILGPU.ArrayView{`0})">
            <summary>
            Creates a new reduction implementation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view (1 element min).</param>
        </member>
        <member name="P:ILGPU.Algorithms.ReductionExtensions.ReductionImplementation`3.Input">
            <summary>
            Returns the source view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ReductionExtensions.ReductionImplementation`3.Output">
            <summary>
            Returns the output view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ReductionExtensions.ReductionImplementation`3.ReducedValue">
            <summary>
            Stores the current intermediate result of this thread.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.ReductionImplementation`3.Execute(ILGPU.LongIndex1D)">
            <summary>
            Reduces each element in a grid-stride loop.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.ReductionImplementation`3.Finish">
            <summary>
            Finished a group-wide reduction operation using shuffles, shared memory
            and atomic operations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.CreateReduction``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new instance of a reduction handler.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TStride">The 1D stride of the source view.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created reduction handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.Reduce``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``0})">
            <summary>
            Performs a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <param name="output">The output view to store the reduced value.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.Reduce``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0})">
            <summary>
            Performs a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <remarks>
            Uses the internal cache to realize a temporary output buffer.
            </remarks>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.ReduceAsync``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0})">
            <summary>
            Performs a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <remarks>
            Uses the internal cache to realize a temporary output buffer.
            </remarks>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.Reduce``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{``0})">
            <summary>
            Performs a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TStride">The 1D stride of the input view.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <param name="output">The output view to store the reduced value.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.Reduce``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1})">
            <summary>
            Performs a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TStride">The 1D stride of the input view.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <remarks>
            Uses the internal cache to realize a temporary output buffer.
            </remarks>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ReductionExtensions.ReduceAsync``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1})">
            <summary>
            Performs a reduction using a reduction logic.
            </summary>
            <typeparam name="T">The underlying type of the reduction.</typeparam>
            <typeparam name="TStride">The 1D stride of the input view.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to reduce.</param>
            <remarks>
            Uses the internal cache to realize a temporary output buffer.
            </remarks>
            <returns>The reduced value.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.ReorderTransformer`3">
            <summary>
            Reorders and transforms elements in the source view by storing the reordered
            elements in the target view. The values are reordered according to:
            target(idx) = transform(source(reorderView(idx))).
            </summary>
            <typeparam name="TSource">
            The source type of the elements to reorder and transform.
            </typeparam>
            <typeparam name="TTarget">
            The target type of the elements that have been transformed.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="reorderView">
            The view of indices such that target(idx) = transform(source(reorderView(idx))).
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ReorderExtensions">
            <summary>
            Reorder functionality for accelerators.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.ReorderExtensions.ReorderTransformWrapper`3">
            <summary>
            Represents a transformer that is used for reordering and transforming
            elements of type <typeparamref name="TSource"/> to elements of type
            <typeparamref name="TTarget"/> using a transformer of type
            <typeparamref name="TTransformer"/>.
            </summary>
            <typeparam name="TSource">
            The source type of the elements to transform.
            </typeparam>
            <typeparam name="TTarget">
            The target type of the elements that have been transformed.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.ReorderTransformWrapper`3.#ctor(ILGPU.ArrayView{`0},`2@)">
            <summary>
            Constructs a new reorder transformer.
            </summary>
            <param name="view">The source elements.</param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="P:ILGPU.Algorithms.ReorderExtensions.ReorderTransformWrapper`3.SourceView">
            <summary>
            Returns the source view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.ReorderExtensions.ReorderTransformWrapper`3.Transformer">
            <summary>
            Returns the underlying transformer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.ReorderTransformWrapper`3.Transform(ILGPU.Index1D)">
            <summary cref="M:ILGPU.Algorithms.ITransformer`2.Transform(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.CreateReorderTransformer``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a reorder transformer that is defined by the given source and target
            type and the specified transformer type.
            </summary>
            <typeparam name="TSource">
            The source value type of the transformation.
            </typeparam>
            <typeparam name="TTarget">
            The target value type of the transformation.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.Reorder``1(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.ArrayView{ILGPU.Index1D})">
            <summary>
            Reorders elements in the source view by storing the reordered elements in the
            target view. The values are reordered according to:
            target(idx) = source(reorderView(idx)).
            </summary>
            <typeparam name="T">The type of the elements to reorder.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="reorderView">
            The view of indices such that target(idx) = source(reorderView(idx)).
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.ReorderTransform``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},ILGPU.ArrayView{ILGPU.Index1D},``1)">
            <summary>
            Reorders and transforms elements in the source view by storing the reordered
            elements in the target view. The values are reordered according to:
            target(idx) = transform(source(reorderView(idx))).
            </summary>
            <typeparam name="T">
            The type of the elements to reorder and transform.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="reorderView">
            The view of indices such that target(idx) =
            transform(source(reorderView(idx))).
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ReorderExtensions.ReorderTransform``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``1},ILGPU.ArrayView{ILGPU.Index1D},``2)">
            <summary>
            Reorders and transforms elements in the source view by storing the reordered
            elements in the target view. The values are reordered according to:
            target(idx) = transform(source(reorderView(idx))).
            </summary>
            <typeparam name="TSource">
            The source type of the elements to reorder and transform.
            </typeparam>
            <typeparam name="TTarget">
            The target type of the elements that have been transformed.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="reorderView">
            The view of indices such that target(idx) =
            transform(source(reorderView(idx))).
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.Resources.ErrorMessages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.NotSupportedArrayView64">
            <summary>
              Looks up a localized string similar to This function does not currently support ArrayViews of length &gt; int.MaxValue..
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.NotSupportedCuRandAPI">
            <summary>
              Looks up a localized string similar to Not supported cuRAND API platform..
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.NotSupportedNumberOfRadixSortBits">
            <summary>
              Looks up a localized string similar to Not supported number of radix sort bits..
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.TempViewManagerUnalignedAllocation">
            <summary>
              Looks up a localized string similar to The allocation of type &apos;{0}&apos; is not correctly aligned. Requires &apos;{1}&apos; byte alignment but was allocated at byte offset &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Resources.ErrorMessages.ViewOutOfRange">
            <summary>
              Looks up a localized string similar to The {0} view is larger than the {1} view..
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.ScanKind">
            <summary>
            Represents the scan operation type.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.ScanKind.Inclusive">
            <summary>
            An inclusive scan operation.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.ScanKind.Exclusive">
            <summary>
            An exclusive scan operation.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.Scan`3">
            <summary>
            Represents a scan operation using a shuffle and operation logic.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to scan.</param>
            <param name="output">The output view to store the scanned values.</param>
            <param name="temp">The temp view to store temporary results.</param>
        </member>
        <member name="T:ILGPU.Algorithms.BufferedScan`3">
            <summary>
            Represents a scan operation using a shuffle and operation logic.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input elements to scan.</param>
            <param name="output">The output view to store the scanned values.</param>
        </member>
        <member name="T:ILGPU.Algorithms.ScanProvider">
            <summary>
            Represents a scan provider for a scan operation.
            </summary>
            <remarks>Members of this class are not thread safe.</remarks>
        </member>
        <member name="M:ILGPU.Algorithms.ScanProvider.CreateScan``4(ILGPU.Algorithms.ScanKind)">
            <summary>
            Creates a new buffered scan operation.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <typeparam name="TScanOperation">The type of the scan operation.</typeparam>
            <param name="kind">The scan kind.</param>
            <returns>The created scan handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanProvider.DisposeAcceleratorObject(System.Boolean)">
            <inheritdoc cref="M:ILGPU.Runtime.AcceleratorObject.DisposeAcceleratorObject(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Algorithms.ScanExtensions">
            <summary>
            Contains extension methods for scan operations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ComputeScanTempStorageSize``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D)">
            <summary>
            Computes the required number of temp-storage elements of type
            <typeparamref name="T"/> for a scan operation and the given data length.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">The number of data elements to scan.</param>
            <returns>The required number of temp-storage elements in 32 bit ints.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2">
            <summary>
            An abstract scan implementation that implements required low-level scan
            functionality.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2.AllReduce(`0)">
            <summary>
            Performs an all-reduction for all threads in the current group.
            </summary>
            <param name="value">The value from the current thread.</param>
            <returns>The reduced value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2.NextIteration(`0,`0,`0)">
            <summary>
            Prepares all threads in the current group for the next iteration
            of a multi-iteration scan.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.ScanExtensions.InclusiveScanImplementation`2">
            <summary>
            An inclusive-scan implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.InclusiveScanImplementation`2.Scan(`0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.InclusiveScanImplementation`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.InclusiveScanImplementation`2.AllReduce(`0)">
            <summary cref="M:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2.AllReduce(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.InclusiveScanImplementation`2.NextIteration(`0,`0,`0)">
            <summary cref="M:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2.NextIteration(`0,`0,`0)"/>
        </member>
        <member name="T:ILGPU.Algorithms.ScanExtensions.ExclusiveScanImplementation`2">
            <summary>
            An exclusive-scan implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ExclusiveScanImplementation`2.Scan(`0)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ExclusiveScanImplementation`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)">
            <summary cref="M:ILGPU.Algorithms.GroupExtensions.IGroupScan`2.Scan(`0,ILGPU.Algorithms.ScanReduceOperations.ScanBoundaries{`0}@)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ExclusiveScanImplementation`2.AllReduce(`0)">
            <summary cref="M:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2.AllReduce(`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ExclusiveScanImplementation`2.NextIteration(`0,`0,`0)">
            <summary cref="M:ILGPU.Algorithms.ScanExtensions.IScanImplementation`2.NextIteration(`0,`0,`0)"/>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ComputeTileRightBoundary``4(ILGPU.Algorithms.TileInfo,ILGPU.Runtime.ArrayView1D{``0,``1})">
            <summary>
            Computes the right tile boundary.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TScanOperation">The scan-operation type.</typeparam>
            <typeparam name="TGroupScanImplementation">
            The group-scan implementation type.
            </typeparam>
            <param name="tileInfo">The current tile info.</param>
            <param name="input">The input view.</param>
            <returns>The resolved right boundary for all threads in the group.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ComputeTileScan``5(ILGPU.Algorithms.TileInfo,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.Runtime.ArrayView1D{``0,``2},``0)">
            <summary>
            Computes a single scan within a single tile.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <typeparam name="TScanOperation">The scan-operation type.</typeparam>
            <typeparam name="TGroupScanImplementation">
            The group-scan implementation type.
            </typeparam>
            <param name="tileInfo">The current tile info.</param>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
            <param name="leftBoundary">
            The left boundary (e.g. of the previous tile).
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.SingleGroupScanKernel``5(ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.Runtime.ArrayView1D{``0,``2})">
            <summary>
            Performs a scan operation within a single group only.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TGroupScanImplementation">
            The actual group-scan implementation that provides the required group-level
            functionality.
            </typeparam>
            <param name="input">The input elements to scan.</param>
            <param name="output">The output view to store the scanned values.</param>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateSingleGroupScan``4(ILGPU.Runtime.Accelerator,ILGPU.Algorithms.ScanKind)">
            <summary>
            Creates a new single group scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="kind">The scan kind.</param>
            <returns>The created scan operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.SinglePassScanKernel``5(ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.Runtime.ArrayView1D{``0,``2},ILGPU.Algorithms.SequentialGroupExecutor,ILGPU.VariableView{``0},ILGPU.Index1D)">
            <summary>
            Performs a scan operation with a single pass.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TGroupScanImplementation">
            The actual group-scan implementation that provides the required group-level
            functionality.
            </typeparam>
            <param name="input">The input elements to scan.</param>
            <param name="output">The output view to store the scanned values.</param>
            <param name="sequentialGroupExecutor">
            The sequential group executor to use.
            </param>
            <param name="boundaryValue">
            The boundary value target in global memory to share intermediate results.
            </param>
            <param name="numIterationsPerGroup">
            The number of iterations per group.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.ComputeNumIntElementsForSinglePassScan``1">
            <summary>
            Computes the required number of elements of size <see cref="T:System.Int32"/>.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <returns>
            The required number of <see cref="T:System.Int32"/> elements in temporary memory.
            </returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateSinglePassScan``4(ILGPU.Runtime.Accelerator,ILGPU.Algorithms.ScanKind)">
            <summary>
            Creates a new single pass scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="kind">The scan kind.</param>
            <returns>The created scan operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.MultiPassScanKernel1``4(ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{``0},ILGPU.Index1D)">
            <summary>
            Performs the first pass in the scope of a multi-pass scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TGroupScanImplementation">
            The actual group-scan implementation that provides the required group-level
            functionality.
            </typeparam>
            <param name="input">The input elements to scan.</param>
            <param name="rightBoundaries">The right boundaries to store.</param>
            <param name="numIterationsPerGroup">
            The number of iterations per group.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.MultiPassScanKernel2``5(ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.ArrayView{``0},ILGPU.Runtime.ArrayView1D{``0,``2},ILGPU.Index1D)">
            <summary>
            Performs the second pass in the scope of a multi-pass scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <typeparam name="TGroupScanImplementation">
            The actual group-scan implementation that provides the required group-level
            functionality.
            </typeparam>
            <param name="input">The input elements to scan.</param>
            <param name="rightBoundaries">The right boundaries to use.</param>
            <param name="output">The scanned values.</param>
            <param name="numIterationsPerGroup">
            The number of iterations per group.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateMultiPassScan``4(ILGPU.Runtime.Accelerator,ILGPU.Algorithms.ScanKind)">
            <summary>
            Creates a new multi pass scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <typeparam name="TScanOperation">The scan operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="kind">The scan kind.</param>
            <returns>The created scan operation.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateScan``4(ILGPU.Runtime.Accelerator,ILGPU.Algorithms.ScanKind)">
            <summary>
            Creates a new scan operation.
            </summary>
            <typeparam name="T">The underlying type of the scan operation.</typeparam>
            <typeparam name="TStrideIn">The stride of the input view.</typeparam>
            <typeparam name="TStrideOut">The stride of the output view.</typeparam>
            <typeparam name="TScanOperation">The type of the scan operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="kind">The scan kind.</param>
            <returns>The created scan handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateScanProvider(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D)">
            <summary>
            Creates a new specialized scan provider that has its own cache.
            Note that the resulting provider has to be disposed manually.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">The expected maximum data length to scan.</param>
            <returns>The created provider.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.ScanExtensions.CreateScanProvider``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D)">
            <summary>
            Creates a new specialized scan provider that has its own cache.
            Note that the resulting provider has to be disposed manually.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">
            The expected maximum data length to scan of a particular element type.
            </param>
            <returns>The created provider.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Sequencer`3">
            <summary>
            Computes a new sequence of values from 0 to view.Length - 1 and writes
            the computed values to the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.BatchedSequencer`3">
            <summary>
            Computes a new sequence of batched values of length sequenceBatchLength, and
            writes the computed values to the given view. Afterwards, the target view will
            contain the following values:
            - [0, sequenceBatchLength - 1] = 0,,
            - [sequenceBatchLength, sequenceBatchLength * 2 -1] = 1,
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceBatchLength">The length of a single batch.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RepeatedSequencer`3">
            <summary>
            Computes a new repeated sequence of values from 0 to sequenceLength, from 0 to
            sequenceLength, ... and writes the computed values to the given view. Afterwards,
            the target view will contain the following values:
            - [0, sequenceLength - 1] = [0, sequenceLength]
            - [sequenceLength, sequenceLength * 2 -1] = [0, sequenceLength]
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of a single sequence.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.RepeatedBatchedSequencer`3">
            <summary>
            Computes a new repeated sequence (of length sequenceLength) of batched values (of
            length sequenceBatchLength), and writes the computed values to the given view.
            Afterwards, the target view will contain the following values:
            - [0, sequenceLength - 1] =
                  - [0, sequenceBatchLength - 1] = sequencer(0),
                  - [sequenceBatchLength, sequenceBatchLength * 2 - 1] = sequencer(1),
                  - ...
            - [sequenceLength, sequenceLength * 2 - 1]
                  - [sequenceLength, sequenceLength + sequenceBatchLength - 1] = sequencer(0),
                  - [sequenceLength + sequenceBatchLength,
                     sequenceLength + sequenceBatchLength * 2 - 1] = sequencer(1),
                  - ...
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of a single sequence.</param>
            <param name="sequenceBatchLength">The length of a single batch.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.SequenceExtensions">
            <summary>
            Sequencer functionality for accelerators.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.SequenceExtensions.SequenceImplementation`3">
            <summary>
            A actual raw sequencer implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the target view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.SequenceImplementation`3.#ctor(ILGPU.LongIndex1D,ILGPU.LongIndex1D,ILGPU.Runtime.ArrayView1D{`0,`1},`2)">
            <summary>
            Creates a new sequence implementation.
            </summary>
            <param name="sequenceLength">The length of the sequence.</param>
            <param name="sequenceBatchLength">
            The length of a single batch within a sequence.
            </param>
            <param name="sequencer">The sequencer instance.</param>
            <param name="view">The parent target view.</param>
        </member>
        <member name="P:ILGPU.Algorithms.SequenceExtensions.SequenceImplementation`3.SequenceLength">
            <summary>
            Returns length of the sequence.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.SequenceExtensions.SequenceImplementation`3.SequenceBatchLength">
            <summary>
            The length of a single batch within a sequence.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.SequenceExtensions.SequenceImplementation`3.View">
            <summary>
            Returns the target view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.SequenceExtensions.SequenceImplementation`3.Sequencer">
            <summary>
            Returns the sequencer instance.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.SequenceImplementation`3.Execute(ILGPU.LongIndex1D)">
            <summary>
            Executes this sequencer wrapper.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.SequenceImplementation`3.Finish">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.CreateRawSequencer``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a raw sequencer that is defined by the given element type and the type
            of the sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the target view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded sequencer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.CreateSequencer``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a sequencer that is defined by the given element type and the type of
            the sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the target view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded sequencer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.CreateBatchedSequencer``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a batched sequencer that is defined by the given element type and the
            type of the sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the target view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded sequencer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.CreateRepeatedSequencer``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a repeated sequencer that is defined by the given element type and the
            type of the sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the target view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded sequencer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.CreateRepeatedBatchedSequencer``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a repeated batched sequencer that is defined by the given element type
            and the type of the sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of all views.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded sequencer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.Sequence``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},``1)">
            <summary>
            Computes a new sequence of values from 0 to view.Length - 1 and writes
            the computed values to the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.RepeatedSequence``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.LongIndex1D,``1)">
            <summary>
            Computes a new repeated sequence of values from 0 to sequenceLength, from 0 to
            sequenceLength, ... and writes the computed values to the given view.
            Afterwards, the target view will contain the following values:
            - [0, sequenceLength - 1] = [0, sequenceLength]
            - [sequenceLength, sequenceLength * 2 -1] = [0, sequenceLength]
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of a single sequence.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.BatchedSequence``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.LongIndex1D,``1)">
            <summary>
            Computes a new sequence of batched values of length sequenceBatchLength, and
            writes the computed values to the given view. Afterwards, the target view will
            contain the following values:
            - [0, sequenceBatchLength - 1] = 0,,
            - [sequenceBatchLength, sequenceBatchLength * 2 -1] = 1,
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceBatchLength">The length of a single batch.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.RepeatedBatchedSequence``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.LongIndex1D,ILGPU.LongIndex1D,``1)">
            <summary>
            Computes a new repeated sequence (of length sequenceLength) of batched values
            (of length sequenceBatchLength), and writes the computed values to the given
            view. Afterwards, the target view will contain the following values:
            - [0, sequenceLength - 1] = 
                  - [0, sequenceBatchLength - 1] = sequencer(0),
                  - [sequenceBatchLength, sequenceBatchLength * 2 - 1] = sequencer(1),
                  - ...
            - [sequenceLength, sequenceLength * 2 - 1]
                  - [sequenceLength,
                     sequenceLength + sequenceBatchLength - 1] = sequencer(0),
                  - [sequenceLength + sequenceBatchLength,
                     sequenceLength + sequenceBatchLength * 2 - 1] = sequencer(1),
                  - ...
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of a single sequence.</param>
            <param name="sequenceBatchLength">The length of a single batch.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.Sequence``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},``2)">
            <summary>
            Computes a new sequence of values from 0 to view.Length - 1 and writes
            the computed values to the given view.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.RepeatedSequence``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.LongIndex1D,``2)">
            <summary>
            Computes a new repeated sequence of values from 0 to sequenceLength, from 0 to
            sequenceLength, ... and writes the computed values to the given view.
            Afterwards, the target view will contain the following values:
            - [0, sequenceLength - 1] = [0, sequenceLength]
            - [sequenceLength, sequenceLength * 2 -1] = [0, sequenceLength]
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of a single sequence.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.BatchedSequence``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.LongIndex1D,``2)">
            <summary>
            Computes a new sequence of batched values of length sequenceBatchLength, and
            writes the computed values to the given view. Afterwards, the target view will
            contain the following values:
            - [0, sequenceBatchLength - 1] = 0,,
            - [sequenceBatchLength, sequenceBatchLength * 2 -1] = 1,
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceBatchLength">The length of a single batch.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.SequenceExtensions.RepeatedBatchedSequence``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.LongIndex1D,ILGPU.LongIndex1D,``2)">
            <summary>
            Computes a new repeated sequence (of length sequenceLength) of batched values
            (of length sequenceBatchLength), and writes the computed values to the given
            view. Afterwards, the target view will contain the following values:
            - [0, sequenceLength - 1] = 
                  - [0, sequenceBatchLength - 1] = sequencer(0),
                  - [sequenceBatchLength, sequenceBatchLength * 2 - 1] = sequencer(1),
                  - ...
            - [sequenceLength, sequenceLength * 2 - 1]
                  - [sequenceLength,
                     sequenceLength + sequenceBatchLength - 1] = sequencer(0),
                  - [sequenceLength + sequenceBatchLength,
                     sequenceLength + sequenceBatchLength * 2 - 1] = sequencer(1),
                  - ...
            - ...
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The 1D stride of the view.</typeparam>
            <typeparam name="TSequencer">The type of the sequencer to use.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="view">The target view.</param>
            <param name="sequenceLength">The length of a single sequence.</param>
            <param name="sequenceBatchLength">The length of a single batch.</param>
            <param name="sequencer">The used sequencer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.ISequencer`1">
            <summary>
            Represents an abstract interface for a sequencer.
            </summary>
            <typeparam name="T">The sequence element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary>
            Computes the sequence element for the corresponding
            <paramref name="sequenceIndex"/>.
            </summary>
            <param name="sequenceIndex">
            The sequence index for the computation of the corresponding value.
            </param>
            <returns>The computed sequence value.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.IndexSequencer">
            <summary>
            Represents an identity implementation of an index sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.IndexSequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.HalfSequencer">
            <summary>
            Represents an identity implementation of a half sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.HalfSequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.FloatSequencer">
            <summary>
            Represents an identity implementation of a float sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.FloatSequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.DoubleSequencer">
            <summary>
            Represents an identity implementation of a double sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.DoubleSequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.ViewSourceSequencer`2">
            <summary>
            Represents a sequencer that wraps an array view in a sequencer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TStride">The stride of the underlying view.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.ViewSourceSequencer`2.#ctor(ILGPU.Runtime.ArrayView1D{`0,`1})">
            <summary>
            Constructs a new sequencer.
            </summary>
            <param name="viewSource">The underlying view source.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Sequencers.ViewSourceSequencer`2.ViewSource">
            <summary>
            Returns the data source of this sequence.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.ViewSourceSequencer`2.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary>
            Returns the i-th element of the attached <see cref="P:ILGPU.Algorithms.Sequencers.ViewSourceSequencer`2.ViewSource"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.Int8Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.Int8Sequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.Int16Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.Int16Sequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.Int32Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.Int32Sequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.Int64Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.Int64Sequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.UInt8Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.UInt8Sequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.UInt16Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.UInt16Sequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.UInt32Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.UInt32Sequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.Sequencers.UInt64Sequencer">
            <summary>
            Represents an identity implementation of a sequencer.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.Sequencers.UInt64Sequencer.ComputeSequenceElement(ILGPU.LongIndex1D)">
            <summary cref="M:ILGPU.Algorithms.Sequencers.ISequencer`1.ComputeSequenceElement(ILGPU.LongIndex1D)" />
        </member>
        <member name="T:ILGPU.Algorithms.SequentialGroupExecutor">
            <summary>
            Realizes a seqential group-execution pattern via a device-wide barrier.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor.#ctor(ILGPU.VariableView{System.Int32})">
            <summary>
            Constructs a new sequential group executor.
            </summary>
            <param name="fieldAddress">
            The target field address in global memory to use.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor.Reset">
            <summary>
            Resets the internal state.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor.Wait">
            <summary>
            Waits for all previous groups to finish.
            </summary>
            <remarks>
            Caution: ensure that the internal state is reset before calling the
            <see cref="M:ILGPU.Algorithms.SequentialGroupExecutor.Wait"/> method.
            </remarks>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor.Release">
            <summary>
            Signals the next group to continue processing.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.SequentialGroupExecutor`1">
            <summary>
            Realizes a sequential group-execution pattern via a device-wide barrier
            that can pass an element of type <typeparamref name="T"/> to another group.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor`1.#ctor(ILGPU.VariableView{System.Int32},ILGPU.VariableView{`0})">
            <summary>
            Constructs a new sequential group executor.
            </summary>
            <param name="executorView">
            The target field address in global memory to use.
            </param>
            <param name="dataView">
            The target data address in global memory to use.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor`1.Reset">
            <summary>
            Resets the internal state.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor`1.Wait">
            <summary>
            Waits for all previous groups to finish.
            </summary>
            <returns>The value from the previous group.</returns>
            <remarks>
            Caution: ensure that the internal state is reset before calling the
            <see cref="M:ILGPU.Algorithms.SequentialGroupExecutor`1.Wait"/> method.
            </remarks>
        </member>
        <member name="M:ILGPU.Algorithms.SequentialGroupExecutor`1.Release(`0)">
            <summary>
            Signals the next group to continue processing.
            </summary>
            <param name="value">The value that should be passed to the next group.</param>
        </member>
        <member name="T:ILGPU.Algorithms.TempViewManager">
            <summary>
            Simplifies the subsequent splitting of a temporary memory view
            into smaller chunks.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.TempViewManager.#ctor(ILGPU.ArrayView{System.Int32},System.String)">
            <summary>
            Constructs a new temp-view manager.
            </summary>
            <param name="tempView">The source temp view to use.</param>
            <param name="paramName">
            The associated parameter name (for error messages).
            </param>
        </member>
        <member name="P:ILGPU.Algorithms.TempViewManager.NumInts">
            <summary>
            Returns the total number of ints (32bit integers) that
            have been allocated.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TempViewManager.ParamName">
            <summary>
            Returns the associated param name (for error messages).
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TempViewManager.TempView">
            <summary>
            Returns the underlying temporary array view.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.TempViewManager.Allocate``1">
            <summary>
            Allocates a single element of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The element type to allocate.</typeparam>
            <returns>The allocated variable view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.TempViewManager.Allocate``1(System.Int64)">
            <summary>
            Allocates several elements of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The element type to allocate.</typeparam>
            <param name="length">The number of elements to allocate.</param>
            <returns>The allocated array view.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.TileInfo">
            <summary>
            Contains information about a single scan tile.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.TileInfo.#ctor(System.Int32,ILGPU.Index1D)">
            <summary>
            Constructs a new tile information instance.
            </summary>
            <param name="inputLength">The input length.</param>
            <param name="numIterationsPerGroup">
            The number of iterations per group to compute the tile size.
            </param>
        </member>
        <member name="P:ILGPU.Algorithms.TileInfo.TileSize">
            <summary>
            Returns the tile size.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TileInfo.StartIndex">
            <summary>
            Returns the start index of the current thread (inclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TileInfo.EndIndex">
            <summary>
            Returns the end index of all threads in the group (exclusive).
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TileInfo.MaxLength">
            <summary>
            Returns the maximum data length to avoid out-of-bounds accesses.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.ITransformer`2">
            <summary>
            Represents an abstract interface for a value transformer.
            </summary>
            <typeparam name="TSource">The source value type of the transformation.</typeparam>
            <typeparam name="TTarget">The target value type of the transformation.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.ITransformer`2.Transform(`0)">
            <summary>
            Transforms the given value of type <typeparamref name="TSource"/>
            into a transformed value of type <typeparamref name="TTarget"/>.
            </summary>
            <param name="value">The value to transform.</param>
            <returns>
            The transformed value of type <typeparamref name="TTarget"/>.
            </returns>
        </member>
        <member name="T:ILGPU.Algorithms.IdentityTransformer`1">
            <summary>
            Represents a generic identity transformer.
            </summary>
            <typeparam name="T">The element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.IdentityTransformer`1.Transform(`0)">
            <summary>
            Performs an identity transformation by returning the input value.
            </summary>
            <param name="value">The value to transform.</param>
            <returns>The unchanged input value.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Transformer`3">
            <summary>
            Represents an element transformer that Transforms elements in the source view into
            elements in the target view using the given transformer.
            </summary>
            <typeparam name="TSource">The source value type of the transformation.</typeparam>
            <typeparam name="TTarget">The target value type of the transformation.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.Transformer`5">
            <summary>
            Represents an element transformer that Transforms elements in the source view into
            elements in the target view using the given transformer.
            </summary>
            <typeparam name="TSource">The source value type of the transformation.</typeparam>
            <typeparam name="TSourceStride">The 1D stride of the source view.</typeparam>
            <typeparam name="TTarget">The target value type of the transformation.</typeparam>
            <typeparam name="TTargetStride">The 1D stride of the target view.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.TransformExtensions">
            <summary>
            Transformer functionality for accelerators.
            </summary>
        </member>
        <member name="T:ILGPU.Algorithms.TransformExtensions.TransformImplementation`5">
            <summary>
            A actual raw transform loop body.
            </summary>
            <typeparam name="TSource">The source element type.</typeparam>
            <typeparam name="TSourceStride">The 1D stride of the source view.</typeparam>
            <typeparam name="TTarget">The target element type.</typeparam>
            <typeparam name="TTargetStride">The 1D stride of the target view.</typeparam>
            <typeparam name="TTransformer">The type of the transformer to use.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.TransformImplementation`5.#ctor(ILGPU.Runtime.ArrayView1D{`0,`1},ILGPU.Runtime.ArrayView1D{`2,`3},`4)">
            <summary>
            Creates a new transform instance.
            </summary>
            <param name="source">The parent source view.</param>
            <param name="target">The parent target view.</param>
            <param name="transformer">The transformer instance.</param>
        </member>
        <member name="P:ILGPU.Algorithms.TransformExtensions.TransformImplementation`5.Source">
            <summary>
            Returns the source view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TransformExtensions.TransformImplementation`5.Target">
            <summary>
            Returns the target view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.TransformExtensions.TransformImplementation`5.Transformer">
            <summary>
            Returns the transformer instance.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.TransformImplementation`5.Execute(ILGPU.LongIndex1D)">
            <summary>
            Executes this transform wrapper.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.TransformImplementation`5.Finish">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.CreateRawTransformer``5(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a raw transformer that is defined by the given source and target type
            and the specified transformer type.
            </summary>
            <typeparam name="TSource">
            The source value type of the transformation.
            </typeparam>
            <typeparam name="TSourceStride">The 1D stride of the source view.</typeparam>
            <typeparam name="TTarget">
            The target value type of the transformation.
            </typeparam>
            <typeparam name="TTargetStride">The 1D stride of the target view.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.CreateTransformer``3(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a raw transformer that is defined by the given source and target type
            and the specified transformer type.
            </summary>
            <typeparam name="TSource">
            The source value type of the transformation.
            </typeparam>
            <typeparam name="TTarget">
            The target value type of the transformation.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.CreateTransformer``5(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a raw transformer that is defined by the given source and target type
            and the specified transformer type.
            </summary>
            <typeparam name="TSource">
            The source value type of the transformation.
            </typeparam>
            <typeparam name="TSourceStride">The 1D stride of the source view.</typeparam>
            <typeparam name="TTarget">
            The target value type of the transformation.
            </typeparam>
            <typeparam name="TTargetStride">The 1D stride of the target view.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.CreateTransformer``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a new transformer that is defined by the element type and the
            specified transformer type.
            </summary>
            <typeparam name="T">The type of the elements to transform.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The loaded transformer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.Transform``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``0},``1)">
            <summary>
            Transforms elements in the source view into elements in the target view using
            the given transformer.
            </summary>
            <typeparam name="T">The type of the elements to transform.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.Transform``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0},ILGPU.ArrayView{``1},``2)">
            <summary>
            Transforms elements in the source view into elements in the target view using
            the given transformer.
            </summary>
            <typeparam name="TSource">
            The source type of the elements to transform.
            </typeparam>
            <typeparam name="TTarget">
            The target type of the elements that have been transformed.
            </typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.Transform``3(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.Runtime.ArrayView1D{``0,``1},``2)">
            <summary>
            Transforms elements in the source view into elements in the target view using
            the given transformer.
            </summary>
            <typeparam name="T">The type of the elements to transform.</typeparam>
            <typeparam name="TStride">The 1D stride of all views.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="M:ILGPU.Algorithms.TransformExtensions.Transform``5(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.Runtime.ArrayView1D{``0,``1},ILGPU.Runtime.ArrayView1D{``2,``3},``4)">
            <summary>
            Transforms elements in the source view into elements in the target view using
            the given transformer.
            </summary>
            <typeparam name="TSource">
            The source type of the elements to transform.
            </typeparam>
            <typeparam name="TSourceStride">The 1D stride of the source view.</typeparam>
            <typeparam name="TTarget">
            The target type of the elements that have been transformed.
            </typeparam>
            <typeparam name="TTargetStride">The 1D stride of the target view.</typeparam>
            <typeparam name="TTransformer">
            The transformer to transform elements from the source type to the target type.
            </typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="source">The source elements to transform</param>
            <param name="target">
            The target elements that will contain the transformed values.
            </param>
            <param name="transformer">The used transformer.</param>
        </member>
        <member name="T:ILGPU.Algorithms.Unique`1">
            <summary>
            Represents an operation to remove consecutive duplicate elements in a given view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <param name="output">The output view to store the new length.</param>
            <param name="temp">The temp view to store temporary results.</param>
        </member>
        <member name="T:ILGPU.Algorithms.UniqueExtensions">
            <summary>
            Contains extension methods for unique operations.
            </summary>
            <summary>
            Contains extension methods for unique operations.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.UniqueKernel``2(ILGPU.ArrayView{``0},ILGPU.ArrayView{System.Int64},ILGPU.Algorithms.SequentialGroupExecutor,ILGPU.Runtime.SpecializedValue{System.Int32},ILGPU.Index1D)">
            <summary>
            The actual unique kernel implementation.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TComparisonOperation">The comparison operation.</typeparam>
            <param name="input">The input view.</param>
            <param name="output">The output view to store the new length.</param>
            <param name="sequentialGroupExecutor">
            The sequential group executor to use.
            </param>
            <param name="tileSize">The tile size.</param>
            <param name="numIterationsPerGroup">
            The number of iterations per group.
            </param>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.ComputeUniqueTempStorageSize``1(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D)">
            <summary>
            Computes the required number of temp-storage elements of type
            <typeparamref name="T"/> for a unique operation and the given data length.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="dataLength">The number of data elements to scan.</param>
            <returns>
            The required number of temp-storage elements in 32 bit ints.
            </returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.CreateUnique``2(ILGPU.Runtime.Accelerator)">
            <summary>
            Creates a kernel to remove consecutive duplicate elements in a given view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TComparisonOperation">The comparison operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <returns>The created unique handler.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique``2(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{``0})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <typeparam name="T">The input view element type.</typeparam>
            <typeparam name="TComparisonOperation">The comparison operation.</typeparam>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.SByte})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int16})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int32})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int64})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Byte})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.UInt16})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.UInt32})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.UInt64})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{ILGPU.Half})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Single})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.UniqueExtensions.Unique(ILGPU.Runtime.Accelerator,ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Double})">
            <summary>
            Removes consecutive duplicate elements in a supplied input view.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="stream">The accelerator stream.</param>
            <param name="input">The input view.</param>
            <returns>The new/valid length of the input view.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.VectorExtensions">
            <summary>
            Represents extension methods for vectors.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector2XOffset">
            <summary>
            Represents the offset of the x-component of a <see cref="T:System.Numerics.Vector2"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector2YOffset">
            <summary>
            Represents the offset of the y-component of a <see cref="T:System.Numerics.Vector2"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector3XOffset">
            <summary>
            Represents the offset of the x-component of a <see cref="T:System.Numerics.Vector3"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector3YOffset">
            <summary>
            Represents the offset of the y-component of a <see cref="T:System.Numerics.Vector3"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector3ZOffset">
            <summary>
            Represents the offset of the z-component of a <see cref="T:System.Numerics.Vector3"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector4XOffset">
            <summary>
            Represents the offset of the x-component of a <see cref="T:System.Numerics.Vector4"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector4YOffset">
            <summary>
            Represents the offset of the y-component of a <see cref="T:System.Numerics.Vector4"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector4ZOffset">
            <summary>
            Represents the offset of the z-component of a <see cref="T:System.Numerics.Vector4"/>.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.VectorExtensions.Vector4WOffset">
            <summary>
            Represents the offset of the w-component of a <see cref="T:System.Numerics.Vector4"/>.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.AtomicAdd(ILGPU.VariableView{System.Numerics.Vector2},System.Numerics.Vector2)">
            <summary>
            Atommically adds the given operand and the vector at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="operand">The operand to add.</param>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.AtomicAdd(ILGPU.VariableView{System.Numerics.Vector3},System.Numerics.Vector3)">
            <summary>
            Atommically adds the given operand and the vector at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="operand">The operand to add.</param>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.AtomicAdd(ILGPU.VariableView{System.Numerics.Vector4},System.Numerics.Vector4)">
            <summary>
            Atommically adds the given operand and the vector at the target location.
            </summary>
            <param name="target">The target location.</param>
            <param name="operand">The operand to add.</param>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.ToVector(ILGPU.Index2D)">
            <summary>
            Converts the index to a corresponding <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="index">The source index.</param>
            <returns>The converted <see cref="T:System.Numerics.Vector2"/>.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.ToVector(ILGPU.Index3D)">
            <summary>
            Converts the index to a corresponding <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="index">The source index.</param>
            <returns>The converted <see cref="T:System.Numerics.Vector3"/>.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.ToIndex(System.Numerics.Vector2)">
            <summary>
            Converts the vector to a corresponding <see cref="T:ILGPU.Index2D"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <returns>The converted <see cref="T:ILGPU.Index2D"/>.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.VectorExtensions.ToIndex(System.Numerics.Vector3)">
            <summary>
            Converts the vector to a corresponding <see cref="T:ILGPU.Index3D"/>.
            </summary>
            <param name="vector">The source vector.</param>
            <returns>The converted <see cref="T:ILGPU.Index3D"/>.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Vectors.SingleVectorView`1">
            <summary>
            Represents a single 64bit-addressed vector view in memory with a specific stride
            that accesses all values in a stride way using the following memory layout:
            (x1, x2, x3, x4, ... xN) | (y1, y2, y3, y4, ... yN),
            where N is the dimension of the vector and the stride is equal to the number of
            vectors.
            </summary>
            <typeparam name="T">The underlying element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Vectors.SingleVectorView`1.#ctor(ILGPU.ArrayView{`0},ILGPU.LongIndex1D,ILGPU.Index1D,ILGPU.LongIndex1D)">
            <summary>
            Constructs a new vector view pointing to a single vector.
            </summary>
            <param name="vectorView">The source linear vector view.</param>
            <param name="numVectors">The number of vectors.</param>
            <param name="dimension">The vector dimension of each vector.</param>
            <param name="vectorIndex">The current vector index.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Vectors.SingleVectorView`1.#ctor(ILGPU.Runtime.ArrayView1D{`0,ILGPU.Stride1D.General},ILGPU.Index1D,ILGPU.LongIndex1D)">
            <summary>
            Constructs a new vector view pointing to a single vector.
            </summary>
            <param name="vectorView">
            The source linear vector view using the stride information as the number of
            vectors this view points to.
            </param>
            <param name="dimension">The vector dimension of each vector.</param>
            <param name="vectorIndex">The current vector index.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Vectors.SingleVectorView`1.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Vectors.SingleVectorView`1.NumVectors">
            <summary>
            Returns the generic stride of this single vector view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Vectors.SingleVectorView`1.VectorIndex">
            <summary>
            Returns the general vector index of this vector view
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Vectors.SingleVectorView`1.Dimension">
            <summary>
            Returns the dimension of this vector.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Vectors.SingleVectorView`1.Item(ILGPU.Index1D)">
            <summary>
            Returns a reference to the i-th vector element.
            </summary>
            <param name="elementIndex">The element index.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Vectors.SingleVectorView`1.op_Implicit(ILGPU.Runtime.ArrayView1D{`0,ILGPU.Stride1D.General})~ILGPU.Algorithms.Vectors.SingleVectorView{`0}">
            <summary>
            Converts a general data view into a single vector view.
            </summary>
            <param name="dataView">The source data view to convert.</param>
            <returns>The converted 64bit addressed vector view.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.Vectors.VectorView`1">
            <summary>
            Represents a 64bit-addressed vector view in memory with a specific stride
            that accesses all values in a stride way using the following memory layout:
            (x1, x2, x3, x4, ... xN) | (y1, y2, y3, y4, ... yN),
            where N is the dimension of the vector and the stride is equal to the number of
            vectors.
            </summary>
            <typeparam name="T">The underlying element type.</typeparam>
        </member>
        <member name="M:ILGPU.Algorithms.Vectors.VectorView`1.Allocate(ILGPU.Runtime.Accelerator,ILGPU.LongIndex1D,ILGPU.Index1D)">
            <summary>
            Allocates a new buffer compatible with this vector view.
            </summary>
            <param name="accelerator">The accelerator to use.</param>
            <param name="numVectors">The number of vectors to allocate.</param>
            <param name="dimension">The vector dimension of each vector.</param>
            <returns>The allocated memory buffer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Vectors.VectorView`1.#ctor(ILGPU.Runtime.ArrayView2D{`0,ILGPU.Stride2D.DenseY})">
            <summary>
            Constructs a multi-vector view from the given 2D dense array view.
            </summary>
            <param name="arrayView2D">The dense source array view.</param>
        </member>
        <member name="P:ILGPU.Algorithms.Vectors.VectorView`1.IsValid">
            <summary>
            Returns true if this view points to a valid location.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Vectors.VectorView`1.Dimension">
            <summary>
            Returns the dimension of the vector.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Vectors.VectorView`1.NumVectors">
            <summary>
            Returns the number of the vectors included in this view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Vectors.VectorView`1.DataView">
            <summary>
            Returns the underlying dense array view.
            </summary>
        </member>
        <member name="P:ILGPU.Algorithms.Vectors.VectorView`1.Item(ILGPU.LongIndex1D,ILGPU.Index1D)">
            <summary>
            Returns a reference to the j-th vector element of the i-th vector.
            </summary>
            <param name="vectorIndex">The source vector index.</param>
            <param name="elementIndex">The element index.</param>
        </member>
        <member name="M:ILGPU.Algorithms.Vectors.VectorView`1.SliceVector(ILGPU.LongIndex1D)">
            <summary>
            Returns a view to a single vector.
            </summary>
            <param name="vectorIndex">The vector index.</param>
            <returns>The sliced view.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.Vectors.VectorView`1.op_Implicit(ILGPU.Runtime.ArrayView2D{`0,ILGPU.Stride2D.DenseY})~ILGPU.Algorithms.Vectors.VectorView{`0}">
            <summary>
            Converts a general data view into a vector view.
            </summary>
            <param name="dataView">The source data view to convert.</param>
            <returns>The converted 64bit addressed vector view.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.WarpExtensions">
            <summary>
            Contains extension methods for warps.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.WarpExtensions.Reduce``2(``0)">
            <summary>
            Performs a warp-wide reduction.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <returns>The first lane (lane id = 0) will return reduced result.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.WarpExtensions.AllReduce``2(``0)">
            <summary>
            Performs a warp-wide reduction.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TReduction">The type of the reduction logic.</typeparam>
            <param name="value">The current value.</param>
            <returns>All lanes will return the reduced result.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.WarpExtensions.ExclusiveScan``2(``0)">
            <summary>
            Performs a warp-wide exclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScan">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.WarpExtensions.InclusiveScan``2(``0)">
            <summary>
            Performs a warp-wide inclusive scan.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <typeparam name="TScan">The type of the warp scan logic.</typeparam>
            <param name="value">The value to scan.</param>
            <returns>The resulting value for the current lane.</returns>
        </member>
        <member name="T:ILGPU.Algorithms.XMath">
            <summary>
            Represents basic math helpers for general double/float
            math operations that are supported on the CPU and the GPU.
            </summary>
            <remarks>
            NOTE: This class will be replaced by a specific fast-math implementations
            for cross platform (CPU/GPU) math functions in a future release.
            CAUTION: Therefore, these functions are currently not optimized for
            performance or precision in any way.
            </remarks>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.E">
            <summary>
            The E constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.ED">
            <summary>
            The E constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Log2E">
            <summary>
            The log2(E) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Log2ED">
            <summary>
            The log2(E) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLog2E">
            <summary>
            The 1/log2(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLog2ED">
            <summary>
            The 1/log2(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Log10E">
            <summary>
            The log10(E) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Log10ED">
            <summary>
            The log10(E) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Ln2">
            <summary>
            The ln(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Ln2D">
            <summary>
            The ln(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLn2">
            <summary>
            The 1/ln(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLn2D">
            <summary>
            The 1/ln(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Ln10">
            <summary>
            The ln(10) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Ln10D">
            <summary>
            The ln(10) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLn10">
            <summary>
            The 1/ln(10) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverLn10D">
            <summary>
            The 1/ln(10) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PI">
            <summary>
            The PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PID">
            <summary>
            The PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PIHalf">
            <summary>
            The PI/2 constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PIHalfD">
            <summary>
            The PI/2 constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PIFourth">
            <summary>
            The PI/4 constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.PIFourthD">
            <summary>
            The PI/4 constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverPI">
            <summary>
            The 1/PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.TwoOverPI">
            <summary>
            The 2/PI constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Sqrt2">
            <summary>
            The sqrt(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneOverSqrt2">
            <summary>
            The 1/sqrt(2) constant.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.OneThird">
            <summary>
            The 1.0f / 3.0f constant.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.Double)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.Single)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.SByte)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.Int16)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.Int32)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Abs(System.Int64)">
            <summary>
            Computes |value|.
            </summary>
            <param name="value">The value.</param>
            <returns>|value|.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.PopCount(System.Int32)">
            <summary>
            Computes the number of one bits in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.PopCount(System.UInt32)">
            <summary>
            Computes the number of one bits in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.PopCount(System.Int64)">
            <summary>
            Computes the number of one bits in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.PopCount(System.UInt64)">
            <summary>
            Computes the number of one bits in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of one bits.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.LeadingZeroCount(System.Int32)">
            <summary>
            Returns the number of leading zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.LeadingZeroCount(System.UInt32)">
            <summary>
            Returns the number of leading zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.LeadingZeroCount(System.Int64)">
            <summary>
            Returns the number of leading zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.LeadingZeroCount(System.UInt64)">
            <summary>
            Returns the number of leading zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of leading zeros.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.TrailingZeroCount(System.Int32)">
            <summary>
            Returns the number of trailing zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.TrailingZeroCount(System.UInt32)">
            <summary>
            Returns the number of trailing zeros in the given 32-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.TrailingZeroCount(System.Int64)">
            <summary>
            Returns the number of trailing zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.TrailingZeroCount(System.UInt64)">
            <summary>
            Returns the number of trailing zeros in the given 64-bit integer value.
            </summary>
            <param name="value">The value to use.</param>
            <returns>The number of trailing zeros.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DegToRad(System.Double)">
            <summary>
            Converts the given value in degrees to radians.
            </summary>
            <param name="degrees">The value in degrees to convert.</param>
            <returns>The converted value in radians.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DegToRad(System.Single)">
            <summary>
            Converts the given value in degrees to radians.
            </summary>
            <param name="degrees">The value in degrees to convert.</param>
            <returns>The converted value in radians.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RadToDeg(System.Double)">
            <summary>
            Converts the given value in radians to degrees.
            </summary>
            <param name="radians">The value in radians to convert.</param>
            <returns>The converted value in degrees.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RadToDeg(System.Single)">
            <summary>
            Converts the given value in radians to degrees.
            </summary>
            <param name="radians">The value in radians to convert.</param>
            <returns>The converted value in degrees.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Floor(System.Double)">
            <summary>
            Computes floor(value).
            </summary>
            <param name="value">The value.</param>
            <returns>floor(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Floor(System.Single)">
            <summary>
            Computes floor(value).
            </summary>
            <param name="value">The value.</param>
            <returns>floor(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Ceiling(System.Double)">
            <summary>
            Computes ceiling(value).
            </summary>
            <param name="value">The value.</param>
            <returns>ceiling(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Ceiling(System.Single)">
            <summary>
            Computes ceiling(value).
            </summary>
            <param name="value">The value.</param>
            <returns>ceiling(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DivRoundDown(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DivRoundUp(System.Int32,System.Int32)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns
            >The numerator divided by the denominator rounded up (away from zero).
            </returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DivRoundDown(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            down to zero.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>The numerator divided by the denominator rounded to zero.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.DivRoundUp(System.Int64,System.Int64)">
            <summary>
            Realizes an integer division of <paramref name="numerator"/>
            divided by <paramref name="denominator"/> while rounding the result
            up (away from zero).
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
            <returns>
            The numerator divided by the denominator rounded up (away from zero).
            </returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Decompose(System.Int64)">
            <summary>
            Decomposes the given integer value into a lower and an upper part.
            </summary>
            <param name="value">The value to decompose.</param>
            <returns>The lower and upper part.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Decompose(System.UInt64)">
            <summary>
            Decomposes the given integer value into a lower and an upper part.
            </summary>
            <param name="value">The value to decompose.</param>
            <returns>The lower and upper part.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.ComposeULong(ILGPU.IntrinsicMath.IntegerParts)">
            <summary>
            Composes an integer from the given lower and upper parts.
            </summary>
            <param name="parts">The lower and upper parts.</param>
            <returns>The composed integer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.ComposeLong(ILGPU.IntrinsicMath.IntegerParts)">
            <summary>
            Composes an integer from the given lower and upper parts.
            </summary>
            <param name="parts">The lower and upper parts.</param>
            <returns>The composed integer.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log(System.Double,System.Double)">
            <summary>
            Computes log_newBase(value) to base newBase.
            </summary>
            <param name="value">The value.</param>
            <param name="newBase">The desired base.</param>
            <returns>log_newBase(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log(System.Single,System.Single)">
            <summary>
            Computes log_newBase(value) to base newBase.
            </summary>
            <param name="value">The value.</param>
            <param name="newBase">The desired base.</param>
            <returns>log_newBase(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log(System.Double)">
            <summary>
            Computes log(value) to base e.
            </summary>
            <param name="value">The value.</param>
            <returns>log(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log(System.Single)">
            <summary>
            Computes log(value) to base e.
            </summary>
            <param name="value">The value.</param>
            <returns>log(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log10(System.Double)">
            <summary>
            Computes log10(value) to base 10.
            </summary>
            <param name="value">The value.</param>
            <returns>log10(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log10(System.Single)">
            <summary>
            Computes log10(value) to base 10.
            </summary>
            <param name="value">The value.</param>
            <returns>log10(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log2(System.Double)">
            <summary>
            Computes log2(value) to base 2.
            </summary>
            <param name="value">The value.</param>
            <returns>log2(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Log2(System.Single)">
            <summary>
            Computes log2(value) to base 2.
            </summary>
            <param name="value">The value.</param>
            <returns>log2(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Double,System.Double)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Single,System.Single)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.SByte,System.SByte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Int16,System.Int16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Int32,System.Int32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Int64,System.Int64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.Byte,System.Byte)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.UInt16,System.UInt16)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.UInt32,System.UInt32)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Min(System.UInt64,System.UInt64)">
            <summary>
            Computes min(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The minimum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Double,System.Double)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Single,System.Single)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.SByte,System.SByte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Int16,System.Int16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Int32,System.Int32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Int64,System.Int64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.Byte,System.Byte)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.UInt16,System.UInt16)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.UInt32,System.UInt32)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Max(System.UInt64,System.UInt64)">
            <summary>
            Computes max(first, second).
            </summary>
            <param name="first">The first argument.</param>
            <param name="second">The second argument.</param>
            <returns>The maximum of first and second value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Single,System.Single,System.Single)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.SByte,System.SByte,System.SByte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Int16,System.Int16,System.Int16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Int64,System.Int64,System.Int64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.Byte,System.Byte,System.Byte)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Clamp(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Computes clamp(value, min, max) = Max(Min(clamp, max), min).
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The first argument.</param>
            <param name="max">The second argument.</param>
            <returns>The clamped value in the interval [min, max].</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IsNaN(System.Double)">
            <summary>
            Returns true iff the given value is NaN.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is NaN.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IsNaN(System.Single)">
            <summary>
            Returns true iff the given value is NaN.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is NaN.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IsInfinity(System.Double)">
            <summary>
            Returns true iff the given value is infinity.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is infinity.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IsInfinity(System.Single)">
            <summary>
            Returns true iff the given value is infinity.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is infinity.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IsFinite(System.Double)">
            <summary>
            Returns true iff the given value is finite.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is finite.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IsFinite(System.Single)">
            <summary>
            Returns true iff the given value is finite.
            </summary>
            <param name="value">The value.</param>
            <returns>True, iff the given value is finite.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Pow(System.Double,System.Double)">
            <summary>
            Computes basis^exp.
            </summary>
            <param name="base">The basis.</param>
            <param name="exp">The exponent.</param>
            <returns>pow(basis, exp).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Pow(System.Single,System.Single)">
            <summary>
            Computes basis^exp.
            </summary>
            <param name="base">The basis.</param>
            <param name="exp">The exponent.</param>
            <returns>pow(basis, exp).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Exp(System.Double)">
            <summary>
            Computes exp(value).
            </summary>
            <param name="value">The value.</param>
            <returns>exp(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Exp(System.Single)">
            <summary>
            Computes exp(value).
            </summary>
            <param name="value">The value.</param>
            <returns>exp(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Exp2(System.Double)">
            <summary>
            Computes 2^value.
            </summary>
            <param name="value">The value.</param>
            <returns>2^value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Exp2(System.Single)">
            <summary>
            Computes 2^value.
            </summary>
            <param name="value">The value.</param>
            <returns>2^value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rcp(System.Double)">
            <summary>
            Computes 1.0 / value.
            </summary>
            <param name="value">The value.</param>
            <returns>1.0 / value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rcp(System.Single)">
            <summary>
            Computes 1.0f / value.
            </summary>
            <param name="value">The value.</param>
            <returns>1.0f / value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rem(System.Double,System.Double)">
            <summary>
            Computes x%y.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x%y.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rem(System.Single,System.Single)">
            <summary>
            Computes x%y.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x%y.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IEEERemainder(System.Double,System.Double)">
            <summary>
            Computes remainder operation that complies with the IEEE 754 specification.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x%y.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.IEEERemainder(System.Single,System.Single)">
            <summary>
            Computes remainder operation that complies with the IEEE 754 specification.
            </summary>
            <param name="x">The nominator.</param>
            <param name="y">The denominator.</param>
            <returns>x%y.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Round(System.Double)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to even).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Round(System.Single)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to even).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Round(System.Double,System.Int32)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to even).
            </summary>
            <param name="value">The value.</param>
            <param name="digits">
            The number of fractional digits in the return value.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Round(System.Single,System.Int32)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to even).
            </summary>
            <param name="value">The value.</param>
            <param name="digits">
            The number of fractional digits in the return value.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Round(System.Double,System.MidpointRounding)">
            <summary>
            Rounds the value to the nearest value.
            </summary>
            <param name="value">The value.</param>
            <param name="mode">
            Specifiies how to round value if it is midway between two numbers.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Round(System.Single,System.MidpointRounding)">
            <summary>
            Rounds the value to the nearest value.
            </summary>
            <param name="value">The value.</param>
            <param name="mode">
            Specifiies how to round value if it is midway between two numbers.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the value to the nearest value.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">
            The number of fractional digits in the return value.
            </param>
            <param name="mode">
            Specifiies how to round value if it is midway between two numbers.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Round(System.Single,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the value to the nearest value.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">
            The number of fractional digits in the return value.
            </param>
            <param name="mode">
            Specifiies how to round value if it is midway between two numbers.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundAwayFromZero(System.Double)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded away from
            zero).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundAwayFromZero(System.Single)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded away from
            zero).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundToEven(System.Double)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to even).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundToEven(System.Single)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to even).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Truncate(System.Double)">
            <summary>
            Truncates the given value.
            </summary>
            <param name="value">The value to truncate.</param>
            <returns>The truncated value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Truncate(System.Single)">
            <summary>
            Truncates the given value.
            </summary>
            <param name="value">The value to truncate.</param>
            <returns>The truncated value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sign(System.Double)">
            <summary>
            Computes the sign of the provided value.
            Sign will return 0 for NaN, Infitity or 0 values.
            </summary>
            <param name="value">The value.</param>
            <returns>-1 for negative value, 1 for positive values, and 0 for
            0, NaN or Infinity.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sign(System.Single)">
            <summary>
            Computes the sign of the provided value.
            Sign will return 0 for NaN, Infitity or 0 values.
            </summary>
            <param name="value">The value.</param>
            <returns>-1 for negative value, 1 for positive values, and 0 for
            0, NaN or Infinity.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sqrt(System.Double)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sqrt(System.Single)">
            <summary>
            Computes sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rsqrt(System.Double)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>1/sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Rsqrt(System.Single)">
            <summary>
            Computes 1/sqrt(value).
            </summary>
            <param name="value">The value.</param>
            <returns>1/sqrt(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sin(System.Double)">
            <summary>
            Computes sin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sin(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sin(System.Single)">
            <summary>
            Computes sin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sin(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sinh(System.Double)">
            <summary>
            Computes sinh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sinh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Asin(System.Double)">
            <summary>
            Computes asin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>asin(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Asin(System.Single)">
            <summary>
            Computes asin(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>asin(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Sinh(System.Single)">
            <summary>
            Computes sinh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>sinh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cos(System.Double)">
            <summary>
            Computes cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cos(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cos(System.Single)">
            <summary>
            Computes cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cos(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cosh(System.Double)">
            <summary>
            Computes cosh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cosh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cosh(System.Single)">
            <summary>
            Computes cosh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>cosh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Acos(System.Double)">
            <summary>
            Computes acos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>acos(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Acos(System.Single)">
            <summary>
            Computes acos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>acos(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Tan(System.Double)">
            <summary>
            Computes tan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tan(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Tan(System.Single)">
            <summary>
            Computes tan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tan(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Tanh(System.Double)">
            <summary>
            Computes tanh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Tanh(System.Single)">
            <summary>
            Computes tanh(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Atan(System.Double)">
            <summary>
            Computes atan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>atan(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Atan(System.Single)">
            <summary>
            Computes atan(value).
            </summary>
            <param name="value">The value in radians.</param>
            <returns>atan(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Atan2(System.Double,System.Double)">
            <summary>
            Computes atan2(y, x).
            </summary>
            <param name="y">The y value in radians.</param>
            <param name="x">The x value in radians.</param>
            <returns>atan2(y, x).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Atan2(System.Single,System.Single)">
            <summary>
            Computes atan2(y, x).
            </summary>
            <param name="y">The y value in radians.</param>
            <param name="x">The x value in radians.</param>
            <returns>atan2(y, x).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.SinCos(System.Double,System.Double@,System.Double@)">
            <summary>
            Computes sin(value) and cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <param name="sin">The result of sin(value).</param>
            <param name="cos">The result of cos(value).</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.SinCos(System.Single,System.Single@,System.Single@)">
            <summary>
            Computes sin(value) and cos(value).
            </summary>
            <param name="value">The value in radians.</param>
            <param name="sin">The result of sin(value).</param>
            <param name="cos">The result of cos(value).</param>
            <returns>tanh(value).</returns>
        </member>
        <member name="T:ILGPU.Algorithms.XMath.Cordic">
             <summary>
             Implementation of trigonometric/hyperbolic rotation and vector mode functions using CORDIC approximation.
             https://en.wikipedia.org/wiki/CORDIC
            
             NB: CORDIC is typically implemented using a lookup table with angles. However, since
             these are not currently available, we unroll the loop.
             </summary>
            <summary>
            Implementation of logarithmic functions using CORDIC approximation.
            </summary>
            <summary>
            Implementation of exponential functions using CORDIC approximation.
            </summary>
            <summary>
            Implementation of trigonometric transcendental functions using CORDIC approximation.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Cordic.Gain">
            <summary>
            Corrects the inaccuracies gained by rotating through the 24 iterations.
            NB: We are using a pre-defined number of iterations, so the scaling can be a constant value.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Cordic.GainD">
            <summary>
            Corrects the inaccuracies gained by rotating through the 53 iterations.
            NB: We are using a pre-defined number of iterations, so the scaling can be a constant value.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Cordic.HyperbolicGain">
            <summary>
            Corrects the inaccuracies gained by rotating through the 24 iterations.
            NB: We are using a pre-defined number of iterations, so the scaling can be a constant value.
            </summary>
        </member>
        <member name="F:ILGPU.Algorithms.XMath.Cordic.HyperbolicGainD">
            <summary>
            Corrects the inaccuracies gained by rotating through the 53 iterations.
            NB: We are using a pre-defined number of iterations, so the scaling can be a constant value.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.HyperbolicGainFromCoshZero">
            <summary>
            Calculates the inaccuracy gained by calculating the baseline of Cosh(0).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.HyperbolicGainFromCoshZeroD">
            <summary>
            Calculates the inaccuracy gained by calculating the baseline of Cosh(0).
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.MatrixMultiply(System.Single@,System.Single@,System.Single)">
            <summary>
            Performs the common matrix multiplication used by CORDIC (a 2x2 matrix with a 2x1 matrix).
            </summary>
            <param name="cos">The current cosine value. Filled in with the result cosine value</param>
            <param name="sin">The current sine value. Filled in with the result sine value</param>
            <param name="factor">The multiplication factor</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.MatrixMultiply(System.Double@,System.Double@,System.Double)">
            <summary>
            Performs the common matrix multiplication used by CORDIC (a 2x2 matrix with a 2x1 matrix).
            </summary>
            <param name="cos">The current cosine value. Filled in with the result cosine value</param>
            <param name="sin">The current sine value. Filled in with the result sine value</param>
            <param name="factor">The multiplication factor</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.MatrixMultiplyHyperbolic(System.Single@,System.Single@,System.Single)">
            <summary>
            Multiplies a 2x2 matrix with a 2x1 matrix for hyperbolic iterations.
            </summary>
            <param name="cosh">The current hyperbolic cosine value. Filled in with the result hyperbolic cosine value</param>
            <param name="sinh">The current hyperbolic sine value. Filled in with the result hyperbolic sine value</param>
            <param name="factor">The multiplication factor</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.MatrixMultiplyHyperbolic(System.Double@,System.Double@,System.Double)">
            <summary>
            Multiplies a 2x2 matrix with a 2x1 matrix for hyperbolic iterations.
            </summary>
            <param name="cosh">The current hyperbolic cosine value. Filled in with the result hyperbolic cosine value</param>
            <param name="sinh">The current hyperbolic sine value. Filled in with the result hyperbolic sine value</param>
            <param name="factor">The multiplication factor</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RangeLimit(System.Single)">
            <summary>
            Ensures that the radians are within the range [-PI, PI]
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The angle, in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RangeLimit(System.Double)">
            <summary>
            Ensures that the radians are within the range [-PI, PI]
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The angle, in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextRotateIteration(System.Single,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Applies the next iteration of CORDIC rotation
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cos">The current cosine value</param>
            <param name="sin">The current sine value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextRotateIteration(System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Applies the next iteration of CORDIC rotation
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cos">The current cosine value</param>
            <param name="sin">The current sine value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RotateIterations(System.Single,System.Single@,System.Single@)">
            <summary>
            Applies the iterations of CORDIC rotations
            </summary>
            <param name="radians">The radians value</param>
            <param name="cos">Filled in with result cosine value</param>
            <param name="sin">Filled in with result sine value</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RotateIterations(System.Double,System.Double@,System.Double@)">
            <summary>
            Applies the iterations of CORDIC rotations
            </summary>
            <param name="radians">The radians value</param>
            <param name="cos">Filled in with result cosine value</param>
            <param name="sin">Filled in with result sine value</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextVectorIteration(System.Single,System.Single@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Applies the next iteration of CORDIC vectoring
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cos">The current cosine value</param>
            <param name="sin">The current sine value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextVectorIteration(System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Applies the next iteration of CORDIC vectoring
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cos">The current cosine value</param>
            <param name="sin">The current sine value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.VectorIterations(System.Single)">
            <summary>
            Applies the iterations of CORDIC vectoring
            </summary>
            <param name="target">The target sine value</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.VectorIterations(System.Double)">
            <summary>
            Applies the iterations of CORDIC vectoring
            </summary>
            <param name="target">The target sine value</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextRotateHyperbolicIteration(System.Single,System.Single@,System.Single@,System.Single@,System.Single@,System.Int32)">
            <summary>
            Applies the next iteration of CORDIC hyperbolic rotation
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
            <param name="numMultiplications">The number of multiplications in this loop</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextRotateHyperbolicIteration(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Applies the next iteration of CORDIC hyperbolic rotation
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
            <param name="numMultiplications">The number of multiplications in this loop</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RotateHyperbolicIterations(System.Single,System.Single@,System.Single@)">
            <summary>
            Applies the iterations of CORDIC hyperbolic rotations
            </summary>
            <param name="radians">The current radians value</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.RotateHyperbolicIterations(System.Double,System.Double@,System.Double@)">
            <summary>
            Applies the iterations of CORDIC hyperbolic rotations
            </summary>
            <param name="radians">The current radians value</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextVectorHyperbolicIteration(System.Single,System.Single@,System.Single@,System.Single@,System.Single@,System.Int32)">
            <summary>
            Applies the next iteration of CORDIC hyperbolic vectoring
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
            <param name="numMultiplications">The number of multiplications in this loop</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.NextVectorHyperbolicIteration(System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Int32)">
            <summary>
            Applies the next iteration of CORDIC hyperbolic vectoring
            </summary>
            <param name="angle">The angle for this iteration</param>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <param name="radians">The current radians value</param>
            <param name="powerOfTwo">The current multiplier</param>
            <param name="numMultiplications">The number of multiplications in this loop</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.VectorHyperbolicIterations(System.Single,System.Single)">
            <summary>
            Applies the iterations of CORDIC hyperbolic vectoring
            </summary>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.VectorHyperbolicIterations(System.Double,System.Double)">
            <summary>
            Applies the iterations of CORDIC hyperbolic vectoring
            </summary>
            <param name="cosh">The current cosh value</param>
            <param name="sinh">The current sinh value</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Log(System.Single)">
            <summary>
            Implementation of natural logarithm using CORDIC approximation.
            </summary>
            <param name="value">The input value</param>
            <returns>The exponent of a input value raised to base e</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Log(System.Double)">
            <summary>
            Implementation of natural logarithm using CORDIC approximation.
            </summary>
            <param name="value">The input value</param>
            <returns>The exponent of a input value raised to base e</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Exp(System.Single)">
            <summary>
            Implementation of e raised to a specific power using CORDIC approximation.
            </summary>
            <param name="value">Specifies the power</param>
            <returns>The number e raised to the specified power</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Exp(System.Double)">
            <summary>
            Implementation of e raised to a specific power using CORDIC approximation.
            </summary>
            <param name="value">Specifies the power</param>
            <returns>The number e raised to the specified power</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Sin(System.Single)">
            <summary>
            Implementation of sine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The sine value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Sin(System.Double)">
            <summary>
            Implementation of sine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The sine value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Cos(System.Single)">
            <summary>
            Implementation of cosine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The cosine value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Cos(System.Double)">
            <summary>
            Implementation of cosine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The cosine value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.SinCos(System.Single,System.Single@,System.Single@)">
            <summary>
            Implementation of sine/cosine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <param name="sin">The sine result</param>
            <param name="cos">The cosine result</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.SinCos(System.Double,System.Double@,System.Double@)">
            <summary>
            Implementation of sine/cosine approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <param name="sin">The sine result</param>
            <param name="cos">The cosine result</param>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Tan(System.Single)">
            <summary>
            Implementation of tangent approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The tangent value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Tan(System.Double)">
            <summary>
            Implementation of tangent approximation using CORDIC.
            </summary>
            <param name="radians">The angle in radians</param>
            <returns>The tangent value</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Atan(System.Single)">
            <summary>
            Implementation of inverse tangent approximation using CORDIC.
            </summary>
            <param name="value">The tangent of an angle</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Atan(System.Double)">
            <summary>
            Implementation of inverse tangent approximation using CORDIC.
            </summary>
            <param name="value">The tangent of an angle</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Atan2(System.Single,System.Single)">
            <summary>
            Implementation of inverse tangent approximation using CORDIC.
            </summary>
            <param name="y">The y value in radians</param>
            <param name="x">The x value in radians</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.Cordic.Atan2(System.Double,System.Double)">
            <summary>
            Implementation of inverse tangent approximation using CORDIC.
            </summary>
            <param name="y">The y value in radians</param>
            <param name="x">The x value in radians</param>
            <returns>The angle in radians</returns>
        </member>
        <member name="T:ILGPU.Algorithms.XMath.RoundingModes">
            <summary>
            Provides shared implementations for math rounding functions.
            </summary>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.RoundToNegativeInfinity(System.Single)">
            <summary>
            Rounds the given value towards negative infinity.
            If the value is positive, discard any fractional bits.
            If the value is negative, the fractional bits will round to the next
            smaller integer.
            </summary>
            <param name="value">The value to round.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.RoundToNegativeInfinity(System.Double)">
            <summary>
            Rounds the given value towards negative infinity.
            If the value is positive, discard any fractional bits.
            If the value is negative, the fractional bits will round to the next
            smaller integer.
            </summary>
            <param name="value">The value to round.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.RoundToPositiveInfinity(System.Single)">
            <summary>
            Rounds the given value towards positive infinity.
            If the value is negative, discard any fractional bits.
            If the value is positive, the fractional bits will round to the next
            larger integer.
            </summary>
            <param name="value">The value to round.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.RoundToPositiveInfinity(System.Double)">
            <summary>
            Rounds the given value towards positive infinity.
            If the value is negative, discard any fractional bits.
            If the value is positive, the fractional bits will round to the next
            larger integer.
            </summary>
            <param name="value">The value to round.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.RoundAwayFromZero(System.Single)">
            <summary>
            Rounds the given value towards the nearest whole number.
            If the value is halfway, it is rounded away from zero.
            </summary>
            <param name="value">The value to round.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.RoundAwayFromZero(System.Double)">
            <summary>
            Rounds the given value towards the nearest whole number.
            If the value is halfway, it is rounded away from zero.
            </summary>
            <param name="value">The value to round.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.RoundToEven(System.Single)">
            <summary>
            Rounds the given value towards the nearest whole number.
            If the value is halfway, it is rounded to the even number.
            </summary>
            <param name="value">The value to round.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.RoundToEven(System.Double)">
            <summary>
            Rounds the given value towards the nearest whole number.
            If the value is halfway, it is rounded to the even number.
            </summary>
            <param name="value">The value to round.</param>
            <returns>The rounded value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.Round(System.Single)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to even).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.Round(System.Single,System.Int32)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to even).
            </summary>
            <param name="value">The value.</param>
            <param name="digits">
            The number of fractional digits in the return value.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.Round(System.Single,System.MidpointRounding)">
            <summary>
            Rounds the value to the nearest value.
            </summary>
            <param name="value">The value.</param>
            <param name="mode">
            Specifiies how to round value if it is midway between two numbers.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.Round(System.Single,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the value to the nearest value.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">
            The number of fractional digits in the return value.
            </param>
            <param name="mode">
            Specifiies how to round value if it is midway between two numbers.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.Round(System.Double)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to even).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.Round(System.Double,System.Int32)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to even).
            </summary>
            <param name="value">The value.</param>
            <param name="digits">
            The number of fractional digits in the return value.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.Round(System.Double,System.MidpointRounding)">
            <summary>
            Rounds the value to the nearest value.
            </summary>
            <param name="value">The value.</param>
            <param name="mode">
            Specifiies how to round value if it is midway between two numbers.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            Rounds the value to the nearest value.
            </summary>
            <param name="value">The value.</param>
            <param name="digits">
            The number of fractional digits in the return value.
            </param>
            <param name="mode">
            Specifiies how to round value if it is midway between two numbers.
            </param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.RoundToZero(System.Double)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to zero).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="M:ILGPU.Algorithms.XMath.RoundingModes.RoundToZero(System.Single)">
            <summary>
            Rounds the value to the nearest value (halfway cases are rounded to zero).
            </summary>
            <param name="value">The value.</param>
            <returns>The nearest value.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CuBlasAPI">
            <summary>
            A native cuBlas API interface.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.Create(System.Nullable{ILGPU.Runtime.Cuda.API.CuBlasAPIVersion})">
            <summary>
            Creates a new API wrapper.
            </summary>
            <param name="version">The cuBlas version to use.</param>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.CreateLatest">
            <summary>
            Creates a new API wrapper using the latest installed version.
            </summary>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuBlasAPI.#ctor">
            <summary>
            Constructs a new cuBlas API instance.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CuFFTAPI">
            <summary>
            An implementation of the cuFFT API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.Create(System.Nullable{ILGPU.Runtime.Cuda.API.CuFFTAPIVersion})">
            <summary>
            Creates a new API wrapper.
            </summary>
            <param name="version">The cuFFT version to use.</param>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.CreateLatest">
            <summary>
            Creates a new API wrapper using the latest installed version.
            </summary>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.PlanMany(System.IntPtr@,System.Int32,System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Int32},System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32)">
            <summary>
            Creates a custom plan.
            </summary>
            <param name="plan">Filled in with the created plan.</param>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.Estimate1D(System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.Span{System.UIntPtr})">
            <summary>
            Estimates the work area for a 1D plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">Filled in with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.Estimate2D(System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Span{System.UIntPtr})">
            <summary>
            Estimates the work area for a 2D plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">Filled in with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.Estimate3D(System.Int32,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Span{System.UIntPtr})">
            <summary>
            Estimates the work area for a 3D plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">Filled in with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.EstimateMany(System.Int32,System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Int32},System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.Span{System.UIntPtr})">
            <summary>
            Estimates the work area for a custom plan.
            </summary>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">Filled in with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.SetStream(System.IntPtr,ILGPU.Runtime.Cuda.CudaStream)">
            <summary>
            Associates a CUDA stream with a cuFFT plan.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.SetAutoAllocate(System.IntPtr,System.Boolean)">
            <summary>
            Indicates whether to allocate work area.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.SetWorkArea(System.IntPtr,ILGPU.ArrayView{System.Byte})">
            <summary>
            Overrides the work area associated with a plan.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.MakePlan1D(System.IntPtr,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.Span{System.UIntPtr})">
            <summary>
            Configures a 1D plan.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="nx">The transform size.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.MakePlan2D(System.IntPtr,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Span{System.UIntPtr})">
            <summary>
            Configures a 2D plan.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.MakePlan3D(System.IntPtr,System.Int32,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Span{System.UIntPtr})">
            <summary>
            Configures a 3D plan.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.MakePlanMany(System.IntPtr,System.Int32,System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Int32},System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.Span{System.UIntPtr})">
            <summary>
            Configures a custom plan.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.MakePlanMany(System.IntPtr,System.Int32,System.ReadOnlySpan{System.Int64},System.ReadOnlySpan{System.Int64},System.Int64,System.Int64,System.Span{System.Int64},System.Int64,System.Int64,ILGPU.Runtime.Cuda.CuFFTType,System.Int64,System.Span{System.UIntPtr})">
            <summary>
            Configures a custom plan.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.GetSize1D(System.IntPtr,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.Span{System.UIntPtr})">
            <summary>
            Provides a more accurate estimate of the work area for a 1D plan than
            <see cref="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.Estimate1D(System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.Span{System.UIntPtr})"/>.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="nx">The transform size.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">Populated with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.GetSize2D(System.IntPtr,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Span{System.UIntPtr})">
            <summary>
            Provides a more accurate estimate of the work area for a 2D plan than
            <see cref="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.Estimate2D(System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Span{System.UIntPtr})"/>.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">Populated with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.GetSize3D(System.IntPtr,System.Int32,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Span{System.UIntPtr})">
            <summary>
            Provides a more accurate estimate of the work area for a 3D plan than
            <see cref="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.Estimate3D(System.Int32,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Span{System.UIntPtr})"/>.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">Populated with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.GetSizeMany(System.IntPtr,System.Int32,System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Int32},System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.Span{System.UIntPtr})">
            <summary>
            Provides a more accurate estimate of the work area for a custom plan than
            <see cref="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.EstimateMany(System.Int32,System.ReadOnlySpan{System.Int32},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Int32},System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.Span{System.UIntPtr})"/>.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">Populated with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.GetSizeMany(System.IntPtr,System.Int32,System.ReadOnlySpan{System.Int64},System.ReadOnlySpan{System.Int64},System.Int64,System.Int64,System.Span{System.Int64},System.Int64,System.Int64,ILGPU.Runtime.Cuda.CuFFTType,System.Int64,System.Span{System.UIntPtr})">
            <summary>
            Estimates the work area for a custom plan.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.GetSize(System.IntPtr,System.Span{System.UIntPtr})">
            <summary>
            Returns the work size.
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="workSize">Populated with the estimated size in bytes.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecC2C(System.IntPtr,ILGPU.ArrayView{System.ValueTuple{System.Single,System.Single}},ILGPU.ArrayView{System.ValueTuple{System.Single,System.Single}},ILGPU.Runtime.Cuda.CuFFTDirection)">
            <summary>
            Executes the plan on the given arrays - complex to complex (single-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="direction">The transform direction.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecC2C(System.IntPtr,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.Cuda.CuFFTDirection)">
            <summary>
            Executes the plan on the given arrays - complex to complex (single-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="direction">The transform direction.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecC2R(System.IntPtr,ILGPU.ArrayView{System.ValueTuple{System.Single,System.Single}},ILGPU.ArrayView{System.Single})">
            <summary>
            Executes the plan on the given arrays - complex to real (single-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecC2R(System.IntPtr,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{System.Single})">
            <summary>
            Executes the plan on the given arrays - complex to real (single-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecR2C(System.IntPtr,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.ValueTuple{System.Single,System.Single}})">
            <summary>
            Executes the plan on the given arrays - real to complex (single-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecR2C(System.IntPtr,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Executes the plan on the given arrays - real to complex (single-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecZ2Z(System.IntPtr,ILGPU.ArrayView{System.Numerics.Complex},ILGPU.ArrayView{System.Numerics.Complex},ILGPU.Runtime.Cuda.CuFFTDirection)">
            <summary>
            Executes the plan on the given arrays - complex to complex (double-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="direction">The transform direction.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecZ2Z(System.IntPtr,ILGPU.ArrayView{System.ValueTuple{System.Double,System.Double}},ILGPU.ArrayView{System.ValueTuple{System.Double,System.Double}},ILGPU.Runtime.Cuda.CuFFTDirection)">
            <summary>
            Executes the plan on the given arrays - complex to complex (double-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="direction">The transform direction.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecZ2Z(System.IntPtr,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.Cuda.CuFFTDirection)">
            <summary>
            Executes the plan on the given arrays - complex to complex (double-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="direction">The transform direction.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecZ2D(System.IntPtr,ILGPU.ArrayView{System.Numerics.Complex},ILGPU.ArrayView{System.Double})">
            <summary>
            Executes the plan on the given arrays - complex to real (double-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecZ2D(System.IntPtr,ILGPU.ArrayView{System.ValueTuple{System.Double,System.Double}},ILGPU.ArrayView{System.Double})">
            <summary>
            Executes the plan on the given arrays - complex to real (double-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecZ2D(System.IntPtr,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{System.Double})">
            <summary>
            Executes the plan on the given arrays - complex to real (double-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecD2Z(System.IntPtr,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Numerics.Complex})">
            <summary>
            Executes the plan on the given arrays - real to complex (double-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecD2Z(System.IntPtr,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.ValueTuple{System.Double,System.Double}})">
            <summary>
            Executes the plan on the given arrays - real to complex (double-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTAPI.ExecD2Z(System.IntPtr,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Executes the plan on the given arrays - real to complex (double-precision).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CuFFTWAPI">
            <summary>
            An implementation of the cuFFT API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.Create(System.Nullable{ILGPU.Runtime.Cuda.API.CuFFTWAPIVersion})">
            <summary>
            Creates a new API wrapper.
            </summary>
            <param name="version">The cuFFT version to use.</param>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.CreateLatest">
            <summary>
            Creates a new API wrapper using the latest installed version.
            </summary>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_1d(System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a 1D complex to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_2d(System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a 2D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_3d(System.Int32,System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a 3D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_1d(System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a 1D complex to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_2d(System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a 2D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_3d(System.Int32,System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a 3D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_1d(System.Int32,System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a 1D complex to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_2d(System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a 2D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_3d(System.Int32,System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a 3D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_1d(System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a 1D complex to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_2d(System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a 2D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_3d(System.Int32,System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a 3D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_1d(System.Int32,System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a 1D complex to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_2d(System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a 2D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_3d(System.Int32,System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a 3D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c_1d(System.Int32,System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a 1D real to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c_2d(System.Int32,System.Int32,System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a 2D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c_3d(System.Int32,System.Int32,System.Int32,System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a 3D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c_1d(System.Int32,System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a 1D real to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c_2d(System.Int32,System.Int32,System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a 2D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c_3d(System.Int32,System.Int32,System.Int32,System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a 3D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c_1d(System.Int32,System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a 1D real to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c_2d(System.Int32,System.Int32,System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a 2D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c_3d(System.Int32,System.Int32,System.Int32,System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a 3D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_r2c(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_r2c_1d(System.Int32,System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a 1D real to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_r2c_2d(System.Int32,System.Int32,System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a 2D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_r2c_3d(System.Int32,System.Int32,System.Int32,System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a 3D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_r2c(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_r2c_1d(System.Int32,System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a 1D real to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_r2c_2d(System.Int32,System.Int32,System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a 2D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_r2c_3d(System.Int32,System.Int32,System.Int32,System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a 3D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_r2c(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r_1d(System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 1D complex to real plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r_2d(System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 2D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r_3d(System.Int32,System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 3D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r_1d(System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 1D complex to real plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r_2d(System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 2D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r_3d(System.Int32,System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 3D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r_1d(System.Int32,System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 1D complex to real plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r_2d(System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 2D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r_3d(System.Int32,System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 3D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_dft_c2r(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_c2r_1d(System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 1D complex to real plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_c2r_2d(System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 2D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_c2r_3d(System.Int32,System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 3D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_c2r(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_c2r_1d(System.Int32,System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 1D complex to real plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_c2r_2d(System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 2D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_c2r_3d(System.Int32,System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 3D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_dft_c2r(System.Int32,System.ReadOnlySpan{System.Int32},System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_many_dft(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.Numerics.Complex},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_many_dft_r2c(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.Double},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_many_dft_c2r(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.Numerics.Complex},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Double},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_many_dft(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_many_dft_r2c(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.Double},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_many_dft_c2r(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Double},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_many_dft(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{ILGPU.Util.Double2},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_many_dft_r2c(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.Double},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_many_dft_c2r(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{ILGPU.Util.Double2},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Double},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_many_dft(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_many_dft_r2c(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.Single},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_many_dft_c2r(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Single},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_many_dft(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{ILGPU.Util.Float2},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_many_dft_r2c(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{System.Single},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_many_dft_c2r(System.Int32,System.ReadOnlySpan{System.Int32},System.Int32,System.Span{ILGPU.Util.Float2},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.Span{System.Single},System.ReadOnlySpan{System.Int32},System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru_dft(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru_dft_r2c(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru_dft_c2r(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru_dft(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru_dft_r2c(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru_dft_c2r(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru_dft(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru_dft_r2c(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru_dft_c2r(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru_dft(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru_dft_r2c(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru_dft_c2r(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru_dft(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru_dft_r2c(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru_dft_c2r(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim},System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru64_dft(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru64_dft_r2c(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru64_dft_c2r(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru64_dft(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru64_dft_r2c(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru64_dft_c2r(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru64_dft(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru64_dft_r2c(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_plan_guru64_dft_c2r(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru64_dft(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru64_dft_r2c(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru64_dft_c2r(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru64_dft(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru64_dft_r2c(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_plan_guru64_dft_c2r(System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Int32,System.ReadOnlySpan{ILGPU.Runtime.Cuda.iodim64},System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_execute_dft(System.IntPtr,System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex})">
            <summary>
            Executes the plan on different arrays (complex to complex).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_execute_dft_r2c(System.IntPtr,System.Span{System.Double},System.Span{System.Numerics.Complex})">
            <summary>
            Executes the plan on different arrays (real to complex).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_execute_dft_c2r(System.IntPtr,System.Span{System.Numerics.Complex},System.Span{System.Double})">
            <summary>
            Executes the plan on different arrays (complex to real).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_execute_dft(System.IntPtr,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}})">
            <summary>
            Executes the plan on different arrays (complex to complex).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_execute_dft_r2c(System.IntPtr,System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}})">
            <summary>
            Executes the plan on different arrays (real to complex).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_execute_dft_c2r(System.IntPtr,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double})">
            <summary>
            Executes the plan on different arrays (complex to real).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_execute_dft(System.IntPtr,System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2})">
            <summary>
            Executes the plan on different arrays (complex to complex).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_execute_dft_r2c(System.IntPtr,System.Span{System.Double},System.Span{ILGPU.Util.Double2})">
            <summary>
            Executes the plan on different arrays (real to complex).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftw_execute_dft_c2r(System.IntPtr,System.Span{ILGPU.Util.Double2},System.Span{System.Double})">
            <summary>
            Executes the plan on different arrays (complex to real).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_execute_dft(System.IntPtr,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}})">
            <summary>
            Executes the plan on different arrays (complex to complex).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_execute_dft_r2c(System.IntPtr,System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}})">
            <summary>
            Executes the plan on different arrays (real to complex).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_execute_dft_c2r(System.IntPtr,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single})">
            <summary>
            Executes the plan on different arrays (complex to real).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_execute_dft(System.IntPtr,System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2})">
            <summary>
            Executes the plan on different arrays (complex to complex).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_execute_dft_r2c(System.IntPtr,System.Span{System.Single},System.Span{ILGPU.Util.Float2})">
            <summary>
            Executes the plan on different arrays (real to complex).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuFFTWAPI.fftwf_execute_dft_c2r(System.IntPtr,System.Span{ILGPU.Util.Float2},System.Span{System.Single})">
            <summary>
            Executes the plan on different arrays (complex to real).
            </summary>
            <param name="plan">The plan handle.</param>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.CuRandAPI">
            <summary>
            An implementation of the cuRAND API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuRandAPI.Create(System.Nullable{ILGPU.Runtime.Cuda.API.CuRandAPIVersion})">
            <summary>
            Creates a new API wrapper.
            </summary>
            <param name="version">The cuRand version to use.</param>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuRandAPI.CreateLatest">
            <summary>
            Creates a new API wrapper using the latest installed version.
            </summary>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.CuRandAPI.#ctor">
            <summary>
            Constructs a new cuRAND API instance.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.NvJpegAPI">
            <summary>
            An implementation of the nvJpeg API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.Create(System.Nullable{ILGPU.Runtime.Cuda.API.NvJpegAPIVersion})">
            <summary>
            Creates a new API wrapper.
            </summary>
            <param name="version">The nvJPEG version to use.</param>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.CreateLatest">
            <summary>
            Creates a new API wrapper using the latest installed version.
            </summary>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.GetImageInfo(System.IntPtr,System.ReadOnlySpan{System.Byte},System.Int32@,ILGPU.Runtime.Cuda.NvJpegChromaSubsampling@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Retrieves information about the supplied JPEG.
            </summary>
            <param name="libHandle">The NvJPEG library handle.</param>
            <param name="imageBytes">The JPEG image bytes.</param>
            <param name="numComponents">Filled in with the number of components.</param>
            <param name="subsampling">Filled in with the subsampling.</param>
            <param name="widths">Filled in with the widths.</param>
            <param name="heights">Filled in with the heights.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.Decode(System.IntPtr,System.IntPtr,System.ReadOnlySpan{System.Byte},ILGPU.Runtime.Cuda.NvJpegOutputFormat,ILGPU.Runtime.Cuda.NvJpegImage@,ILGPU.Runtime.Cuda.CudaStream)">
            <summary>
            Performs single image decode.
            </summary>
            <param name="libHandle">The NvJPEG library handle</param>
            <param name="stateHandle">The NvJPEG state handle.</param>
            <param name="imageBytes">The JPEG image bytes.</param>
            <param name="outputFormat">The desired output format.</param>
            <param name="destination">The destination buffer.</param>
            <param name="stream">The accelerator stream.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.Decode(System.IntPtr,System.IntPtr,System.ReadOnlySpan{System.Byte},ILGPU.Runtime.Cuda.NvJpegOutputFormat,ILGPU.Runtime.Cuda.NvJpegImage@)">
            <inheritdoc cref="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.Decode(System.IntPtr,System.IntPtr,System.ReadOnlySpan{System.Byte},ILGPU.Runtime.Cuda.NvJpegOutputFormat,ILGPU.Runtime.Cuda.NvJpegImage@,ILGPU.Runtime.Cuda.CudaStream)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.NvmlAPI">
            <summary>
            An implementation of the NVML API.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.Create(System.Nullable{ILGPU.Runtime.Cuda.API.NvmlAPIVersion})">
            <summary>
            Creates a new API wrapper.
            </summary>
            <param name="version">The NVML version to use.</param>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.CreateLatest">
            <summary>
            Creates a new API wrapper using the latest installed version.
            </summary>
            <returns>The created API wrapper.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.GetNvmlString(System.Func{System.IntPtr,System.UInt32,ILGPU.Runtime.Cuda.NvmlReturn},System.UInt32,System.String@)">
            <summary>
            Helper method to read a null terminated string from the NVML Interop API.
            </summary>
            <param name="interopFunc">The interop function.</param>
            <param name="length">The max length to retrieve.</param>
            <param name="nvmlString">Filled in with the result string.</param>
            <returns>The interop status code.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.NvmlAPI.GetNvmlArrayInterop`1">
            <summary>
            Delegate that is initiallly called with length 0, and a null pointer to
            determine the array size. Then, called a second time with the desired length
            and array to be populated.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.GetNvmlArray``1(ILGPU.Runtime.Cuda.API.NvmlAPI.GetNvmlArrayInterop{``0},``0[]@)">
            <summary>
            Helper method to read an array of values from the NVML Interop API.
            </summary>
            <param name="interopFunc">The interop function.</param>
            <param name="nvmlArray">Filled in with the result array.</param>
            <returns>The interop status code.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.NvmlAPI.GetNvmlArrayInterop`2">
             <summary>
             Delegate that is initiallly called with length 0, and a null pointer to
             determine the array size. Then, called a second time with the desired length
             and array to be populated.
            
             This variant is for two arrays of the same length.
             </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.GetNvmlArray``2(ILGPU.Runtime.Cuda.API.NvmlAPI.GetNvmlArrayInterop{``0,``1},``0[]@,``1[]@)">
            <summary>
            Helper method to read an array of values from the NVML Interop API.
            </summary>
            <param name="interopFunc">The interop function.</param>
            <param name="nvmlArray1">Filled in with the result array.</param>
            <param name="nvmlArray2">Filled in with the result array.</param>
            <returns>The interop status code.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.API.NvmlAPI.FillNvmlArrayInterop`1">
            <summary>
            Delegate that is called to fill the array, with a length indicating the
            available space. Unlike <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.GetNvmlArray``1(ILGPU.Runtime.Cuda.API.NvmlAPI.GetNvmlArrayInterop{``0},``0[]@)"/>, this delegate cannot
            query the API for the number of records available.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.FillNvmlArray``1(ILGPU.Runtime.Cuda.API.NvmlAPI.FillNvmlArrayInterop{``0},System.UInt32,``0[]@)">
            <summary>
            Helper method to fill a fixed sized array of values from the NVML Interop API.
            </summary>
            <param name="interopFunc">The interop function.</param>
            <param name="length">The desired length.</param>
            <param name="nvmlArray">Filled in with the result array.</param>
            <returns>The interop status code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetBoardPartNumber(System.IntPtr,System.String@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetBoardPartNumber_Interop(System.IntPtr,System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetBridgeChipInfo(System.IntPtr,ILGPU.Runtime.Cuda.NvmlBridgeChipHierarchy@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetBridgeChipInfo_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlBridgeChipHierarchy_Interop@)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetComputeRunningProcesses(System.IntPtr,ILGPU.Runtime.Cuda.NvmlProcessInfo[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetComputeRunningProcesses_v2_Interop(System.IntPtr,System.UInt32@,ILGPU.Runtime.Cuda.NvmlProcessInfo*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetEncoderSessions(System.IntPtr,ILGPU.Runtime.Cuda.NvmlEncoderSessionInfo[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetEncoderSessions_Interop(System.IntPtr,System.UInt32@,ILGPU.Runtime.Cuda.NvmlEncoderSessionInfo*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetInforomImageVersion(System.IntPtr,System.String@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetInforomImageVersion_Interop(System.IntPtr,System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetInforomVersion(System.IntPtr,ILGPU.Runtime.Cuda.NvmlInforomObject,System.String@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetInforomVersion_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlInforomObject,System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetGraphicsRunningProcesses(System.IntPtr,ILGPU.Runtime.Cuda.NvmlProcessInfo[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetGraphicsRunningProcesses_v2_Interop(System.IntPtr,System.UInt32@,ILGPU.Runtime.Cuda.NvmlProcessInfo*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetName(System.IntPtr,System.String@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetName_Interop(System.IntPtr,System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetPciInfo(System.IntPtr,ILGPU.Runtime.Cuda.NvmlPciInfo@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetPciInfo_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlPciInfo_Interop@)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetRetiredPages(System.IntPtr,ILGPU.Runtime.Cuda.NvmlPageRetirementCause,System.UInt64[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetRetiredPages_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlPageRetirementCause,System.UInt32@,System.UInt64*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetRetiredPages_v2(System.IntPtr,ILGPU.Runtime.Cuda.NvmlPageRetirementCause,System.UInt64[]@,System.UInt64[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetRetiredPages_v2_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlPageRetirementCause,System.UInt32@,System.UInt64*,System.UInt64*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetSamples(System.IntPtr,ILGPU.Runtime.Cuda.NvmlSamplingType,System.UInt64,ILGPU.Runtime.Cuda.NvmlValueType@,System.UInt32,ILGPU.Runtime.Cuda.NvmlSample[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetSamples_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlSamplingType,System.UInt64,ILGPU.Runtime.Cuda.NvmlValueType@,System.UInt32@,ILGPU.Runtime.Cuda.NvmlSample*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetSerial(System.IntPtr,System.String@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetSerial_Interop(System.IntPtr,System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetSupportedGraphicsClocks(System.IntPtr,System.UInt32,System.UInt32[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetSupportedGraphicsClocks_Interop(System.IntPtr,System.UInt32,System.UInt32@,System.UInt32*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetSupportedMemoryClocks(System.IntPtr,System.UInt32[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetSupportedMemoryClocks_Interop(System.IntPtr,System.UInt32@,System.UInt32*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetTopologyNearestGpus(System.IntPtr,ILGPU.Runtime.Cuda.NvmlGpuTopologyLevel,System.IntPtr[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetTopologyNearestGpus_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlGpuTopologyLevel,System.UInt32@,System.IntPtr*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetUUID(System.IntPtr,System.String@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetUUID_Interop(System.IntPtr,System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetVbiosVersion(System.IntPtr,System.String@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetVbiosVersion_Interop(System.IntPtr,System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetTopologyGpuSet(System.UInt32,System.IntPtr[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetTopologyGpuSet_Interop(System.UInt32,System.UInt32@,System.IntPtr*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.VgpuInstanceGetMdevUUID(System.UInt32,System.String@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.VgpuInstanceGetMdevUUID_Interop(System.UInt32,System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetCpuAffinity(System.IntPtr,System.UInt32,System.UInt64[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetCpuAffinity_Interop(System.IntPtr,System.UInt32,System.UInt64*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetCpuAffinityWithinScope(System.IntPtr,System.UInt32,System.UInt64[]@,ILGPU.Runtime.Cuda.NvmlAffinityScope)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetCpuAffinityWithinScope_Interop(System.IntPtr,System.UInt32,System.UInt64*,ILGPU.Runtime.Cuda.NvmlAffinityScope)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetMemoryAffinity(System.IntPtr,System.UInt32,System.UInt64[]@,ILGPU.Runtime.Cuda.NvmlAffinityScope)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.DeviceGetMemoryAffinity_Interop(System.IntPtr,System.UInt32,System.UInt64*,ILGPU.Runtime.Cuda.NvmlAffinityScope)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetCudaDriverVersion(ILGPU.Runtime.Cuda.CudaDriverVersion@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetCudaDriverVersion_Interop(System.Int32@)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetCudaDriverVersion_v2(ILGPU.Runtime.Cuda.CudaDriverVersion@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetCudaDriverVersion_v2_Interop(System.Int32@)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetDriverVersion(System.String@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetDriverVersion_Interop(System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetNVMLVersion(System.String@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetNVMLVersion_Interop(System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetProcessName(System.UInt32,System.String@,System.UInt32)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetProcessName_Interop(System.UInt32,System.IntPtr,System.UInt32)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetHicVersion(ILGPU.Runtime.Cuda.NvmlHwbcEntry[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.SystemGetHicVersion_Interop(System.UInt32@,ILGPU.Runtime.Cuda.NvmlHwbcEntry_Interop*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.UnitGetDevices(System.IntPtr,System.IntPtr[]@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.UnitGetDevices_Interop(System.IntPtr,System.UInt32@,System.IntPtr*)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.UnitGetFanSpeedInfo(System.IntPtr,ILGPU.Runtime.Cuda.NvmlUnitFanSpeeds@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.UnitGetFanSpeedInfo_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlUnitFanSpeeds_Interop@)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.UnitGetLedState(System.IntPtr,ILGPU.Runtime.Cuda.NvmlLedState@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.UnitGetLedState_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlLedState_Interop@)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.UnitGetPsuInfo(System.IntPtr,ILGPU.Runtime.Cuda.NvmlPSUInfo@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.UnitGetPsuInfo_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlPSUInfo_Interop@)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.API.NvmlAPI.UnitGetUnitInfo(System.IntPtr,ILGPU.Runtime.Cuda.NvmlUnitInfo@)">
            <summary>
            Provides access to <see cref="M:ILGPU.Runtime.Cuda.API.NvmlAPI.UnitGetUnitInfo_Interop(System.IntPtr,ILGPU.Runtime.Cuda.NvmlUnitInfo_Interop@)"/>
            without using raw pointers.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlas`1">
            <summary>
            Wraps library calls to the external native Nvidia cuBlas library.
            </summary>
            <typeparam name="TPointerModeHandler">
            A user-defined handler type to change/adapt the current pointer mode.
            </typeparam>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope">
            <summary>
            Represents a scoped assignment of a <see cref="P:ILGPU.Runtime.Cuda.CuBlas`1.PointerMode"/> value.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope.#ctor(ILGPU.Runtime.Cuda.CuBlas{`0},ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary>
            Constructs a new pointer scope.
            </summary>
            <param name="parent">The parent pointer scope.</param>
            <param name="pointerMode">The new pointer mode.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope.Parent">
            <summary>
            Returns the parent <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/> instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope.OldPointerMode">
            <summary>
            Returns the old pointer mode.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope.Recover">
            <summary>
            Recovers the previous pointer mode.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.PointerModeScope.System#IDisposable#Dispose">
            <summary>
            Restores the previous pointer mode.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.LoadCuBlasAddress``1(ILGPU.ArrayView{``0})">
            <summary>
            Loads a native address.
            </summary>
            <typeparam name="T">The element type.</typeparam>
            <param name="view">The array view.</param>
            <returns>The native unsafe address.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CuBlas`1.stream">
            <summary>
            The underlying associated stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator)">
            <summary>
            Constructs a new CuBlas instance to access the Nvidia cublas library.
            </summary>
            <param name="accelerator">The associated cuda accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Runtime.Cuda.API.CuBlasAPIVersion)">
            <summary>
            Constructs a new CuBlas instance to access the Nvidia cublas library.
            </summary>
            <param name="accelerator">The associated cuda accelerator.</param>
            <param name="apiVersion">The cuBlas API version.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,System.Nullable{ILGPU.Runtime.Cuda.API.CuBlasAPIVersion})">
            <summary>
            Constructs a new CuBlas instance to access the Nvidia cublas library.
            </summary>
            <param name="accelerator">The associated cuda accelerator.</param>
            <param name="apiVersion">The cuBlas API version.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.API">
            <summary>
            Returns the associated cuBlas API instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.Handle">
            <summary>
            The native CuBlas library handle.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.Version">
            <summary>
            Returns the current library version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.PointerMode">
            <summary>
            Gets or sets the current <see cref="T:ILGPU.Runtime.Cuda.CuBlasPointerMode"/> value.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.AtomicsMode">
            <summary>
            Gets or sets the current <see cref="T:ILGPU.Runtime.Cuda.CuBlasAtomicsMode"/> value.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.MathMode">
            <summary>
            Gets or sets the current <see cref="T:ILGPU.Runtime.Cuda.CuBlasMathMode"/> value.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlas`1.Stream">
            <summary>
            Gets or sets the associated accelerator stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.BeginPointerScope(ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary>
            Opens a new scoped pointer mode.
            </summary>
            <param name="pointerMode">The new pointer mode to use.</param>
            <returns>The created pointer scope.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.EnsurePointerMode(ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary>
            Ensures the given pointer mode.
            </summary>
            <param name="pointerMode">The pointer mode to ensure.</param>
            <remarks>
            Checks whether the given mode is compatible with the current one in debug
            builds.
            </remarks>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.EnsureAcceleratorBinding">
            <summary>
            Ensures that the accelerator for this CuBlas instance is made current.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dispose(System.Boolean)">
            <summary cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amax(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amax operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Amin(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Int32})">
            <summary>
            Performs the CuBlas Amin operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Asum(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Asum operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Nrm2(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Nrm2 operation.
            </summary>
            <param name="input">The input view.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Axpy(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Axpy operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <returns>The computed value.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dot(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Dot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="output">The output view.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},System.Single,System.Single)">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},System.Double,System.Double)">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Util.Float2,ILGPU.Util.Float2)">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Util.Double2,ILGPU.Util.Double2)">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Rot(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Rot operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.Util.Float2,ILGPU.Util.Float2,System.Single,ILGPU.Util.Float2)">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{System.Single},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.Util.Double2,ILGPU.Util.Double2,System.Double,ILGPU.Util.Double2)">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotG(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{System.Double},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas RotG operation.
            </summary>
            <param name="a">The a value.</param>
            <param name="b">The b value.</param>
            <param name="c">The cos angle.</param>
            <param name="s">The sin angle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotM(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},System.Single@)">
            <summary>
            Performs the CuBlas RotM operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="param">The Givens param.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotM(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas RotM operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="param">The Givens param.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotM(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},System.Double@)">
            <summary>
            Performs the CuBlas RotM operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="param">The Givens param.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.RotM(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas RotM operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
            <param name="param">The Givens param.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Scal(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Scal operation.
            </summary>
            <param name="alpha">The alpha value.</param>
            <param name="x">The x vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Swap(ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Swap operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Swap(ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Swap operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Swap(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Swap operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Swap(ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Swap operation.
            </summary>
            <param name="x">The x vector.</param>
            <param name="y">The y vector.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gbmv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemv(ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Gemv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Ger(System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Ger operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Sbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Sbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spmv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Spmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Spr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Spr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Performs the CuBlas Spr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symv(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Symv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Single,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Double,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Float2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.Util.Double2,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2(ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2 operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tbmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tbsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tbsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tbsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tbsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tbsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tpmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tpmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tpmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tpmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tpsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tpsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tpsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Tpsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Tpsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Trmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Trmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Trmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Trmv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Trsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Trsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Trsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsv(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General})">
            <summary>
            Performs the CuBlas Trsv operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.Half,ILGPU.ArrayView{ILGPU.Half},System.Int32,ILGPU.ArrayView{ILGPU.Half},System.Int32,ILGPU.Half,ILGPU.ArrayView{ILGPU.Half},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Gemm(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Half},ILGPU.ArrayView{ILGPU.Half},System.Int32,ILGPU.ArrayView{ILGPU.Half},System.Int32,ILGPU.ArrayView{ILGPU.Half},ILGPU.ArrayView{ILGPU.Half},System.Int32)">
            <summary>
            Performs the CuBlas Gemm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Symm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Symm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrk(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syrk operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syr2k(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syr2k operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Syrkx(ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Syrkx operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trmm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Trmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Trsm(ILGPU.Runtime.Cuda.CuBlasSideMode,ILGPU.Runtime.Cuda.CuBlasFillMode,ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasDiagType,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Trsm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,System.Single,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.Single},System.Int32,ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,System.Double,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Double},System.Int32,ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Util.Float2,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Util.Double2,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Geam(ILGPU.Runtime.Cuda.CuBlasOperation,ILGPU.Runtime.Cuda.CuBlasOperation,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Geam operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dgmm(ILGPU.Runtime.Cuda.CuBlasSideMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Single},System.Int32,ILGPU.Runtime.ArrayView1D{System.Single,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Single},System.Int32)">
            <summary>
            Performs the CuBlas Dgmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dgmm(ILGPU.Runtime.Cuda.CuBlasSideMode,System.Int32,System.Int32,ILGPU.ArrayView{System.Double},System.Int32,ILGPU.Runtime.ArrayView1D{System.Double,ILGPU.Stride1D.General},ILGPU.ArrayView{System.Double},System.Int32)">
            <summary>
            Performs the CuBlas Dgmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dgmm(ILGPU.Runtime.Cuda.CuBlasSideMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Float2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Float2},System.Int32)">
            <summary>
            Performs the CuBlas Dgmm operation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas`1.Dgmm(ILGPU.Runtime.Cuda.CuBlasSideMode,System.Int32,System.Int32,ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32,ILGPU.Runtime.ArrayView1D{ILGPU.Util.Double2,ILGPU.Stride1D.General},ILGPU.ArrayView{ILGPU.Util.Double2},System.Int32)">
            <summary>
            Performs the CuBlas Dgmm operation.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlas">
            <summary>
            Represents a <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/> class that does not handle
            pointer mode changes automatically.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator)">
            <summary>
            Constructs a new CuBlas instance to access the Nvidia cublas library.
            </summary>
            <param name="accelerator">The associated cuda accelerator.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlas.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Runtime.Cuda.API.CuBlasAPIVersion)">
            <summary>
            Constructs a new CuBlas instance to access the Nvidia cublas library.
            </summary>
            <param name="accelerator">The associated cuda accelerator.</param>
            <param name="apiVersion">The cuBlas API version.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlasException">
            <summary>
            Represents an CuBlas exception that can be thrown by the CuBlas library.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.#ctor">
            <summary>
            Constructs a new CuBlas exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.#ctor(ILGPU.Runtime.Cuda.CuBlasStatus)">
            <summary>
            Constructs a new CuBlas exception.
            </summary>
            <param name="errorCode">The CuBlas runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.#ctor(System.String)">
            <summary cref="M:System.Exception.#ctor(System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.#ctor(System.String,System.Exception)">
            <summary cref="M:System.Exception.#ctor(System.String,System.Exception)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlasException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasException.ThrowIfFailed(ILGPU.Runtime.Cuda.CuBlasStatus)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="errorCode">The CuBlas error code to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.ICuBlasPointerModeHandler`1">
            <summary>
            An abstract handler to adapt the current pointer mode of a
            <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/> instance.
            </summary>
            <typeparam name="THandler">The handler type itself.</typeparam>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.ICuBlasPointerModeHandler`1.UpdatePointerMode(ILGPU.Runtime.Cuda.CuBlas{`0},ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary>
            Updates the pointer mode to be compatible with the given one.
            </summary>
            <param name="parent">The parent instance to use.</param>
            <param name="pointerMode">The new pointer mode to use.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers">
            <summary>
            A utility class that holds pre-defined pointer mode handlers that can be used in
            combination with the type <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/>.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.AutomaticMode">
            <summary>
            A custom handler type that automatically updates the pointer mode to be
            compatible with the requested pointer mode.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.AutomaticMode.UpdatePointerMode(ILGPU.Runtime.Cuda.CuBlas{ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.AutomaticMode},ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.ICuBlasPointerModeHandler`1.UpdatePointerMode(ILGPU.Runtime.Cuda.CuBlas{`0},ILGPU.Runtime.Cuda.CuBlasPointerMode)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.ManualMode">
            <summary>
            A custom handler type that does not automatically update the pointer mode.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.ManualMode.UpdatePointerMode(ILGPU.Runtime.Cuda.CuBlas{ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.ManualMode},ILGPU.Runtime.Cuda.CuBlasPointerMode)">
            <summary cref="M:ILGPU.Runtime.Cuda.ICuBlasPointerModeHandler`1.UpdatePointerMode(ILGPU.Runtime.Cuda.CuBlas{`0},ILGPU.Runtime.Cuda.CuBlasPointerMode)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.Automatic">
            <summary>
            Returns an automatic pointer mode handler that switches the underlying pointer
            mode of the <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/> class automatically.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuBlasPointerModeHandlers.Manual">
            <summary>
            Returns a manual pointer mode handler that does not change the underlying
            pointer mode of the <see cref="T:ILGPU.Runtime.Cuda.CuBlas`1"/> class.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuFFT">
            <summary>
            Wrapper over cuFFT to simplify integration with ILGPU.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.#ctor">
            <summary>
            Constructs a new CuFFT instance.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.#ctor(System.Nullable{ILGPU.Runtime.Cuda.API.CuFFTAPIVersion})">
            <summary>
            Constructs a new CuFFT instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuFFT.API">
            <summary>
            The underlying API wrapper.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.Plan1D(ILGPU.Runtime.Cuda.CuFFTPlan@,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32)">
            <summary>
            Creates a 1D plan.
            </summary>
            <param name="plan">Filled in with the created plan.</param>
            <param name="nx">The transform size.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.Plan2D(ILGPU.Runtime.Cuda.CuFFTPlan@,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType)">
            <summary>
            Creates a 2D plan.
            </summary>
            <param name="plan">Filled in with the created plan.</param>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="type">The transform type.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.Plan3D(ILGPU.Runtime.Cuda.CuFFTPlan@,System.Int32,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType)">
            <summary>
            Creates a 3D plan.
            </summary>
            <param name="plan">Filled in with the created plan.</param>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="type">The transform type.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.PlanMany(ILGPU.Runtime.Cuda.CuFFTPlan@,System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32)">
            <summary>
            Creates a custom plan.
            </summary>
            <param name="plan">Filled in with the created plan.</param>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.CreatePlan(ILGPU.Runtime.Cuda.CuFFTPlan@)">
            <summary>
            Creates an extensible plan.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.Estimate1D(System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.UIntPtr[])">
            <summary>
            Estimates the work area for a 1D plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">Filled in with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.Estimate2D(System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.UIntPtr[])">
            <summary>
            Estimates the work area for a 2D plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">Filled in with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.Estimate3D(System.Int32,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.UIntPtr[])">
            <summary>
            Estimates the work area for a 3D plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">Filled in with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFT.EstimateMany(System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.UIntPtr[])">
            <summary>
            Estimates the work area for a custom plan.
            </summary>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">Filled in with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CuFFTType.CUFFT_C2C">
            <summary>
            Complex to complex (interleaved).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CuFFTType.CUFFT_R2C">
            <summary>
            Real to complex (interleaved).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CuFFTType.CUFFT_C2R">
            <summary>
            Complex (interleaved) to real.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CuFFTType.CUFFT_Z2Z">
            <summary>
            Double-complex to double-complex (interleaved).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CuFFTType.CUFFT_D2Z">
            <summary>
            Double to double-complex (interleaved).
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.CuFFTType.CUFFT_Z2D">
            <summary>
            Double-complex (interleaved) to double.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuFFTException">
            <summary>
            Represents an exception that can be thrown by the cuFFT library.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTException.#ctor">
            <summary>
            Constructs a new cuFFT exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTException.#ctor(ILGPU.Runtime.Cuda.CuFFTResult)">
            <summary>
            Constructs a new cuFFT exception.
            </summary>
            <param name="errorCode">The runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTException.#ctor(System.String)">
            <summary cref="M:System.Exception.#ctor(System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTException.#ctor(System.String,System.Exception)">
            <summary cref="M:System.Exception.#ctor(System.String,System.Exception)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuFFTException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTException.ThrowIfFailed(ILGPU.Runtime.Cuda.CuFFTResult)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="errorCode">The error code to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuFFTPlan">
            <summary>
            Represents a cuFFT plan.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuFFTPlan.API">
            <summary>
            The underlying API wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuFFTPlan.PlanHandle">
            <summary>
            The native plan handle.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.#ctor(ILGPU.Runtime.Cuda.API.CuFFTAPI,System.IntPtr)">
            <summary>
            Constructs a new instance to wrap a cuFFT plan.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.SetStream(ILGPU.Runtime.Cuda.CudaStream)">
            <summary>
            Associates a CUDA stream with a cuFFT plan.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.SetAutoAllocate(System.Boolean)">
            <summary>
            Indicates whether to allocate work area.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.SetWorkArea(ILGPU.ArrayView{System.Byte})">
            <summary>
            Overrides the work area associated with a plan.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.MakePlan1D(System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.UIntPtr[])">
            <summary>
            Configures a 1D plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.MakePlan2D(System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.UIntPtr[])">
            <summary>
            Configures a 2D plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.MakePlan3D(System.Int32,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.UIntPtr[])">
            <summary>
            Configures a 3D plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.MakePlanMany(System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.UIntPtr[])">
            <summary>
            Configures a custom plan.
            </summary>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.MakePlanMany(System.Int32,System.Int64[],System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,ILGPU.Runtime.Cuda.CuFFTType,System.Int64,System.UIntPtr[])">
            <summary>
            Configures a custom plan.
            </summary>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.GetSize1D(System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.UIntPtr[])">
            <summary>
            Estimates the work area for a 1D plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">Populated with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.GetSize2D(System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.UIntPtr[])">
            <summary>
            Estimates the work area for a 2D plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">Populated with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.GetSize3D(System.Int32,System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.UIntPtr[])">
            <summary>
            Estimates the work area for a 3D plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="type">The transform type.</param>
            <param name="workSize">Populated with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.GetSizeMany(System.Int32,System.Int32[],System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32,ILGPU.Runtime.Cuda.CuFFTType,System.Int32,System.UIntPtr[])">
            <summary>
            Estimates the work area for a custom plan.
            </summary>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">Populated with the estimated size in bytes.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.GetSizeMany(System.Int32,System.Int64[],System.Int64[],System.Int64,System.Int64,System.Int64[],System.Int64,System.Int64,ILGPU.Runtime.Cuda.CuFFTType,System.Int64,System.UIntPtr[])">
            <summary>
            Estimates the work area for a custom plan.
            </summary>
            <param name="rank">The transform.</param>
            <param name="n">The transform dimensions.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="type">The transform type.</param>
            <param name="batch">The number of transforms.</param>
            <param name="workSize">The work size.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.GetSize(System.UIntPtr[])">
            <summary>
            Returns the work size.
            </summary>
            <param name="workSize">Populated with the estimated size in bytes.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecC2C(ILGPU.ArrayView{System.ValueTuple{System.Single,System.Single}},ILGPU.ArrayView{System.ValueTuple{System.Single,System.Single}},ILGPU.Runtime.Cuda.CuFFTDirection)">
            <summary>
            Executes the plan on the given arrays - complex to complex (single-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="direction">The transform direction.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecC2C(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.Runtime.Cuda.CuFFTDirection)">
            <summary>
            Executes the plan on the given arrays - complex to complex (single-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="direction">The transform direction.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecC2R(ILGPU.ArrayView{System.ValueTuple{System.Single,System.Single}},ILGPU.ArrayView{System.Single})">
            <summary>
            Executes the plan on the given arrays - complex to real (single-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecC2R(ILGPU.ArrayView{ILGPU.Util.Float2},ILGPU.ArrayView{System.Single})">
            <summary>
            Executes the plan on the given arrays - complex to real (single-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecR2C(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{System.ValueTuple{System.Single,System.Single}})">
            <summary>
            Executes the plan on the given arrays - real to complex (single-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecR2C(ILGPU.ArrayView{System.Single},ILGPU.ArrayView{ILGPU.Util.Float2})">
            <summary>
            Executes the plan on the given arrays - real to complex (single-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecZ2Z(ILGPU.ArrayView{System.Numerics.Complex},ILGPU.ArrayView{System.Numerics.Complex},ILGPU.Runtime.Cuda.CuFFTDirection)">
            <summary>
            Executes the plan on the given arrays - complex to complex (double-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="direction">The transform direction.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecZ2Z(ILGPU.ArrayView{System.ValueTuple{System.Double,System.Double}},ILGPU.ArrayView{System.ValueTuple{System.Double,System.Double}},ILGPU.Runtime.Cuda.CuFFTDirection)">
            <summary>
            Executes the plan on the given arrays - complex to complex (double-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="direction">The transform direction.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecZ2Z(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.Runtime.Cuda.CuFFTDirection)">
            <summary>
            Executes the plan on the given arrays - complex to complex (double-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="direction">The transform direction.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecZ2D(ILGPU.ArrayView{System.Numerics.Complex},ILGPU.ArrayView{System.Double})">
            <summary>
            Executes the plan on the given arrays - complex to real (double-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecZ2D(ILGPU.ArrayView{System.ValueTuple{System.Double,System.Double}},ILGPU.ArrayView{System.Double})">
            <summary>
            Executes the plan on the given arrays - complex to real (double-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecZ2D(ILGPU.ArrayView{ILGPU.Util.Double2},ILGPU.ArrayView{System.Double})">
            <summary>
            Executes the plan on the given arrays - complex to real (double-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecD2Z(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.Numerics.Complex})">
            <summary>
            Executes the plan on the given arrays - real to complex (double-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecD2Z(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{System.ValueTuple{System.Double,System.Double}})">
            <summary>
            Executes the plan on the given arrays - real to complex (double-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTPlan.ExecD2Z(ILGPU.ArrayView{System.Double},ILGPU.ArrayView{ILGPU.Util.Double2})">
            <summary>
            Executes the plan on the given arrays - real to complex (double-precision).
            </summary>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <returns>The error code.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuFFTW">
            <summary>
            Wrapper over cuFFTW to simplify integration with ILGPU.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.#ctor">
            <summary>
            Constructs a new CuFFTW instance.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.#ctor(System.Nullable{ILGPU.Runtime.Cuda.API.CuFFTWAPIVersion})">
            <summary>
            Constructs a new CuFFTW instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuFFTW.API">
            <summary>
            The underlying API wrapper.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D(System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a 1D complex to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D(System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a 2D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D(System.Int32,System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a 3D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan(System.Int32,System.Int32[],System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D(System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a 1D complex to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D(System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a 2D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D(System.Int32,System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a 3D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan(System.Int32,System.Int32[],System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D(System.Int32,System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a 1D complex to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D(System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a 2D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D(System.Int32,System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a 3D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan(System.Int32,System.Int32[],System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D(System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a 1D complex to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D(System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a 2D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D(System.Int32,System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a 3D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan(System.Int32,System.Int32[],System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D(System.Int32,System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a 1D complex to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D(System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a 2D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D(System.Int32,System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a 3D complex to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan(System.Int32,System.Int32[],System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D_R2C(System.Int32,System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a 1D real to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D_R2C(System.Int32,System.Int32,System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a 2D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D_R2C(System.Int32,System.Int32,System.Int32,System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a 3D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan_R2C(System.Int32,System.Int32[],System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D_R2C(System.Int32,System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a 1D real to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D_R2C(System.Int32,System.Int32,System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a 2D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D_R2C(System.Int32,System.Int32,System.Int32,System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a 3D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan_R2C(System.Int32,System.Int32[],System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D_R2C(System.Int32,System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a 1D real to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D_R2C(System.Int32,System.Int32,System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a 2D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D_R2C(System.Int32,System.Int32,System.Int32,System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a 3D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan_R2C(System.Int32,System.Int32[],System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D_R2C(System.Int32,System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a 1D real to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D_R2C(System.Int32,System.Int32,System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a 2D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D_R2C(System.Int32,System.Int32,System.Int32,System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a 3D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan_R2C(System.Int32,System.Int32[],System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D_R2C(System.Int32,System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a 1D real to complex plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D_R2C(System.Int32,System.Int32,System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a 2D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D_R2C(System.Int32,System.Int32,System.Int32,System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a 3D real to complex plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan_R2C(System.Int32,System.Int32[],System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D_C2R(System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 1D complex to real plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D_C2R(System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 2D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D_C2R(System.Int32,System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 3D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan_C2R(System.Int32,System.Int32[],System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D_C2R(System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 1D complex to real plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D_C2R(System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 2D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D_C2R(System.Int32,System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 3D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan_C2R(System.Int32,System.Int32[],System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D_C2R(System.Int32,System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 1D complex to real plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D_C2R(System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 2D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D_C2R(System.Int32,System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a 3D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan_C2R(System.Int32,System.Int32[],System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D_C2R(System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 1D complex to real plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D_C2R(System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 2D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D_C2R(System.Int32,System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 3D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan_C2R(System.Int32,System.Int32[],System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan1D_C2R(System.Int32,System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 1D complex to real plan.
            </summary>
            <param name="nx">The transform size.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan2D_C2R(System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 2D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan3D_C2R(System.Int32,System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a 3D complex to real plan.
            </summary>
            <param name="nx">The transform size in the x dimension.</param>
            <param name="ny">The transform size in the y dimension.</param>
            <param name="nz">The transform size in the z dimension.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Plan_C2R(System.Int32,System.Int32[],System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany(System.Int32,System.Int32[],System.Int32,System.Span{System.Numerics.Complex},System.Int32[],System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.Int32[],System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany_R2C(System.Int32,System.Int32[],System.Int32,System.Span{System.Double},System.Int32[],System.Int32,System.Int32,System.Span{System.Numerics.Complex},System.Int32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany_C2R(System.Int32,System.Int32[],System.Int32,System.Span{System.Numerics.Complex},System.Int32[],System.Int32,System.Int32,System.Span{System.Double},System.Int32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany(System.Int32,System.Int32[],System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32[],System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32[],System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany_R2C(System.Int32,System.Int32[],System.Int32,System.Span{System.Double},System.Int32[],System.Int32,System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany_C2R(System.Int32,System.Int32[],System.Int32,System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32[],System.Int32,System.Int32,System.Span{System.Double},System.Int32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany(System.Int32,System.Int32[],System.Int32,System.Span{ILGPU.Util.Double2},System.Int32[],System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.Int32[],System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany_R2C(System.Int32,System.Int32[],System.Int32,System.Span{System.Double},System.Int32[],System.Int32,System.Int32,System.Span{ILGPU.Util.Double2},System.Int32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany_C2R(System.Int32,System.Int32[],System.Int32,System.Span{ILGPU.Util.Double2},System.Int32[],System.Int32,System.Int32,System.Span{System.Double},System.Int32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany(System.Int32,System.Int32[],System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32[],System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32[],System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany_R2C(System.Int32,System.Int32[],System.Int32,System.Span{System.Single},System.Int32[],System.Int32,System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany_C2R(System.Int32,System.Int32[],System.Int32,System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32[],System.Int32,System.Int32,System.Span{System.Single},System.Int32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany(System.Int32,System.Int32[],System.Int32,System.Span{ILGPU.Util.Float2},System.Int32[],System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.Int32[],System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany_R2C(System.Int32,System.Int32[],System.Int32,System.Span{System.Single},System.Int32[],System.Int32,System.Int32,System.Span{ILGPU.Util.Float2},System.Int32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanMany_C2R(System.Int32,System.Int32[],System.Int32,System.Span{ILGPU.Util.Float2},System.Int32[],System.Int32,System.Int32,System.Span{System.Single},System.Int32[],System.Int32,System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="n">The transform dimensions.</param>
            <param name="batch">The number of transforms.</param>
            <param name="in">The input array.</param>
            <param name="inembed">The storage dimensions of the input data.</param>
            <param name="istride">The stride of the input data.</param>
            <param name="idist">The distance of the input data.</param>
            <param name="out">The output array.</param>
            <param name="onembed">The storage dimensions of the output data.</param>
            <param name="ostride">The stride of the output data.</param>
            <param name="odist">The distance of the output data.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_R2C(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_C2R(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_R2C(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_C2R(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_R2C(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_C2R(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_R2C(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_C2R(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_R2C(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_C2R(System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Int32,ILGPU.Runtime.Cuda.iodim[],System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_R2C(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.Double},System.Span{System.Numerics.Complex},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_C2R(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.Numerics.Complex},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_R2C(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_C2R(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_R2C(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.Double},System.Span{ILGPU.Util.Double2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_C2R(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{ILGPU.Util.Double2},System.Span{System.Double},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_R2C(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_C2R(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2},System.Int32,System.UInt32)">
            <summary>
            Creates a custom complex to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="sign">The sign of the exponent in the formula.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_R2C(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{System.Single},System.Span{ILGPU.Util.Float2},System.UInt32)">
            <summary>
            Creates a custom real to complex plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.PlanGuru_C2R(System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Int32,ILGPU.Runtime.Cuda.iodim64[],System.Span{ILGPU.Util.Float2},System.Span{System.Single},System.UInt32)">
            <summary>
            Creates a custom complex to real plan.
            </summary>
            <param name="rank">The transform rank.</param>
            <param name="dims">The transform dimensions.</param>
            <param name="batch_rank">The batch rank.</param>
            <param name="batch_dims">The batch dimensions.</param>
            <param name="in">The input array.</param>
            <param name="out">The output array.</param>
            <param name="flags">The planner flags.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.SetTimeLimit(System.Double)">
            <summary>
            Sets time limit for planning.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.Cleanup">
            <summary>
            Cleanup CuFFTW plans and accumulated wisdom.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.SetTimeLimitF(System.Double)">
            <summary>
            Sets time limit for planning.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTW.CleanupF">
            <summary>
            Cleanup CuFFTW plans and accumulated wisdom.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.ICuRand">
            <summary>
            An abstract cuRand API interface.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.ICuRand.API">
            <summary>
            Returns the associated cuRand API instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.ICuRand.GeneratorPtr">
            <summary>
            Returns the native cuRand generator pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.ICuRand.Version">
            <summary>
            Returns the current library version.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuRand">
            <summary>
            Utility class to instantiate and manage <see cref="T:ILGPU.Runtime.Cuda.ICuRand"/> instances.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRand.CreateGPU(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Runtime.Cuda.CuRandRngType)">
            <summary>
            Constructs a new cuRand wrapper on the GPU using the V10 API.
            </summary>
            <param name="accelerator">The associated Cuda accelerator.</param>
            <param name="rngType">The cuRand RNG type.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRand.CreateGPU(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Runtime.Cuda.CuRandRngType,ILGPU.Runtime.Cuda.API.CuRandAPIVersion)">
            <summary>
            Constructs a new cuRand wrapper on the GPU.
            </summary>
            <param name="accelerator">The associated Cuda accelerator.</param>
            <param name="rngType">The cuRand RNG type.</param>
            <param name="apiVersion">The cuRand API version.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRand.CreateCPU(ILGPU.Context,ILGPU.Runtime.Cuda.CuRandRngType)">
            <summary>
            Constructs a new cuRand wrapper on the CPU using the V10 API.
            </summary>
            <param name="context">The parent ILGPU context.</param>
            <param name="rngType">The cuRand RNG type.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRand.CreateCPU(ILGPU.Context,ILGPU.Runtime.Cuda.CuRandRngType,ILGPU.Runtime.Cuda.API.CuRandAPIVersion)">
            <summary>
            Constructs a new cuRand wrapper on the GPU.
            </summary>
            <param name="context">The parent ILGPU context.</param>
            <param name="rngType">The cuRand RNG type.</param>
            <param name="apiVersion">The cuRand API version.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRand.SetSeed``1(``0,System.Int64)">
            <summary>
            Sets the underlying native cuRand seed.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRand.GenerateRandomSeeds``1(``0)">
            <summary>
            Generates random seeds using the native cuRand API.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.GPUCuRand">
            <summary>
            Wraps library calls to the external native Nvidia cuRand library.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.GPUCuRand.RandToIntBody">
            <summary>
            A body implementation that converts unsigned ints to positive signed ints.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.GPUCuRand.RandToIntBody.Data">
            <summary>
            The target data view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.RandToIntBody.Execute(ILGPU.LongIndex1D)">
            <inheritdoc cref="M:ILGPU.Algorithms.IGridStrideKernelBody.Execute(ILGPU.LongIndex1D)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.RandToIntBody.Finish">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.GPUCuRand.RandToLongBody">
            <summary>
            A body implementation that converts unsigned longs to positive signed longs.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.GPUCuRand.RandToLongBody.Data">
            <summary>
            The target data view.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.RandToLongBody.Execute(ILGPU.LongIndex1D)">
            <inheritdoc cref="M:ILGPU.Algorithms.IGridStrideKernelBody.Execute(ILGPU.LongIndex1D)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.RandToLongBody.Finish">
            <summary>
            Performs no operation.
            </summary>
        </member>
        <member name="F:ILGPU.Runtime.Cuda.GPUCuRand.currentStream">
            <summary>
            The underlying associated stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Runtime.Cuda.CuRandRngType)">
            <summary>
            Constructs a new cuRand wrapper.
            </summary>
            <param name="accelerator">The associated Cuda accelerator.</param>
            <param name="rngType">The cuRand RNG type.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Runtime.Cuda.CuRandRngType,ILGPU.Runtime.Cuda.API.CuRandAPIVersion)">
            <summary>
            Constructs a new cuRand wrapper.
            </summary>
            <param name="accelerator">The associated Cuda accelerator.</param>
            <param name="rngType">The cuRand RNG type.</param>
            <param name="apiVersion">The cuRand API version.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.#ctor(ILGPU.Runtime.Cuda.CudaAccelerator,ILGPU.Runtime.Cuda.CuRandRngType,System.Nullable{ILGPU.Runtime.Cuda.API.CuRandAPIVersion})">
            <summary>
            Constructs a new cuRand wrapper.
            </summary>
            <param name="accelerator">The associated Cuda accelerator.</param>
            <param name="rngType">The cuRand RNG type.</param>
            <param name="apiVersion">The cuRand API version.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.GPUCuRand.API">
            <summary>
            Returns the associated cuRand API instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.GPUCuRand.GeneratorPtr">
            <summary>
            Returns the native cuRand generator pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.GPUCuRand.Version">
            <summary>
            Returns the current library version.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.GPUCuRand.Stream">
            <summary>
            Gets or sets the associated accelerator stream.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.UpdateOrKeepStream(ILGPU.Runtime.AcceleratorStream)">
            <summary>
            Updates the current stream or skips the assignment process if the stream has
            already been assigned.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.UInt32})">
            <summary>
            Fills the given view with uniformly distributed unsigned integers.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="view">The view to fill.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.UInt64})">
            <summary>
            Fills the given view with uniformly distributed unsigned longs.
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="view">The view to fill.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int32})">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int32})"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int64})">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Int64})"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Single})">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Single})"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Double})">
            <inheritdoc cref="M:ILGPU.Algorithms.Random.RNG.FillUniform(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Double})"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.FillNormal(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Single},System.Single,System.Single)">
            <summary>
            Fills the given view with normally distributed floats in [0.0, ..., 1.0).
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="view">The view to fill.</param>
            <param name="mean">The normal distribution mean.</param>
            <param name="stddev">The normal distribution standard deviation.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.FillNormal(ILGPU.Runtime.AcceleratorStream,ILGPU.ArrayView{System.Double},System.Double,System.Double)">
            <summary>
            Fills the given view with normally distributed doubles in [0.0, ..., 1.0).
            </summary>
            <param name="stream">The stream to use.</param>
            <param name="view">The view to fill.</param>
            <param name="mean">The normal distribution mean.</param>
            <param name="stddev">The normal distribution standard deviation.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.GPUCuRand.DisposeAcceleratorObject(System.Boolean)">
            <inheritdoc cref="M:ILGPU.Runtime.AcceleratorObject.DisposeAcceleratorObject(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CPUCuRand">
            <summary>
            Wraps library calls to the external native Nvidia cuRand library using the CPU
            cuRand implementation.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.#ctor(ILGPU.Context,ILGPU.Runtime.Cuda.CuRandRngType)">
            <summary>
            Constructs a new cuRand wrapper.
            </summary>
            <param name="context">The parent ILGPU context.</param>
            <param name="rngType">The cuRand RNG type.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.#ctor(ILGPU.Context,ILGPU.Runtime.Cuda.CuRandRngType,ILGPU.Runtime.Cuda.API.CuRandAPIVersion)">
            <summary>
            Constructs a new cuRand wrapper.
            </summary>
            <param name="context">The parent ILGPU context.</param>
            <param name="rngType">The cuRand RNG type.</param>
            <param name="apiVersion">The cuRand API version.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.#ctor(ILGPU.Context,ILGPU.Runtime.Cuda.CuRandRngType,System.Nullable{ILGPU.Runtime.Cuda.API.CuRandAPIVersion})">
            <summary>
            Constructs a new cuRand wrapper.
            </summary>
            <param name="context">The parent ILGPU context.</param>
            <param name="rngType">The cuRand RNG type.</param>
            <param name="apiVersion">The cuRand API version.</param>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CPUCuRand.API">
            <summary>
            Returns the associated cuRand API instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CPUCuRand.GeneratorPtr">
            <summary>
            Returns the native cuRand generator pointer.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CPUCuRand.Version">
            <summary>
            Returns the current library version.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.FillUniform(System.Span{System.UInt32})">
            <summary>
            Fills the given span with uniformly distributed unsigned integers.
            </summary>
            <param name="span">The span to fill.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.FillUniform(System.Span{System.UInt64})">
            <summary>
            Fills the given span with uniformly distributed unsigned longs.
            </summary>
            <param name="span">The span to fill.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.FillUniform(System.Span{System.Int32})">
            <summary>
            Fills the given span with uniformly distributed positive integers.
            </summary>
            <param name="span">The span to fill.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.FillUniform(System.Span{System.Int64})">
            <summary>
            Fills the given span with uniformly distributed positive longs.
            </summary>
            <param name="span">The span to fill.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.FillUniform(System.Span{System.Single})">
            <summary>
            Fills the given span with uniformly distributed floats in [0.0, ..., 1.0).
            </summary>
            <param name="span">The span to fill.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.FillUniform(System.Span{System.Double})">
            <summary>
            Fills the given span with uniformly distributed normals in [0.0, ..., 1.0).
            </summary>
            <param name="span">The span to fill.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.FillNormal(System.Span{System.Single},System.Single,System.Single)">
            <summary>
            Fills the given span with normally distributed floats in [0.0, ..., 1.0).
            </summary>
            <param name="span">The span to fill.</param>
            <param name="mean">The normal distribution mean.</param>
            <param name="stddev">The normal distribution standard deviation.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.FillNormal(System.Span{System.Double},System.Double,System.Double)">
            <summary>
            Fills the given span with normally distributed doubles in [0.0, ..., 1.0).
            </summary>
            <param name="span">The span to fill.</param>
            <param name="mean">The normal distribution mean.</param>
            <param name="stddev">The normal distribution standard deviation.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CPUCuRand.Dispose(System.Boolean)">
            <inheritdoc cref="M:ILGPU.Util.DisposeBase.Dispose(System.Boolean)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuRandException">
            <summary>
            Represents an CuRand exception that can be thrown by the CuRand library.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRandException.#ctor">
            <summary>
            Constructs a new CuRand exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRandException.#ctor(ILGPU.Runtime.Cuda.CuRandStatus)">
            <summary>
            Constructs a new CuRand exception.
            </summary>
            <param name="errorCode">The CuRand runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRandException.#ctor(System.String)">
            <summary cref="M:System.Exception.#ctor(System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRandException.#ctor(System.String,System.Exception)">
            <summary cref="M:System.Exception.#ctor(System.String,System.Exception)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRandException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuRandException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRandException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuRandException.ThrowIfFailed(ILGPU.Runtime.Cuda.CuRandStatus)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="errorCode">The CuRand error code to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.NvJpeg">
            <summary>
            Wrapper over NvJpeg to simplify integration with ILGPU.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpeg.#ctor">
            <summary>
            Constructs a new NvJpeg instance.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpeg.#ctor(System.Nullable{ILGPU.Runtime.Cuda.API.NvJpegAPIVersion})">
            <summary>
            Constructs a new NvJpeg wrapper instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvJpeg.API">
            <summary>
            The underlying API wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvJpeg.MajorVersion">
            <summary>
            Returns the major version of the NvJpeg library.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvJpeg.MinorVersion">
            <summary>
            Returns the minor version of the NvJpeg library.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvJpeg.PatchVersion">
            <summary>
            Returns the patch version of the NvJpeg library.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpeg.CreateSimple">
            <inheritdoc cref="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.CreateSimple(System.IntPtr@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpeg.GetProperty(ILGPU.Runtime.Cuda.LibraryPropertyType)">
            <inheritdoc cref="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.GetProperty(ILGPU.Runtime.Cuda.LibraryPropertyType,System.Int32@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpeg.GetCudartProperty(ILGPU.Runtime.Cuda.LibraryPropertyType)">
            <inheritdoc cref="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.GetCudartProperty(ILGPU.Runtime.Cuda.LibraryPropertyType,System.Int32@)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.NvJpegException">
            <summary>
            Represents an exception that can be thrown by the nvJPEG library.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegException.#ctor">
            <summary>
            Constructs a new nvJPEG exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegException.#ctor(ILGPU.Runtime.Cuda.NvJpegStatus)">
            <summary>
            Constructs a new nvJPEG exception.
            </summary>
            <param name="errorCode">The nvJPEG runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegException.#ctor(System.String)">
            <summary cref="M:System.Exception.#ctor(System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegException.#ctor(System.String,System.Exception)">
            <summary cref="M:System.Exception.#ctor(System.String,System.Exception)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvJpegException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegException.ThrowIfFailed(ILGPU.Runtime.Cuda.NvJpegStatus)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="errorCode">The nvJPEG error code to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.NvJpegLibrary">
            <summary>
            Represents an NvJpeg library.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegLibrary.#ctor(ILGPU.Runtime.Cuda.API.NvJpegAPI,System.IntPtr)">
            <summary>
            Constructs a new instance to wrap an NvJpeg library.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvJpegLibrary.API">
            <summary>
            The underlying API wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvJpegLibrary.LibHandle">
            <summary>
            The native handle.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegLibrary.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegLibrary.CreateState">
            <summary>
            Creates a new NvJpeg state instance.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegLibrary.GetImageInfo(System.ReadOnlySpan{System.Byte},System.Int32@,ILGPU.Runtime.Cuda.NvJpegChromaSubsampling@,System.Int32[]@,System.Int32[]@)">
            <inheritdoc cref="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.GetImageInfo(System.IntPtr,System.ReadOnlySpan{System.Byte},System.Int32@,ILGPU.Runtime.Cuda.NvJpegChromaSubsampling@,System.Int32[]@,System.Int32[]@)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegLibrary.Decode(ILGPU.Runtime.Cuda.NvJpegState,System.ReadOnlySpan{System.Byte},ILGPU.Runtime.Cuda.NvJpegOutputFormat,ILGPU.Runtime.Cuda.NvJpegImage@,ILGPU.Runtime.Cuda.CudaStream)">
            <inheritdoc cref="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.Decode(System.IntPtr,System.IntPtr,System.ReadOnlySpan{System.Byte},ILGPU.Runtime.Cuda.NvJpegOutputFormat,ILGPU.Runtime.Cuda.NvJpegImage@,ILGPU.Runtime.Cuda.CudaStream)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegLibrary.Decode(ILGPU.Runtime.Cuda.NvJpegState,System.ReadOnlySpan{System.Byte},ILGPU.Runtime.Cuda.NvJpegOutputFormat,ILGPU.Runtime.Cuda.NvJpegImage@)">
            <inheritdoc cref="M:ILGPU.Runtime.Cuda.API.NvJpegAPI.Decode(System.IntPtr,System.IntPtr,System.ReadOnlySpan{System.Byte},ILGPU.Runtime.Cuda.NvJpegOutputFormat,ILGPU.Runtime.Cuda.NvJpegImage@)"/>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.NvJpegState">
            <summary>
            Represents an NvJpeg state.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegState.#ctor(ILGPU.Runtime.Cuda.API.NvJpegAPI,System.IntPtr)">
            <summary>
            Constructs a new instance to wrap an NvJpeg state.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvJpegState.API">
            <summary>
            The underlying API wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvJpegState.StateHandle">
            <summary>
            The native handle.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegState.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegImage.Create(ILGPU.Runtime.Cuda.CudaAccelerator,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates image buffers to hold an image of the specified width, height and
            number of components/channels.
            </summary>
            <param name="accelerator">The accelerator.</param>
            <param name="width">The width (in bytes) per channel.</param>
            <param name="height">The height (in bytes) per channel.</param>
            <param name="numComponents">The number of components/channels.</param>
            <returns>The allocated buffers.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvJpegImage.ToInterop">
            <summary>
            Gets a representation of the image buffer allocation that is suitable for
            the NvJpeg Interop API.
            </summary>
            <returns>The interop data structure.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.NvmlDevice">
            <summary>
            Represents an NVML Device from the Nvidia Management Library.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.CreateFromAccelerator(ILGPU.Runtime.Cuda.CudaAccelerator)">
            <summary>
            Constructs a new instance to access the Nvidia Management Library
            from a Cuda accelerator.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.CreateFromPciBusId(System.String)">
            <summary>
            Constructs a new instance to access the Nvidia Management Library
            from the PCI Bus Id.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.CreateFromSerial(System.String)">
            <summary>
            Constructs a new instance to access the Nvidia Management Library
            from the board serial number.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.CreateFromUUID(System.String)">
            <summary>
            Constructs a new instance to access the Nvidia Management Library
            from the UUID of the GPU.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.CreateFromIndex(System.UInt32)">
            <summary>
            Constructs a new instance to access the Nvidia Management Library
            from the index of the GPU.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.CreateFromDeviceHandle(System.IntPtr)">
            <summary>
            Constructs a new instance to access the Nvidia Management Library
            from an existing device handle.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.CreateInitAPI(System.Nullable{ILGPU.Runtime.Cuda.API.NvmlAPIVersion})">
            <summary>
            Helper function to create and initialize a new instance of NvmlAPI.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvmlDevice.API">
            <summary>
            Returns the associated NVML API instance.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvmlDevice.DeviceHandle">
            <summary>
            The NVML native device handle.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.#ctor(ILGPU.Runtime.Cuda.API.NvmlAPI,System.IntPtr)">
            <summary>
            Constructs a new instance to access the Nvidia Management Library.
            </summary>
            <param name="api">The NVML API instance to use.</param>
            <param name="deviceHandle">The NVML device handle.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetFanSpeed">
            <summary>
            Returns the the intended operating speed of the device's fan.
            </summary>
            <returns>The fan speed percentage.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetFanSpeed(System.UInt32)">
            <summary>
            Returns the the intended operating speed of the device's fan.
            </summary>
            <param name="fan">The fan to query.</param>
            <returns>The fan speed percentage.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetGpuTemperature">
            <summary>
            Returns the current temperature readings for the device, in degrees C.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetTemperatureThreshold(ILGPU.Runtime.Cuda.NvmlTemperatureThresholds)">
            <summary>
            Returns the temperature threshold for the device, in degrees C.
            </summary>
            <param name="threshold">The threshold to query.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetGraphicsClockSpeed">
            <summary>
            Returns the current speed of the graphics clock for the device, in MHz.
            </summary>
            <returns>The speed in MHz.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetStreamingMultiprocessorClockSpeed">
            <summary>
            Returns the current speed of the SM clock for the device, in MHz.
            </summary>
            <returns>The speed in MHz.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetMemoryClockSpeed">
            <summary>
            Returns the current speed of the memory clock for the device, in MHz.
            </summary>
            <returns>The speed in MHz.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetVideoClockSpeed">
            <summary>
            Returns the current speed of the video clock for the device, in MHz.
            </summary>
            <returns>The speed in MHz.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetMaxGraphicsClockSpeed">
            <summary>
            Returns the max speed of the graphics clock for the device, in MHz.
            </summary>
            <returns>The speed in MHz.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetMaxStreamingMultiprocessorClockSpeed">
            <summary>
            Returns the max speed of the SM clock for the device, in MHz.
            </summary>
            <returns>The speed in MHz.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetMaxMemoryClockSpeed">
            <summary>
            Returns the max speed of the memory clock for the device, in MHz.
            </summary>
            <returns>The speed in MHz.</returns>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlDevice.GetMaxVideoClockSpeed">
            <summary>
            Returns the max speed of the video clock for the device, in MHz.
            </summary>
            <returns>The speed in MHz.</returns>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.NvmlException">
            <summary>
            Represents an exception that can be thrown by the NVML library.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlException.#ctor">
            <summary>
            Constructs a new NVML exception.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlException.#ctor(ILGPU.Runtime.Cuda.NvmlReturn)">
            <summary>
            Constructs a new NVML exception.
            </summary>
            <param name="errorCode">The NVML runtime error.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlException.#ctor(System.String)">
            <summary cref="M:System.Exception.#ctor(System.String)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlException.#ctor(System.String,System.Exception)">
            <summary cref="M:System.Exception.#ctor(System.String,System.Exception)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.NvmlException.Error">
            <summary>
            Returns the error.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary cref="M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)"/>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.NvmlException.ThrowIfFailed(ILGPU.Runtime.Cuda.NvmlReturn)">
            <summary>
            Checks the given status and throws an exception in case of an error.
            </summary>
            <param name="errorCode">The NVML error code to check.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuFFTWPlan">
            <summary>
            Represents a cuFFTW plan for "double" type.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.#ctor(ILGPU.Runtime.Cuda.API.CuFFTWAPI,System.IntPtr)">
            <summary>
            Constructs a new instance to wrap a cuFFT plan.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuFFTWPlan.API">
            <summary>
            The underlying API wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuFFTWPlan.PlanHandle">
            <summary>
            The native plan handle.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Execute">
            <summary>
            Executes the plan.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Execute(System.Span{System.Numerics.Complex},System.Span{System.Numerics.Complex})">
            <summary>
            Executes the plan on different arrays (complex to complex).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Execute_R2C(System.Span{System.Double},System.Span{System.Numerics.Complex})">
            <summary>
            Executes the plan on different arrays (real to complex).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Execute_C2R(System.Span{System.Numerics.Complex},System.Span{System.Double})">
            <summary>
            Executes the plan on different arrays (complex to real).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Execute(System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.ValueTuple{System.Double,System.Double}})">
            <summary>
            Executes the plan on different arrays (complex to complex).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Execute_R2C(System.Span{System.Double},System.Span{System.ValueTuple{System.Double,System.Double}})">
            <summary>
            Executes the plan on different arrays (real to complex).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Execute_C2R(System.Span{System.ValueTuple{System.Double,System.Double}},System.Span{System.Double})">
            <summary>
            Executes the plan on different arrays (complex to real).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Execute(System.Span{ILGPU.Util.Double2},System.Span{ILGPU.Util.Double2})">
            <summary>
            Executes the plan on different arrays (complex to complex).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Execute_R2C(System.Span{System.Double},System.Span{ILGPU.Util.Double2})">
            <summary>
            Executes the plan on different arrays (real to complex).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlan.Execute_C2R(System.Span{ILGPU.Util.Double2},System.Span{System.Double})">
            <summary>
            Executes the plan on different arrays (complex to real).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="T:ILGPU.Runtime.Cuda.CuFFTWPlanF">
            <summary>
            Represents a cuFFTW plan for "float" type.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlanF.#ctor(ILGPU.Runtime.Cuda.API.CuFFTWAPI,System.IntPtr)">
            <summary>
            Constructs a new instance to wrap a cuFFT plan.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlanF.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuFFTWPlanF.API">
            <summary>
            The underlying API wrapper.
            </summary>
        </member>
        <member name="P:ILGPU.Runtime.Cuda.CuFFTWPlanF.PlanHandle">
            <summary>
            The native plan handle.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlanF.Execute">
            <summary>
            Executes the plan.
            </summary>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlanF.Execute(System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.ValueTuple{System.Single,System.Single}})">
            <summary>
            Executes the plan on different arrays (complex to complex).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlanF.Execute_R2C(System.Span{System.Single},System.Span{System.ValueTuple{System.Single,System.Single}})">
            <summary>
            Executes the plan on different arrays (real to complex).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlanF.Execute_C2R(System.Span{System.ValueTuple{System.Single,System.Single}},System.Span{System.Single})">
            <summary>
            Executes the plan on different arrays (complex to real).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlanF.Execute(System.Span{ILGPU.Util.Float2},System.Span{ILGPU.Util.Float2})">
            <summary>
            Executes the plan on different arrays (complex to complex).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlanF.Execute_R2C(System.Span{System.Single},System.Span{ILGPU.Util.Float2})">
            <summary>
            Executes the plan on different arrays (real to complex).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="M:ILGPU.Runtime.Cuda.CuFFTWPlanF.Execute_C2R(System.Span{ILGPU.Util.Float2},System.Span{System.Single})">
            <summary>
            Executes the plan on different arrays (complex to real).
            </summary>
            <param name="idata">The input array.</param>
            <param name="odata">The output array.</param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
    </members>
</doc>
